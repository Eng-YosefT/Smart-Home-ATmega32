
SALVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ff8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  00001ff8  0000208c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080016a  0080016a  00002196  2**0
                  ALLOC
  3 .stab         000017a0  00000000  00000000  00002198  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c7c  00000000  00000000  00003938  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000045b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  00004714  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  000048ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  000067d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  000078a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000088dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  00008a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  00008d42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009638  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 65 0e 	jmp	0x1cca	; 0x1cca <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 36       	cpi	r26, 0x6E	; 110
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <main>
      8a:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 59       	subi	r30, 0x98	; 152
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <ADC_vinit>:
*/
#include <avr/io.h>
#include "std_macros.h"
#include "STD_Types.h"
void ADC_vinit(void)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
	/*configure VREF to the internal voltage(2.56 V)*/
	SET_BIT(ADMUX,REFS0);
     d76:	a7 e2       	ldi	r26, 0x27	; 39
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e7 e2       	ldi	r30, 0x27	; 39
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	80 64       	ori	r24, 0x40	; 64
     d82:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS1);
     d84:	a7 e2       	ldi	r26, 0x27	; 39
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e7 e2       	ldi	r30, 0x27	; 39
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	80 68       	ori	r24, 0x80	; 128
     d90:	8c 93       	st	X, r24
	/*************************************/
	SET_BIT(ADCSRA,ADEN); // ENable ADC
     d92:	a6 e2       	ldi	r26, 0x26	; 38
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e6 e2       	ldi	r30, 0x26	; 38
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	80 68       	ori	r24, 0x80	; 128
     d9e:	8c 93       	st	X, r24
	
	/* adjust ADC clock by select the division factor----->64*/
	SET_BIT(ADCSRA,ADPS2);
     da0:	a6 e2       	ldi	r26, 0x26	; 38
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e6 e2       	ldi	r30, 0x26	; 38
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	84 60       	ori	r24, 0x04	; 4
     dac:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
     dae:	a6 e2       	ldi	r26, 0x26	; 38
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e6 e2       	ldi	r30, 0x26	; 38
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	82 60       	ori	r24, 0x02	; 2
     dba:	8c 93       	st	X, r24
	/***********************************/
}
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <ADC_u16Read>:
uint16 ADC_u16Read(void)
{
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <ADC_u16Read+0x6>
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
	uint16 read_val; // which contain the converted value which will be returned
	SET_BIT(ADCSRA,ADSC); // start the ADC conversion
     dcc:	a6 e2       	ldi	r26, 0x26	; 38
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e6 e2       	ldi	r30, 0x26	; 38
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	80 64       	ori	r24, 0x40	; 64
     dd8:	8c 93       	st	X, r24
	while(IS_BIT_CLR(ADCSRA,ADIF));//stay in your position till ADIF become 1 when conversion complete
     dda:	e6 e2       	ldi	r30, 0x26	; 38
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	88 2f       	mov	r24, r24
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	80 71       	andi	r24, 0x10	; 16
     de6:	90 70       	andi	r25, 0x00	; 0
     de8:	95 95       	asr	r25
     dea:	87 95       	ror	r24
     dec:	95 95       	asr	r25
     dee:	87 95       	ror	r24
     df0:	95 95       	asr	r25
     df2:	87 95       	ror	r24
     df4:	95 95       	asr	r25
     df6:	87 95       	ror	r24
     df8:	00 97       	sbiw	r24, 0x00	; 0
     dfa:	79 f3       	breq	.-34     	; 0xdda <ADC_u16Read+0x18>
	SET_BIT(ADCSRA,ADIF); // clear ADIF
     dfc:	a6 e2       	ldi	r26, 0x26	; 38
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e6 e2       	ldi	r30, 0x26	; 38
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	80 61       	ori	r24, 0x10	; 16
     e08:	8c 93       	st	X, r24
	read_val=(ADCL); //reas the ADCL register
     e0a:	e4 e2       	ldi	r30, 0x24	; 36
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	88 2f       	mov	r24, r24
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	9a 83       	std	Y+2, r25	; 0x02
     e16:	89 83       	std	Y+1, r24	; 0x01
	read_val|=(ADCH<<8);//read the whole register
     e18:	e5 e2       	ldi	r30, 0x25	; 37
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	88 2f       	mov	r24, r24
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	98 2f       	mov	r25, r24
     e24:	88 27       	eor	r24, r24
     e26:	9c 01       	movw	r18, r24
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	9a 81       	ldd	r25, Y+2	; 0x02
     e2c:	82 2b       	or	r24, r18
     e2e:	93 2b       	or	r25, r19
     e30:	9a 83       	std	Y+2, r25	; 0x02
     e32:	89 83       	std	Y+1, r24	; 0x01
	return read_val ; // return the converted value
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
}
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <DIO_vsetPINDir>:

#include <avr/io.h>
#include "std_macros.h"
#include "DIO.h"
void DIO_vsetPINDir(uint8 portname,uint8 pinnumber,uint8 direction)
{
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	00 d0       	rcall	.+0      	; 0xe48 <DIO_vsetPINDir+0x6>
     e48:	00 d0       	rcall	.+0      	; 0xe4a <DIO_vsetPINDir+0x8>
     e4a:	0f 92       	push	r0
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	89 83       	std	Y+1, r24	; 0x01
     e52:	6a 83       	std	Y+2, r22	; 0x02
     e54:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	3d 83       	std	Y+5, r19	; 0x05
     e5e:	2c 83       	std	Y+4, r18	; 0x04
     e60:	8c 81       	ldd	r24, Y+4	; 0x04
     e62:	9d 81       	ldd	r25, Y+5	; 0x05
     e64:	82 34       	cpi	r24, 0x42	; 66
     e66:	91 05       	cpc	r25, r1
     e68:	09 f4       	brne	.+2      	; 0xe6c <DIO_vsetPINDir+0x2a>
     e6a:	44 c0       	rjmp	.+136    	; 0xef4 <DIO_vsetPINDir+0xb2>
     e6c:	2c 81       	ldd	r18, Y+4	; 0x04
     e6e:	3d 81       	ldd	r19, Y+5	; 0x05
     e70:	23 34       	cpi	r18, 0x43	; 67
     e72:	31 05       	cpc	r19, r1
     e74:	34 f4       	brge	.+12     	; 0xe82 <DIO_vsetPINDir+0x40>
     e76:	8c 81       	ldd	r24, Y+4	; 0x04
     e78:	9d 81       	ldd	r25, Y+5	; 0x05
     e7a:	81 34       	cpi	r24, 0x41	; 65
     e7c:	91 05       	cpc	r25, r1
     e7e:	71 f0       	breq	.+28     	; 0xe9c <DIO_vsetPINDir+0x5a>
     e80:	bc c0       	rjmp	.+376    	; 0xffa <DIO_vsetPINDir+0x1b8>
     e82:	2c 81       	ldd	r18, Y+4	; 0x04
     e84:	3d 81       	ldd	r19, Y+5	; 0x05
     e86:	23 34       	cpi	r18, 0x43	; 67
     e88:	31 05       	cpc	r19, r1
     e8a:	09 f4       	brne	.+2      	; 0xe8e <DIO_vsetPINDir+0x4c>
     e8c:	5f c0       	rjmp	.+190    	; 0xf4c <DIO_vsetPINDir+0x10a>
     e8e:	8c 81       	ldd	r24, Y+4	; 0x04
     e90:	9d 81       	ldd	r25, Y+5	; 0x05
     e92:	84 34       	cpi	r24, 0x44	; 68
     e94:	91 05       	cpc	r25, r1
     e96:	09 f4       	brne	.+2      	; 0xe9a <DIO_vsetPINDir+0x58>
     e98:	85 c0       	rjmp	.+266    	; 0xfa4 <DIO_vsetPINDir+0x162>
     e9a:	af c0       	rjmp	.+350    	; 0xffa <DIO_vsetPINDir+0x1b8>
	{
		
		
		case 'A':
		if(direction==1)
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	a1 f4       	brne	.+40     	; 0xeca <DIO_vsetPINDir+0x88>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
     ea2:	aa e3       	ldi	r26, 0x3A	; 58
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	ea e3       	ldi	r30, 0x3A	; 58
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	48 2f       	mov	r20, r24
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	02 2e       	mov	r0, r18
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <DIO_vsetPINDir+0x7e>
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	0a 94       	dec	r0
     ec2:	e2 f7       	brpl	.-8      	; 0xebc <DIO_vsetPINDir+0x7a>
     ec4:	84 2b       	or	r24, r20
     ec6:	8c 93       	st	X, r24
     ec8:	98 c0       	rjmp	.+304    	; 0xffa <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
     eca:	aa e3       	ldi	r26, 0x3A	; 58
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	ea e3       	ldi	r30, 0x3A	; 58
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 2e       	mov	r0, r18
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <DIO_vsetPINDir+0xa6>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	0a 94       	dec	r0
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <DIO_vsetPINDir+0xa2>
     eec:	80 95       	com	r24
     eee:	84 23       	and	r24, r20
     ef0:	8c 93       	st	X, r24
     ef2:	83 c0       	rjmp	.+262    	; 0xffa <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'B':
		if(direction==1)
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	a1 f4       	brne	.+40     	; 0xf22 <DIO_vsetPINDir+0xe0>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
     efa:	a7 e3       	ldi	r26, 0x37	; 55
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e7 e3       	ldi	r30, 0x37	; 55
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	48 2f       	mov	r20, r24
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 2e       	mov	r0, r18
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <DIO_vsetPINDir+0xd6>
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	0a 94       	dec	r0
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <DIO_vsetPINDir+0xd2>
     f1c:	84 2b       	or	r24, r20
     f1e:	8c 93       	st	X, r24
     f20:	6c c0       	rjmp	.+216    	; 0xffa <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
     f22:	a7 e3       	ldi	r26, 0x37	; 55
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e7 e3       	ldi	r30, 0x37	; 55
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	48 2f       	mov	r20, r24
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	02 2e       	mov	r0, r18
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <DIO_vsetPINDir+0xfe>
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	0a 94       	dec	r0
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <DIO_vsetPINDir+0xfa>
     f44:	80 95       	com	r24
     f46:	84 23       	and	r24, r20
     f48:	8c 93       	st	X, r24
     f4a:	57 c0       	rjmp	.+174    	; 0xffa <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'C':
		if(direction==1)
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	a1 f4       	brne	.+40     	; 0xf7a <DIO_vsetPINDir+0x138>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
     f52:	a4 e3       	ldi	r26, 0x34	; 52
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e4 e3       	ldi	r30, 0x34	; 52
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	48 2f       	mov	r20, r24
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 2e       	mov	r0, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <DIO_vsetPINDir+0x12e>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <DIO_vsetPINDir+0x12a>
     f74:	84 2b       	or	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	40 c0       	rjmp	.+128    	; 0xffa <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
     f7a:	a4 e3       	ldi	r26, 0x34	; 52
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e4 e3       	ldi	r30, 0x34	; 52
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_vsetPINDir+0x156>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_vsetPINDir+0x152>
     f9c:	80 95       	com	r24
     f9e:	84 23       	and	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	2b c0       	rjmp	.+86     	; 0xffa <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'D':
		if(direction==1)
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	a1 f4       	brne	.+40     	; 0xfd2 <DIO_vsetPINDir+0x190>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
     faa:	a1 e3       	ldi	r26, 0x31	; 49
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e1 e3       	ldi	r30, 0x31	; 49
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_vsetPINDir+0x186>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_vsetPINDir+0x182>
     fcc:	84 2b       	or	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	14 c0       	rjmp	.+40     	; 0xffa <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
     fd2:	a1 e3       	ldi	r26, 0x31	; 49
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e1 e3       	ldi	r30, 0x31	; 49
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <DIO_vsetPINDir+0x1ae>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <DIO_vsetPINDir+0x1aa>
     ff4:	80 95       	com	r24
     ff6:	84 23       	and	r24, r20
     ff8:	8c 93       	st	X, r24
		}
		break;
		default: break;
	}
}
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <DIO_write>:


void DIO_write(uint8 portname,uint8 pinnumber,uint8 outputvalue)
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	00 d0       	rcall	.+0      	; 0x1010 <DIO_write+0x6>
    1010:	00 d0       	rcall	.+0      	; 0x1012 <DIO_write+0x8>
    1012:	0f 92       	push	r0
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	6a 83       	std	Y+2, r22	; 0x02
    101c:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	3d 83       	std	Y+5, r19	; 0x05
    1026:	2c 83       	std	Y+4, r18	; 0x04
    1028:	8c 81       	ldd	r24, Y+4	; 0x04
    102a:	9d 81       	ldd	r25, Y+5	; 0x05
    102c:	82 34       	cpi	r24, 0x42	; 66
    102e:	91 05       	cpc	r25, r1
    1030:	09 f4       	brne	.+2      	; 0x1034 <DIO_write+0x2a>
    1032:	44 c0       	rjmp	.+136    	; 0x10bc <DIO_write+0xb2>
    1034:	2c 81       	ldd	r18, Y+4	; 0x04
    1036:	3d 81       	ldd	r19, Y+5	; 0x05
    1038:	23 34       	cpi	r18, 0x43	; 67
    103a:	31 05       	cpc	r19, r1
    103c:	34 f4       	brge	.+12     	; 0x104a <DIO_write+0x40>
    103e:	8c 81       	ldd	r24, Y+4	; 0x04
    1040:	9d 81       	ldd	r25, Y+5	; 0x05
    1042:	81 34       	cpi	r24, 0x41	; 65
    1044:	91 05       	cpc	r25, r1
    1046:	71 f0       	breq	.+28     	; 0x1064 <DIO_write+0x5a>
    1048:	bc c0       	rjmp	.+376    	; 0x11c2 <DIO_write+0x1b8>
    104a:	2c 81       	ldd	r18, Y+4	; 0x04
    104c:	3d 81       	ldd	r19, Y+5	; 0x05
    104e:	23 34       	cpi	r18, 0x43	; 67
    1050:	31 05       	cpc	r19, r1
    1052:	09 f4       	brne	.+2      	; 0x1056 <DIO_write+0x4c>
    1054:	5f c0       	rjmp	.+190    	; 0x1114 <DIO_write+0x10a>
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	9d 81       	ldd	r25, Y+5	; 0x05
    105a:	84 34       	cpi	r24, 0x44	; 68
    105c:	91 05       	cpc	r25, r1
    105e:	09 f4       	brne	.+2      	; 0x1062 <DIO_write+0x58>
    1060:	85 c0       	rjmp	.+266    	; 0x116c <DIO_write+0x162>
    1062:	af c0       	rjmp	.+350    	; 0x11c2 <DIO_write+0x1b8>
	{
		case 'A' :
		
		if(outputvalue==1)
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	a1 f4       	brne	.+40     	; 0x1092 <DIO_write+0x88>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
    106a:	ab e3       	ldi	r26, 0x3B	; 59
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	eb e3       	ldi	r30, 0x3B	; 59
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 2e       	mov	r0, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <DIO_write+0x7e>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	0a 94       	dec	r0
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <DIO_write+0x7a>
    108c:	84 2b       	or	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	98 c0       	rjmp	.+304    	; 0x11c2 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
    1092:	ab e3       	ldi	r26, 0x3B	; 59
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	eb e3       	ldi	r30, 0x3B	; 59
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <DIO_write+0xa6>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <DIO_write+0xa2>
    10b4:	80 95       	com	r24
    10b6:	84 23       	and	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	83 c0       	rjmp	.+262    	; 0x11c2 <DIO_write+0x1b8>
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	a1 f4       	brne	.+40     	; 0x10ea <DIO_write+0xe0>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
    10c2:	a8 e3       	ldi	r26, 0x38	; 56
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e8 e3       	ldi	r30, 0x38	; 56
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_write+0xd6>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_write+0xd2>
    10e4:	84 2b       	or	r24, r20
    10e6:	8c 93       	st	X, r24
    10e8:	6c c0       	rjmp	.+216    	; 0x11c2 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
    10ea:	a8 e3       	ldi	r26, 0x38	; 56
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e8 e3       	ldi	r30, 0x38	; 56
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_write+0xfe>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <DIO_write+0xfa>
    110c:	80 95       	com	r24
    110e:	84 23       	and	r24, r20
    1110:	8c 93       	st	X, r24
    1112:	57 c0       	rjmp	.+174    	; 0x11c2 <DIO_write+0x1b8>
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	a1 f4       	brne	.+40     	; 0x1142 <DIO_write+0x138>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
    111a:	a5 e3       	ldi	r26, 0x35	; 53
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e5 e3       	ldi	r30, 0x35	; 53
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 2e       	mov	r0, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <DIO_write+0x12e>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <DIO_write+0x12a>
    113c:	84 2b       	or	r24, r20
    113e:	8c 93       	st	X, r24
    1140:	40 c0       	rjmp	.+128    	; 0x11c2 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
    1142:	a5 e3       	ldi	r26, 0x35	; 53
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e5 e3       	ldi	r30, 0x35	; 53
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	48 2f       	mov	r20, r24
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 2e       	mov	r0, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <DIO_write+0x156>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <DIO_write+0x152>
    1164:	80 95       	com	r24
    1166:	84 23       	and	r24, r20
    1168:	8c 93       	st	X, r24
    116a:	2b c0       	rjmp	.+86     	; 0x11c2 <DIO_write+0x1b8>
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	a1 f4       	brne	.+40     	; 0x119a <DIO_write+0x190>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
    1172:	a2 e3       	ldi	r26, 0x32	; 50
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e2 e3       	ldi	r30, 0x32	; 50
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_write+0x186>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO_write+0x182>
    1194:	84 2b       	or	r24, r20
    1196:	8c 93       	st	X, r24
    1198:	14 c0       	rjmp	.+40     	; 0x11c2 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
    119a:	a2 e3       	ldi	r26, 0x32	; 50
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e2 e3       	ldi	r30, 0x32	; 50
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_write+0x1ae>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_write+0x1aa>
    11bc:	80 95       	com	r24
    11be:	84 23       	and	r24, r20
    11c0:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <DIO_u8read>:


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <DIO_u8read+0x6>
    11d8:	00 d0       	rcall	.+0      	; 0x11da <DIO_u8read+0x8>
    11da:	0f 92       	push	r0
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	8a 83       	std	Y+2, r24	; 0x02
    11e2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 return_value=0;
    11e4:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	3d 83       	std	Y+5, r19	; 0x05
    11ee:	2c 83       	std	Y+4, r18	; 0x04
    11f0:	4c 81       	ldd	r20, Y+4	; 0x04
    11f2:	5d 81       	ldd	r21, Y+5	; 0x05
    11f4:	42 34       	cpi	r20, 0x42	; 66
    11f6:	51 05       	cpc	r21, r1
    11f8:	b1 f1       	breq	.+108    	; 0x1266 <DIO_u8read+0x94>
    11fa:	8c 81       	ldd	r24, Y+4	; 0x04
    11fc:	9d 81       	ldd	r25, Y+5	; 0x05
    11fe:	83 34       	cpi	r24, 0x43	; 67
    1200:	91 05       	cpc	r25, r1
    1202:	34 f4       	brge	.+12     	; 0x1210 <DIO_u8read+0x3e>
    1204:	2c 81       	ldd	r18, Y+4	; 0x04
    1206:	3d 81       	ldd	r19, Y+5	; 0x05
    1208:	21 34       	cpi	r18, 0x41	; 65
    120a:	31 05       	cpc	r19, r1
    120c:	71 f0       	breq	.+28     	; 0x122a <DIO_u8read+0x58>
    120e:	84 c0       	rjmp	.+264    	; 0x1318 <DIO_u8read+0x146>
    1210:	4c 81       	ldd	r20, Y+4	; 0x04
    1212:	5d 81       	ldd	r21, Y+5	; 0x05
    1214:	43 34       	cpi	r20, 0x43	; 67
    1216:	51 05       	cpc	r21, r1
    1218:	09 f4       	brne	.+2      	; 0x121c <DIO_u8read+0x4a>
    121a:	43 c0       	rjmp	.+134    	; 0x12a2 <DIO_u8read+0xd0>
    121c:	8c 81       	ldd	r24, Y+4	; 0x04
    121e:	9d 81       	ldd	r25, Y+5	; 0x05
    1220:	84 34       	cpi	r24, 0x44	; 68
    1222:	91 05       	cpc	r25, r1
    1224:	09 f4       	brne	.+2      	; 0x1228 <DIO_u8read+0x56>
    1226:	5b c0       	rjmp	.+182    	; 0x12de <DIO_u8read+0x10c>
    1228:	77 c0       	rjmp	.+238    	; 0x1318 <DIO_u8read+0x146>
	{
		case 'A' :
		return_value=Read_bIT(PINA,pinnumber);//Read the value from the given pin in port A
    122a:	e9 e3       	ldi	r30, 0x39	; 57
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO_u8read+0x72>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	2a 95       	dec	r18
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO_u8read+0x6e>
    1248:	9a 01       	movw	r18, r20
    124a:	28 23       	and	r18, r24
    124c:	39 23       	and	r19, r25
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	88 2f       	mov	r24, r24
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	a9 01       	movw	r20, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <DIO_u8read+0x8a>
    1258:	55 95       	asr	r21
    125a:	47 95       	ror	r20
    125c:	8a 95       	dec	r24
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <DIO_u8read+0x86>
    1260:	ca 01       	movw	r24, r20
    1262:	89 83       	std	Y+1, r24	; 0x01
    1264:	59 c0       	rjmp	.+178    	; 0x1318 <DIO_u8read+0x146>
		break;
		
		case 'B' :
		return_value=Read_bIT(PINB,pinnumber);//Read the value from the given pin in port B
    1266:	e6 e3       	ldi	r30, 0x36	; 54
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	50 e0       	ldi	r21, 0x00	; 0
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <DIO_u8read+0xae>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	2a 95       	dec	r18
    1282:	e2 f7       	brpl	.-8      	; 0x127c <DIO_u8read+0xaa>
    1284:	9a 01       	movw	r18, r20
    1286:	28 23       	and	r18, r24
    1288:	39 23       	and	r19, r25
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	a9 01       	movw	r20, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_u8read+0xc6>
    1294:	55 95       	asr	r21
    1296:	47 95       	ror	r20
    1298:	8a 95       	dec	r24
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_u8read+0xc2>
    129c:	ca 01       	movw	r24, r20
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	3b c0       	rjmp	.+118    	; 0x1318 <DIO_u8read+0x146>
		break;
		
		case 'C' :
		return_value=Read_bIT(PINC,pinnumber);//Read the value from the given pin in port C
    12a2:	e3 e3       	ldi	r30, 0x33	; 51
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <DIO_u8read+0xea>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	2a 95       	dec	r18
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <DIO_u8read+0xe6>
    12c0:	9a 01       	movw	r18, r20
    12c2:	28 23       	and	r18, r24
    12c4:	39 23       	and	r19, r25
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	88 2f       	mov	r24, r24
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a9 01       	movw	r20, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <DIO_u8read+0x102>
    12d0:	55 95       	asr	r21
    12d2:	47 95       	ror	r20
    12d4:	8a 95       	dec	r24
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <DIO_u8read+0xfe>
    12d8:	ca 01       	movw	r24, r20
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	1d c0       	rjmp	.+58     	; 0x1318 <DIO_u8read+0x146>
		break;
		
		case 'D' :
		return_value=Read_bIT(PIND,pinnumber);//Read the value from the given pin in port D
    12de:	e0 e3       	ldi	r30, 0x30	; 48
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	48 2f       	mov	r20, r24
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <DIO_u8read+0x126>
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	2a 95       	dec	r18
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <DIO_u8read+0x122>
    12fc:	9a 01       	movw	r18, r20
    12fe:	28 23       	and	r18, r24
    1300:	39 23       	and	r19, r25
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	a9 01       	movw	r20, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_u8read+0x13e>
    130c:	55 95       	asr	r21
    130e:	47 95       	ror	r20
    1310:	8a 95       	dec	r24
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_u8read+0x13a>
    1314:	ca 01       	movw	r24, r20
    1316:	89 83       	std	Y+1, r24	; 0x01
		break;
		default: break;
	}
	return return_value ;
    1318:	89 81       	ldd	r24, Y+1	; 0x01
}
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <DIO_toggle>:
void DIO_toggle(uint8 portname,uint8 pinnumber)
{
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	00 d0       	rcall	.+0      	; 0x1330 <DIO_toggle+0x6>
    1330:	00 d0       	rcall	.+0      	; 0x1332 <DIO_toggle+0x8>
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	3c 83       	std	Y+4, r19	; 0x04
    1342:	2b 83       	std	Y+3, r18	; 0x03
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	82 34       	cpi	r24, 0x42	; 66
    134a:	91 05       	cpc	r25, r1
    134c:	51 f1       	breq	.+84     	; 0x13a2 <DIO_toggle+0x78>
    134e:	2b 81       	ldd	r18, Y+3	; 0x03
    1350:	3c 81       	ldd	r19, Y+4	; 0x04
    1352:	23 34       	cpi	r18, 0x43	; 67
    1354:	31 05       	cpc	r19, r1
    1356:	34 f4       	brge	.+12     	; 0x1364 <DIO_toggle+0x3a>
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	9c 81       	ldd	r25, Y+4	; 0x04
    135c:	81 34       	cpi	r24, 0x41	; 65
    135e:	91 05       	cpc	r25, r1
    1360:	61 f0       	breq	.+24     	; 0x137a <DIO_toggle+0x50>
    1362:	5a c0       	rjmp	.+180    	; 0x1418 <DIO_toggle+0xee>
    1364:	2b 81       	ldd	r18, Y+3	; 0x03
    1366:	3c 81       	ldd	r19, Y+4	; 0x04
    1368:	23 34       	cpi	r18, 0x43	; 67
    136a:	31 05       	cpc	r19, r1
    136c:	71 f1       	breq	.+92     	; 0x13ca <DIO_toggle+0xa0>
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	84 34       	cpi	r24, 0x44	; 68
    1374:	91 05       	cpc	r25, r1
    1376:	e9 f1       	breq	.+122    	; 0x13f2 <DIO_toggle+0xc8>
    1378:	4f c0       	rjmp	.+158    	; 0x1418 <DIO_toggle+0xee>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
    137a:	ab e3       	ldi	r26, 0x3B	; 59
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	eb e3       	ldi	r30, 0x3B	; 59
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	48 2f       	mov	r20, r24
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 2e       	mov	r0, r18
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <DIO_toggle+0x6e>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	0a 94       	dec	r0
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <DIO_toggle+0x6a>
    139c:	84 27       	eor	r24, r20
    139e:	8c 93       	st	X, r24
    13a0:	3b c0       	rjmp	.+118    	; 0x1418 <DIO_toggle+0xee>
		break;
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
    13a2:	a8 e3       	ldi	r26, 0x38	; 56
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e8 e3       	ldi	r30, 0x38	; 56
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <DIO_toggle+0x96>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <DIO_toggle+0x92>
    13c4:	84 27       	eor	r24, r20
    13c6:	8c 93       	st	X, r24
    13c8:	27 c0       	rjmp	.+78     	; 0x1418 <DIO_toggle+0xee>
		break;
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
    13ca:	a5 e3       	ldi	r26, 0x35	; 53
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e5 e3       	ldi	r30, 0x35	; 53
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	48 2f       	mov	r20, r24
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 2e       	mov	r0, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <DIO_toggle+0xbe>
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	0a 94       	dec	r0
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <DIO_toggle+0xba>
    13ec:	84 27       	eor	r24, r20
    13ee:	8c 93       	st	X, r24
    13f0:	13 c0       	rjmp	.+38     	; 0x1418 <DIO_toggle+0xee>
		break;
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
    13f2:	a2 e3       	ldi	r26, 0x32	; 50
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e2 e3       	ldi	r30, 0x32	; 50
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	48 2f       	mov	r20, r24
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 2e       	mov	r0, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_toggle+0xe6>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	0a 94       	dec	r0
    1412:	e2 f7       	brpl	.-8      	; 0x140c <DIO_toggle+0xe2>
    1414:	84 27       	eor	r24, r20
    1416:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <DIO_write_port>:
void DIO_write_port(uint8 portname,uint8 portvalue)
{
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	00 d0       	rcall	.+0      	; 0x142c <DIO_write_port+0x6>
    142c:	00 d0       	rcall	.+0      	; 0x142e <DIO_write_port+0x8>
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	3c 83       	std	Y+4, r19	; 0x04
    143e:	2b 83       	std	Y+3, r18	; 0x03
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	9c 81       	ldd	r25, Y+4	; 0x04
    1444:	82 34       	cpi	r24, 0x42	; 66
    1446:	91 05       	cpc	r25, r1
    1448:	d9 f0       	breq	.+54     	; 0x1480 <DIO_write_port+0x5a>
    144a:	2b 81       	ldd	r18, Y+3	; 0x03
    144c:	3c 81       	ldd	r19, Y+4	; 0x04
    144e:	23 34       	cpi	r18, 0x43	; 67
    1450:	31 05       	cpc	r19, r1
    1452:	34 f4       	brge	.+12     	; 0x1460 <DIO_write_port+0x3a>
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	81 34       	cpi	r24, 0x41	; 65
    145a:	91 05       	cpc	r25, r1
    145c:	61 f0       	breq	.+24     	; 0x1476 <DIO_write_port+0x50>
    145e:	1e c0       	rjmp	.+60     	; 0x149c <DIO_write_port+0x76>
    1460:	2b 81       	ldd	r18, Y+3	; 0x03
    1462:	3c 81       	ldd	r19, Y+4	; 0x04
    1464:	23 34       	cpi	r18, 0x43	; 67
    1466:	31 05       	cpc	r19, r1
    1468:	81 f0       	breq	.+32     	; 0x148a <DIO_write_port+0x64>
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	9c 81       	ldd	r25, Y+4	; 0x04
    146e:	84 34       	cpi	r24, 0x44	; 68
    1470:	91 05       	cpc	r25, r1
    1472:	81 f0       	breq	.+32     	; 0x1494 <DIO_write_port+0x6e>
    1474:	13 c0       	rjmp	.+38     	; 0x149c <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
    1476:	eb e3       	ldi	r30, 0x3B	; 59
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	80 83       	st	Z, r24
    147e:	0e c0       	rjmp	.+28     	; 0x149c <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
    1480:	e8 e3       	ldi	r30, 0x38	; 56
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	80 83       	st	Z, r24
    1488:	09 c0       	rjmp	.+18     	; 0x149c <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
    148a:	e5 e3       	ldi	r30, 0x35	; 53
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	80 83       	st	Z, r24
    1492:	04 c0       	rjmp	.+8      	; 0x149c <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
    1494:	e2 e3       	ldi	r30, 0x32	; 50
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	80 83       	st	Z, r24
		break ;
		default: break ;
	}
}
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <dio_write_highnibble>:
void dio_write_highnibble(uint8 portname,uint8 value)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <dio_write_highnibble+0x6>
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <dio_write_highnibble+0x8>
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	89 83       	std	Y+1, r24	; 0x01
    14b8:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	3c 83       	std	Y+4, r19	; 0x04
    14c2:	2b 83       	std	Y+3, r18	; 0x03
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	9c 81       	ldd	r25, Y+4	; 0x04
    14c8:	82 34       	cpi	r24, 0x42	; 66
    14ca:	91 05       	cpc	r25, r1
    14cc:	09 f1       	breq	.+66     	; 0x1510 <dio_write_highnibble+0x66>
    14ce:	2b 81       	ldd	r18, Y+3	; 0x03
    14d0:	3c 81       	ldd	r19, Y+4	; 0x04
    14d2:	23 34       	cpi	r18, 0x43	; 67
    14d4:	31 05       	cpc	r19, r1
    14d6:	34 f4       	brge	.+12     	; 0x14e4 <dio_write_highnibble+0x3a>
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	9c 81       	ldd	r25, Y+4	; 0x04
    14dc:	81 34       	cpi	r24, 0x41	; 65
    14de:	91 05       	cpc	r25, r1
    14e0:	61 f0       	breq	.+24     	; 0x14fa <dio_write_highnibble+0x50>
    14e2:	36 c0       	rjmp	.+108    	; 0x1550 <dio_write_highnibble+0xa6>
    14e4:	2b 81       	ldd	r18, Y+3	; 0x03
    14e6:	3c 81       	ldd	r19, Y+4	; 0x04
    14e8:	23 34       	cpi	r18, 0x43	; 67
    14ea:	31 05       	cpc	r19, r1
    14ec:	e1 f0       	breq	.+56     	; 0x1526 <dio_write_highnibble+0x7c>
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	9c 81       	ldd	r25, Y+4	; 0x04
    14f2:	84 34       	cpi	r24, 0x44	; 68
    14f4:	91 05       	cpc	r25, r1
    14f6:	11 f1       	breq	.+68     	; 0x153c <dio_write_highnibble+0x92>
    14f8:	2b c0       	rjmp	.+86     	; 0x1550 <dio_write_highnibble+0xa6>
	{
		case 'A' :
		PORTA|=(value&0xf0);//Set only the high nibble of the port A by the given value
    14fa:	ab e3       	ldi	r26, 0x3B	; 59
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	eb e3       	ldi	r30, 0x3B	; 59
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	98 2f       	mov	r25, r24
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	80 7f       	andi	r24, 0xF0	; 240
    150a:	89 2b       	or	r24, r25
    150c:	8c 93       	st	X, r24
    150e:	20 c0       	rjmp	.+64     	; 0x1550 <dio_write_highnibble+0xa6>
		break ;
		case 'B':
		PORTB|=(value&0xf0);//Set only the high nibble of the port B by the given value
    1510:	a8 e3       	ldi	r26, 0x38	; 56
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e8 e3       	ldi	r30, 0x38	; 56
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	98 2f       	mov	r25, r24
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	80 7f       	andi	r24, 0xF0	; 240
    1520:	89 2b       	or	r24, r25
    1522:	8c 93       	st	X, r24
    1524:	15 c0       	rjmp	.+42     	; 0x1550 <dio_write_highnibble+0xa6>
		break ;
		case 'C' :
		PORTC|=(value&0xf0);//Set only the high nibble of the port C by the given value
    1526:	a5 e3       	ldi	r26, 0x35	; 53
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e5 e3       	ldi	r30, 0x35	; 53
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	98 2f       	mov	r25, r24
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	80 7f       	andi	r24, 0xF0	; 240
    1536:	89 2b       	or	r24, r25
    1538:	8c 93       	st	X, r24
    153a:	0a c0       	rjmp	.+20     	; 0x1550 <dio_write_highnibble+0xa6>
		break ;
		case 'D':
		PORTD|=(value&0xf0);//Set only the high nibble of the port D by the given value
    153c:	a2 e3       	ldi	r26, 0x32	; 50
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e2 e3       	ldi	r30, 0x32	; 50
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	98 2f       	mov	r25, r24
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	80 7f       	andi	r24, 0xF0	; 240
    154c:	89 2b       	or	r24, r25
    154e:	8c 93       	st	X, r24
		break ;
		default: break ;
		
	}
}
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <clear_high_nibble>:

void clear_high_nibble(uint8 portname)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <clear_high_nibble+0x6>
    1564:	0f 92       	push	r0
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	3b 83       	std	Y+3, r19	; 0x03
    1574:	2a 83       	std	Y+2, r18	; 0x02
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	9b 81       	ldd	r25, Y+3	; 0x03
    157a:	82 34       	cpi	r24, 0x42	; 66
    157c:	91 05       	cpc	r25, r1
    157e:	f1 f0       	breq	.+60     	; 0x15bc <clear_high_nibble+0x5e>
    1580:	2a 81       	ldd	r18, Y+2	; 0x02
    1582:	3b 81       	ldd	r19, Y+3	; 0x03
    1584:	23 34       	cpi	r18, 0x43	; 67
    1586:	31 05       	cpc	r19, r1
    1588:	34 f4       	brge	.+12     	; 0x1596 <clear_high_nibble+0x38>
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	9b 81       	ldd	r25, Y+3	; 0x03
    158e:	81 34       	cpi	r24, 0x41	; 65
    1590:	91 05       	cpc	r25, r1
    1592:	61 f0       	breq	.+24     	; 0x15ac <clear_high_nibble+0x4e>
    1594:	2a c0       	rjmp	.+84     	; 0x15ea <clear_high_nibble+0x8c>
    1596:	2a 81       	ldd	r18, Y+2	; 0x02
    1598:	3b 81       	ldd	r19, Y+3	; 0x03
    159a:	23 34       	cpi	r18, 0x43	; 67
    159c:	31 05       	cpc	r19, r1
    159e:	b1 f0       	breq	.+44     	; 0x15cc <clear_high_nibble+0x6e>
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	9b 81       	ldd	r25, Y+3	; 0x03
    15a4:	84 34       	cpi	r24, 0x44	; 68
    15a6:	91 05       	cpc	r25, r1
    15a8:	c9 f0       	breq	.+50     	; 0x15dc <clear_high_nibble+0x7e>
    15aa:	1f c0       	rjmp	.+62     	; 0x15ea <clear_high_nibble+0x8c>
	{
		case 'A' :
		PORTA&=0x0f;//set the value of the high nibble of the port A as low
    15ac:	ab e3       	ldi	r26, 0x3B	; 59
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	eb e3       	ldi	r30, 0x3B	; 59
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	8f 70       	andi	r24, 0x0F	; 15
    15b8:	8c 93       	st	X, r24
    15ba:	17 c0       	rjmp	.+46     	; 0x15ea <clear_high_nibble+0x8c>
		break ;
		case 'B':
		PORTB&=0x0f;//set the value of the high nibble of the port B as low
    15bc:	a8 e3       	ldi	r26, 0x38	; 56
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e8 e3       	ldi	r30, 0x38	; 56
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	8f 70       	andi	r24, 0x0F	; 15
    15c8:	8c 93       	st	X, r24
    15ca:	0f c0       	rjmp	.+30     	; 0x15ea <clear_high_nibble+0x8c>
		break ;
		case 'C' :
		PORTC&=0x0f;//set the value of the high nibble of the port C as low
    15cc:	a5 e3       	ldi	r26, 0x35	; 53
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e5 e3       	ldi	r30, 0x35	; 53
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	8f 70       	andi	r24, 0x0F	; 15
    15d8:	8c 93       	st	X, r24
    15da:	07 c0       	rjmp	.+14     	; 0x15ea <clear_high_nibble+0x8c>
		break ;
		case 'D':
		PORTD&=0x0f;//set the value of the high nibble of the port D as low
    15dc:	a2 e3       	ldi	r26, 0x32	; 50
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e2 e3       	ldi	r30, 0x32	; 50
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	8f 70       	andi	r24, 0x0F	; 15
    15e8:	8c 93       	st	X, r24
		break ;
		default: break ;
		
	}
}
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <DIO_vconnectpullup>:

void DIO_vconnectpullup(uint8 portname ,uint8 pinnumber, uint8 connect_pullup)
{
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <DIO_vconnectpullup+0x6>
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <DIO_vconnectpullup+0x8>
    15fe:	0f 92       	push	r0
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	6a 83       	std	Y+2, r22	; 0x02
    1608:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	3d 83       	std	Y+5, r19	; 0x05
    1612:	2c 83       	std	Y+4, r18	; 0x04
    1614:	8c 81       	ldd	r24, Y+4	; 0x04
    1616:	9d 81       	ldd	r25, Y+5	; 0x05
    1618:	82 34       	cpi	r24, 0x42	; 66
    161a:	91 05       	cpc	r25, r1
    161c:	09 f4       	brne	.+2      	; 0x1620 <DIO_vconnectpullup+0x2a>
    161e:	5e c0       	rjmp	.+188    	; 0x16dc <DIO_vconnectpullup+0xe6>
    1620:	2c 81       	ldd	r18, Y+4	; 0x04
    1622:	3d 81       	ldd	r19, Y+5	; 0x05
    1624:	23 34       	cpi	r18, 0x43	; 67
    1626:	31 05       	cpc	r19, r1
    1628:	34 f4       	brge	.+12     	; 0x1636 <DIO_vconnectpullup+0x40>
    162a:	8c 81       	ldd	r24, Y+4	; 0x04
    162c:	9d 81       	ldd	r25, Y+5	; 0x05
    162e:	81 34       	cpi	r24, 0x41	; 65
    1630:	91 05       	cpc	r25, r1
    1632:	71 f0       	breq	.+28     	; 0x1650 <DIO_vconnectpullup+0x5a>
    1634:	24 c1       	rjmp	.+584    	; 0x187e <DIO_vconnectpullup+0x288>
    1636:	2c 81       	ldd	r18, Y+4	; 0x04
    1638:	3d 81       	ldd	r19, Y+5	; 0x05
    163a:	23 34       	cpi	r18, 0x43	; 67
    163c:	31 05       	cpc	r19, r1
    163e:	09 f4       	brne	.+2      	; 0x1642 <DIO_vconnectpullup+0x4c>
    1640:	93 c0       	rjmp	.+294    	; 0x1768 <DIO_vconnectpullup+0x172>
    1642:	8c 81       	ldd	r24, Y+4	; 0x04
    1644:	9d 81       	ldd	r25, Y+5	; 0x05
    1646:	84 34       	cpi	r24, 0x44	; 68
    1648:	91 05       	cpc	r25, r1
    164a:	09 f4       	brne	.+2      	; 0x164e <DIO_vconnectpullup+0x58>
    164c:	d3 c0       	rjmp	.+422    	; 0x17f4 <DIO_vconnectpullup+0x1fe>
    164e:	17 c1       	rjmp	.+558    	; 0x187e <DIO_vconnectpullup+0x288>
	{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case 'A':
		if(connect_pullup==1)
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	71 f5       	brne	.+92     	; 0x16b2 <DIO_vconnectpullup+0xbc>
		{
			CLR_BIT(SFIOR,PUD);
    1656:	a0 e5       	ldi	r26, 0x50	; 80
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e0 e5       	ldi	r30, 0x50	; 80
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	8b 7f       	andi	r24, 0xFB	; 251
    1662:	8c 93       	st	X, r24
			CLR_BIT(DDRA,pinnumber);
    1664:	aa e3       	ldi	r26, 0x3A	; 58
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	ea e3       	ldi	r30, 0x3A	; 58
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	48 2f       	mov	r20, r24
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <DIO_vconnectpullup+0x8a>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	2a 95       	dec	r18
    1682:	e2 f7       	brpl	.-8      	; 0x167c <DIO_vconnectpullup+0x86>
    1684:	80 95       	com	r24
    1686:	84 23       	and	r24, r20
    1688:	8c 93       	st	X, r24
			SET_BIT(PORTA,pinnumber);
    168a:	ab e3       	ldi	r26, 0x3B	; 59
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	eb e3       	ldi	r30, 0x3B	; 59
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	48 2f       	mov	r20, r24
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 2e       	mov	r0, r18
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <DIO_vconnectpullup+0xb2>
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	0a 94       	dec	r0
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <DIO_vconnectpullup+0xae>
    16ac:	84 2b       	or	r24, r20
    16ae:	8c 93       	st	X, r24
    16b0:	e6 c0       	rjmp	.+460    	; 0x187e <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
    16b2:	ab e3       	ldi	r26, 0x3B	; 59
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	eb e3       	ldi	r30, 0x3B	; 59
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	48 2f       	mov	r20, r24
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	02 2e       	mov	r0, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <DIO_vconnectpullup+0xda>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	0a 94       	dec	r0
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <DIO_vconnectpullup+0xd6>
    16d4:	80 95       	com	r24
    16d6:	84 23       	and	r24, r20
    16d8:	8c 93       	st	X, r24
    16da:	d1 c0       	rjmp	.+418    	; 0x187e <DIO_vconnectpullup+0x288>
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port B */
		case 'B':
		if(connect_pullup==1)
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	81 30       	cpi	r24, 0x01	; 1
    16e0:	71 f5       	brne	.+92     	; 0x173e <DIO_vconnectpullup+0x148>
		{
			CLR_BIT(SFIOR,PUD);
    16e2:	a0 e5       	ldi	r26, 0x50	; 80
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e0 e5       	ldi	r30, 0x50	; 80
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	8b 7f       	andi	r24, 0xFB	; 251
    16ee:	8c 93       	st	X, r24
			CLR_BIT(DDRB,pinnumber);
    16f0:	a7 e3       	ldi	r26, 0x37	; 55
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e7 e3       	ldi	r30, 0x37	; 55
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	48 2f       	mov	r20, r24
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	02 c0       	rjmp	.+4      	; 0x170c <DIO_vconnectpullup+0x116>
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	2a 95       	dec	r18
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <DIO_vconnectpullup+0x112>
    1710:	80 95       	com	r24
    1712:	84 23       	and	r24, r20
    1714:	8c 93       	st	X, r24
			SET_BIT(PORTB,pinnumber);
    1716:	a8 e3       	ldi	r26, 0x38	; 56
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e8 e3       	ldi	r30, 0x38	; 56
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 2e       	mov	r0, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <DIO_vconnectpullup+0x13e>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	0a 94       	dec	r0
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <DIO_vconnectpullup+0x13a>
    1738:	84 2b       	or	r24, r20
    173a:	8c 93       	st	X, r24
    173c:	a0 c0       	rjmp	.+320    	; 0x187e <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
    173e:	a8 e3       	ldi	r26, 0x38	; 56
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e8 e3       	ldi	r30, 0x38	; 56
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	48 2f       	mov	r20, r24
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 2e       	mov	r0, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <DIO_vconnectpullup+0x166>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	0a 94       	dec	r0
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <DIO_vconnectpullup+0x162>
    1760:	80 95       	com	r24
    1762:	84 23       	and	r24, r20
    1764:	8c 93       	st	X, r24
    1766:	8b c0       	rjmp	.+278    	; 0x187e <DIO_vconnectpullup+0x288>
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port C */
		case 'C':
		if(connect_pullup==1)
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	71 f5       	brne	.+92     	; 0x17ca <DIO_vconnectpullup+0x1d4>
		{
			CLR_BIT(SFIOR,PUD);
    176e:	a0 e5       	ldi	r26, 0x50	; 80
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e0 e5       	ldi	r30, 0x50	; 80
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	8b 7f       	andi	r24, 0xFB	; 251
    177a:	8c 93       	st	X, r24
			CLR_BIT(DDRC,pinnumber);
    177c:	a4 e3       	ldi	r26, 0x34	; 52
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e4 e3       	ldi	r30, 0x34	; 52
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	48 2f       	mov	r20, r24
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <DIO_vconnectpullup+0x1a2>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	2a 95       	dec	r18
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <DIO_vconnectpullup+0x19e>
    179c:	80 95       	com	r24
    179e:	84 23       	and	r24, r20
    17a0:	8c 93       	st	X, r24
			SET_BIT(PORTC,pinnumber);
    17a2:	a5 e3       	ldi	r26, 0x35	; 53
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e5 e3       	ldi	r30, 0x35	; 53
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 2e       	mov	r0, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <DIO_vconnectpullup+0x1ca>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <DIO_vconnectpullup+0x1c6>
    17c4:	84 2b       	or	r24, r20
    17c6:	8c 93       	st	X, r24
    17c8:	5a c0       	rjmp	.+180    	; 0x187e <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
    17ca:	a5 e3       	ldi	r26, 0x35	; 53
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e5 e3       	ldi	r30, 0x35	; 53
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	48 2f       	mov	r20, r24
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <DIO_vconnectpullup+0x1f2>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <DIO_vconnectpullup+0x1ee>
    17ec:	80 95       	com	r24
    17ee:	84 23       	and	r24, r20
    17f0:	8c 93       	st	X, r24
    17f2:	45 c0       	rjmp	.+138    	; 0x187e <DIO_vconnectpullup+0x288>
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port D */
		case 'D':
		if(connect_pullup==1)
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	81 30       	cpi	r24, 0x01	; 1
    17f8:	71 f5       	brne	.+92     	; 0x1856 <DIO_vconnectpullup+0x260>
		{
			CLR_BIT(SFIOR,PUD);
    17fa:	a0 e5       	ldi	r26, 0x50	; 80
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e0 e5       	ldi	r30, 0x50	; 80
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	8b 7f       	andi	r24, 0xFB	; 251
    1806:	8c 93       	st	X, r24
			CLR_BIT(DDRD,pinnumber);
    1808:	a1 e3       	ldi	r26, 0x31	; 49
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e1 e3       	ldi	r30, 0x31	; 49
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	48 2f       	mov	r20, r24
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <DIO_vconnectpullup+0x22e>
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	2a 95       	dec	r18
    1826:	e2 f7       	brpl	.-8      	; 0x1820 <DIO_vconnectpullup+0x22a>
    1828:	80 95       	com	r24
    182a:	84 23       	and	r24, r20
    182c:	8c 93       	st	X, r24
			SET_BIT(PORTD,pinnumber);
    182e:	a2 e3       	ldi	r26, 0x32	; 50
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e2 e3       	ldi	r30, 0x32	; 50
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	48 2f       	mov	r20, r24
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	02 2e       	mov	r0, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <DIO_vconnectpullup+0x256>
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	0a 94       	dec	r0
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <DIO_vconnectpullup+0x252>
    1850:	84 2b       	or	r24, r20
    1852:	8c 93       	st	X, r24
    1854:	14 c0       	rjmp	.+40     	; 0x187e <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
    1856:	a2 e3       	ldi	r26, 0x32	; 50
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e2 e3       	ldi	r30, 0x32	; 50
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	48 2f       	mov	r20, r24
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	02 2e       	mov	r0, r18
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <DIO_vconnectpullup+0x27e>
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	0a 94       	dec	r0
    1876:	e2 f7       	brpl	.-8      	; 0x1870 <DIO_vconnectpullup+0x27a>
    1878:	80 95       	com	r24
    187a:	84 23       	and	r24, r20
    187c:	8c 93       	st	X, r24
		}
		break;
		
	}
}
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <LED_vInit>:
/*
* LED.c
*/
#include "LED.h"
void LED_vInit(uint8 portname,uint8 pinnumber)
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	00 d0       	rcall	.+0      	; 0x1894 <LED_vInit+0x6>
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	89 83       	std	Y+1, r24	; 0x01
    189a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_vsetPINDir(portname,pinnumber,1);//Set the given pin in the given port as an output
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	6a 81       	ldd	r22, Y+2	; 0x02
    18a0:	41 e0       	ldi	r20, 0x01	; 1
    18a2:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_vsetPINDir>
}
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <LED_vTurnOn>:
void LED_vTurnOn(uint8 portname,uint8 pinnumber)
{
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <LED_vTurnOn+0x6>
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	89 83       	std	Y+1, r24	; 0x01
    18bc:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(portname,pinnumber,1);//Set the given pin in the given port to one(on)
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	6a 81       	ldd	r22, Y+2	; 0x02
    18c2:	41 e0       	ldi	r20, 0x01	; 1
    18c4:	0e 94 05 08 	call	0x100a	; 0x100a <DIO_write>
}
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <LED_vTurnOff>:
void LED_vTurnOff(uint8 portname,uint8 pinnumber)
{
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <LED_vTurnOff+0x6>
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	89 83       	std	Y+1, r24	; 0x01
    18de:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	6a 81       	ldd	r22, Y+2	; 0x02
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	0e 94 05 08 	call	0x100a	; 0x100a <DIO_write>
}
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <LED_vToggle>:
void LED_vToggle(uint8 portname,uint8 pinnumber)
{
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <LED_vToggle+0x6>
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	6a 83       	std	Y+2, r22	; 0x02
	DIO_toggle(portname,pinnumber);//Set the given pin in the given port to zero if it is one or set it to one if it is zero
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	6a 81       	ldd	r22, Y+2	; 0x02
    1906:	0e 94 95 09 	call	0x132a	; 0x132a <DIO_toggle>
}
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <LED_u8ReadStatus>:
uint8 LED_u8ReadStatus(uint8 portname,uint8 pinnumber)
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	00 d0       	rcall	.+0      	; 0x191a <LED_u8ReadStatus+0x6>
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	89 83       	std	Y+1, r24	; 0x01
    1920:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_u8read(portname,pinnumber);//return the current status of the given pin
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	6a 81       	ldd	r22, Y+2	; 0x02
    1926:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <DIO_u8read>
}
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	08 95       	ret

00001934 <SPI_vInitMaster>:
#include "SPI.h"
#include "STD_MESSAGES.h"
#include "std_macros.h"

void SPI_vInitMaster (void)
{
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
	DDRB |=(1<<SPI_MOSI) |(1<<SPI_SS)|(1<<SPI_SCK);//Set the port B mosi(master out slave in ) ,port B ss(slave select),sck(spi clock)  pins as output
    193c:	a7 e3       	ldi	r26, 0x37	; 55
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e7 e3       	ldi	r30, 0x37	; 55
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	80 6b       	ori	r24, 0xB0	; 176
    1948:	8c 93       	st	X, r24
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//Enable the SPI,master mode ,Set the clock speed to F/16
    194a:	ad e2       	ldi	r26, 0x2D	; 45
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	ed e2       	ldi	r30, 0x2D	; 45
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	81 65       	ori	r24, 0x51	; 81
    1956:	8c 93       	st	X, r24
}
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	08 95       	ret

0000195e <SPI_vInitSlave>:

void SPI_vInitSlave (void)
{
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
    1966:	a7 e3       	ldi	r26, 0x37	; 55
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e7 e3       	ldi	r30, 0x37	; 55
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	80 64       	ori	r24, 0x40	; 64
    1972:	8c 93       	st	X, r24
	SPCR |= (1<<SPE);//Enable the SPI
    1974:	ad e2       	ldi	r26, 0x2D	; 45
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	ed e2       	ldi	r30, 0x2D	; 45
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	80 64       	ori	r24, 0x40	; 64
    1980:	8c 93       	st	X, r24
}
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <SPI_ui8TransmitRecive>:

uint8 SPI_ui8TransmitRecive (uint8 data)
{
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	0f 92       	push	r0
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;//move the given data to SPI Data register
    1994:	ef e2       	ldi	r30, 0x2F	; 47
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	80 83       	st	Z, r24
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
    199c:	ee e2       	ldi	r30, 0x2E	; 46
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	88 1f       	adc	r24, r24
    19a4:	88 27       	eor	r24, r24
    19a6:	88 1f       	adc	r24, r24
    19a8:	88 2f       	mov	r24, r24
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	90 70       	andi	r25, 0x00	; 0
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	a9 f3       	breq	.-22     	; 0x199c <SPI_ui8TransmitRecive+0x14>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
    19b2:	ef e2       	ldi	r30, 0x2F	; 47
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	0f 90       	pop	r0
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <main>:
volatile uint16 temp_sensor_reading=0; // the temperature of the room 
volatile uint8 counter=0; // the counter which determine the periodic time of implementing ISR
volatile uint8 last_air_conditioning_value=AIR_CONDTIONING_OFF; // last air conditioning value which will help in hysteresis

int main(void)
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <main+0x6>
    19c6:	00 d0       	rcall	.+0      	; 0x19c8 <main+0x8>
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
	ADC_vinit();//initialize the ADC of the micro controller
    19cc:	0e 94 b7 06 	call	0xd6e	; 0xd6e <ADC_vinit>
	timer0_initializeCTC();//Initialize the timer zero of the micro controller
    19d0:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <timer0_initializeCTC>
	SPI_vInitSlave();//initialize the SPI as a slave
    19d4:	0e 94 af 0c 	call	0x195e	; 0x195e <SPI_vInitSlave>
	
	/* initialization of output pins of connected leds or devices */
	LED_vInit(AIR_COND_PORT,AIR_COND_PIN);
    19d8:	84 e4       	ldi	r24, 0x44	; 68
    19da:	62 e0       	ldi	r22, 0x02	; 2
    19dc:	0e 94 47 0c 	call	0x188e	; 0x188e <LED_vInit>
	LED_vInit(TV_PORT,TV_PIN);
    19e0:	84 e4       	ldi	r24, 0x44	; 68
    19e2:	63 e0       	ldi	r22, 0x03	; 3
    19e4:	0e 94 47 0c 	call	0x188e	; 0x188e <LED_vInit>
	LED_vInit(ROOM1_PORT,ROOM1_PIN);
    19e8:	84 e4       	ldi	r24, 0x44	; 68
    19ea:	64 e0       	ldi	r22, 0x04	; 4
    19ec:	0e 94 47 0c 	call	0x188e	; 0x188e <LED_vInit>
	LED_vInit(ROOM2_PORT,ROOM2_PIN);
    19f0:	84 e4       	ldi	r24, 0x44	; 68
    19f2:	65 e0       	ldi	r22, 0x05	; 5
    19f4:	0e 94 47 0c 	call	0x188e	; 0x188e <LED_vInit>
	LED_vInit(ROOM3_PORT,ROOM3_PIN);
    19f8:	84 e4       	ldi	r24, 0x44	; 68
    19fa:	66 e0       	ldi	r22, 0x06	; 6
    19fc:	0e 94 47 0c 	call	0x188e	; 0x188e <LED_vInit>
	LED_vInit(ROOM4_PORT,ROOM4_PIN);
    1a00:	84 e4       	ldi	r24, 0x44	; 68
    1a02:	67 e0       	ldi	r22, 0x07	; 7
    1a04:	0e 94 47 0c 	call	0x188e	; 0x188e <LED_vInit>
	
	uint8 request = DEFAULT_ACK;//the value that is received from the master
    1a08:	8f ef       	ldi	r24, 0xFF	; 255
    1a0a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 response = DEFAULT_ACK;//the values that is sent back to the master
    1a0c:	8f ef       	ldi	r24, 0xFF	; 255
    1a0e:	89 83       	std	Y+1, r24	; 0x01
	
	while(1)
	{
		request = SPI_ui8TransmitRecive(DEFAULT_ACK);//wait for the master to start the transmitting
    1a10:	8f ef       	ldi	r24, 0xFF	; 255
    1a12:	0e 94 c4 0c 	call	0x1988	; 0x1988 <SPI_ui8TransmitRecive>
    1a16:	8a 83       	std	Y+2, r24	; 0x02
		//ALL Messages are defined in STD_messages.h
		switch (request)
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	3c 83       	std	Y+4, r19	; 0x04
    1a20:	2b 83       	std	Y+3, r18	; 0x03
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	9c 81       	ldd	r25, Y+4	; 0x04
    1a26:	84 32       	cpi	r24, 0x24	; 36
    1a28:	91 05       	cpc	r25, r1
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <main+0x6e>
    1a2c:	13 c1       	rjmp	.+550    	; 0x1c54 <main+0x294>
    1a2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a30:	3c 81       	ldd	r19, Y+4	; 0x04
    1a32:	25 32       	cpi	r18, 0x25	; 37
    1a34:	31 05       	cpc	r19, r1
    1a36:	0c f0       	brlt	.+2      	; 0x1a3a <main+0x7a>
    1a38:	49 c0       	rjmp	.+146    	; 0x1acc <main+0x10c>
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3e:	85 31       	cpi	r24, 0x15	; 21
    1a40:	91 05       	cpc	r25, r1
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <main+0x86>
    1a44:	e4 c0       	rjmp	.+456    	; 0x1c0e <main+0x24e>
    1a46:	2b 81       	ldd	r18, Y+3	; 0x03
    1a48:	3c 81       	ldd	r19, Y+4	; 0x04
    1a4a:	26 31       	cpi	r18, 0x16	; 22
    1a4c:	31 05       	cpc	r19, r1
    1a4e:	fc f4       	brge	.+62     	; 0x1a8e <main+0xce>
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	9c 81       	ldd	r25, Y+4	; 0x04
    1a54:	82 31       	cpi	r24, 0x12	; 18
    1a56:	91 05       	cpc	r25, r1
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <main+0x9c>
    1a5a:	89 c0       	rjmp	.+274    	; 0x1b6e <main+0x1ae>
    1a5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a60:	23 31       	cpi	r18, 0x13	; 19
    1a62:	31 05       	cpc	r19, r1
    1a64:	3c f4       	brge	.+14     	; 0x1a74 <main+0xb4>
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6a:	81 31       	cpi	r24, 0x11	; 17
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <main+0xb2>
    1a70:	6a c0       	rjmp	.+212    	; 0x1b46 <main+0x186>
    1a72:	ce cf       	rjmp	.-100    	; 0x1a10 <main+0x50>
    1a74:	2b 81       	ldd	r18, Y+3	; 0x03
    1a76:	3c 81       	ldd	r19, Y+4	; 0x04
    1a78:	23 31       	cpi	r18, 0x13	; 19
    1a7a:	31 05       	cpc	r19, r1
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <main+0xc0>
    1a7e:	8b c0       	rjmp	.+278    	; 0x1b96 <main+0x1d6>
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	9c 81       	ldd	r25, Y+4	; 0x04
    1a84:	84 31       	cpi	r24, 0x14	; 20
    1a86:	91 05       	cpc	r25, r1
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <main+0xcc>
    1a8a:	99 c0       	rjmp	.+306    	; 0x1bbe <main+0x1fe>
    1a8c:	c1 cf       	rjmp	.-126    	; 0x1a10 <main+0x50>
    1a8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a90:	3c 81       	ldd	r19, Y+4	; 0x04
    1a92:	21 32       	cpi	r18, 0x21	; 33
    1a94:	31 05       	cpc	r19, r1
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <main+0xda>
    1a98:	ce c0       	rjmp	.+412    	; 0x1c36 <main+0x276>
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9e:	82 32       	cpi	r24, 0x22	; 34
    1aa0:	91 05       	cpc	r25, r1
    1aa2:	3c f4       	brge	.+14     	; 0x1ab2 <main+0xf2>
    1aa4:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa6:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa8:	26 31       	cpi	r18, 0x16	; 22
    1aaa:	31 05       	cpc	r19, r1
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <main+0xf0>
    1aae:	9b c0       	rjmp	.+310    	; 0x1be6 <main+0x226>
    1ab0:	af cf       	rjmp	.-162    	; 0x1a10 <main+0x50>
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	82 32       	cpi	r24, 0x22	; 34
    1ab8:	91 05       	cpc	r25, r1
    1aba:	09 f4       	brne	.+2      	; 0x1abe <main+0xfe>
    1abc:	c1 c0       	rjmp	.+386    	; 0x1c40 <main+0x280>
    1abe:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac2:	23 32       	cpi	r18, 0x23	; 35
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <main+0x10a>
    1ac8:	c0 c0       	rjmp	.+384    	; 0x1c4a <main+0x28a>
    1aca:	a2 cf       	rjmp	.-188    	; 0x1a10 <main+0x50>
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad0:	83 33       	cpi	r24, 0x33	; 51
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <main+0x118>
    1ad6:	d9 c0       	rjmp	.+434    	; 0x1c8a <main+0x2ca>
    1ad8:	2b 81       	ldd	r18, Y+3	; 0x03
    1ada:	3c 81       	ldd	r19, Y+4	; 0x04
    1adc:	24 33       	cpi	r18, 0x34	; 52
    1ade:	31 05       	cpc	r19, r1
    1ae0:	cc f4       	brge	.+50     	; 0x1b14 <main+0x154>
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	86 32       	cpi	r24, 0x26	; 38
    1ae8:	91 05       	cpc	r25, r1
    1aea:	09 f4       	brne	.+2      	; 0x1aee <main+0x12e>
    1aec:	b8 c0       	rjmp	.+368    	; 0x1c5e <main+0x29e>
    1aee:	2b 81       	ldd	r18, Y+3	; 0x03
    1af0:	3c 81       	ldd	r19, Y+4	; 0x04
    1af2:	26 32       	cpi	r18, 0x26	; 38
    1af4:	31 05       	cpc	r19, r1
    1af6:	0c f4       	brge	.+2      	; 0x1afa <main+0x13a>
    1af8:	b9 c0       	rjmp	.+370    	; 0x1c6c <main+0x2ac>
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	9c 81       	ldd	r25, Y+4	; 0x04
    1afe:	81 33       	cpi	r24, 0x31	; 49
    1b00:	91 05       	cpc	r25, r1
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <main+0x146>
    1b04:	b8 c0       	rjmp	.+368    	; 0x1c76 <main+0x2b6>
    1b06:	2b 81       	ldd	r18, Y+3	; 0x03
    1b08:	3c 81       	ldd	r19, Y+4	; 0x04
    1b0a:	22 33       	cpi	r18, 0x32	; 50
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <main+0x152>
    1b10:	b7 c0       	rjmp	.+366    	; 0x1c80 <main+0x2c0>
    1b12:	7e cf       	rjmp	.-260    	; 0x1a10 <main+0x50>
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	9c 81       	ldd	r25, Y+4	; 0x04
    1b18:	85 33       	cpi	r24, 0x35	; 53
    1b1a:	91 05       	cpc	r25, r1
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <main+0x160>
    1b1e:	c6 c0       	rjmp	.+396    	; 0x1cac <main+0x2ec>
    1b20:	2b 81       	ldd	r18, Y+3	; 0x03
    1b22:	3c 81       	ldd	r19, Y+4	; 0x04
    1b24:	25 33       	cpi	r18, 0x35	; 53
    1b26:	31 05       	cpc	r19, r1
    1b28:	0c f4       	brge	.+2      	; 0x1b2c <main+0x16c>
    1b2a:	b4 c0       	rjmp	.+360    	; 0x1c94 <main+0x2d4>
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b30:	86 33       	cpi	r24, 0x36	; 54
    1b32:	91 05       	cpc	r25, r1
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <main+0x178>
    1b36:	b3 c0       	rjmp	.+358    	; 0x1c9e <main+0x2de>
    1b38:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3c:	20 34       	cpi	r18, 0x40	; 64
    1b3e:	31 05       	cpc	r19, r1
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <main+0x184>
    1b42:	b9 c0       	rjmp	.+370    	; 0x1cb6 <main+0x2f6>
    1b44:	65 cf       	rjmp	.-310    	; 0x1a10 <main+0x50>
		{
			/*********************************   STATUS COMMANDS ********************************/
			//commands related to send the current status back to the master
			case ROOM1_STATUS:
			if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==0)//if the led is turned off
    1b46:	84 e4       	ldi	r24, 0x44	; 68
    1b48:	64 e0       	ldi	r22, 0x04	; 4
    1b4a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LED_u8ReadStatus>
    1b4e:	88 23       	and	r24, r24
    1b50:	11 f4       	brne	.+4      	; 0x1b56 <main+0x196>
			{
				response = OFF_STATUS;//set the response as off status
    1b52:	19 82       	std	Y+1, r1	; 0x01
    1b54:	08 c0       	rjmp	.+16     	; 0x1b66 <main+0x1a6>
			}
			else if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==1)//if the led is turned on
    1b56:	84 e4       	ldi	r24, 0x44	; 68
    1b58:	64 e0       	ldi	r22, 0x04	; 4
    1b5a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LED_u8ReadStatus>
    1b5e:	81 30       	cpi	r24, 0x01	; 1
    1b60:	11 f4       	brne	.+4      	; 0x1b66 <main+0x1a6>
			{
				response = ON_STATUS;//set the response as on status
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	0e 94 c4 0c 	call	0x1988	; 0x1988 <SPI_ui8TransmitRecive>
    1b6c:	51 cf       	rjmp	.-350    	; 0x1a10 <main+0x50>
			break;//break the switch case
			case ROOM2_STATUS:
			if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==0)//if the led is turned off
    1b6e:	84 e4       	ldi	r24, 0x44	; 68
    1b70:	65 e0       	ldi	r22, 0x05	; 5
    1b72:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LED_u8ReadStatus>
    1b76:	88 23       	and	r24, r24
    1b78:	11 f4       	brne	.+4      	; 0x1b7e <main+0x1be>
			{
				response = OFF_STATUS;//set the response as off status
    1b7a:	19 82       	std	Y+1, r1	; 0x01
    1b7c:	08 c0       	rjmp	.+16     	; 0x1b8e <main+0x1ce>
			}
			else if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==1)//if the led is turned on
    1b7e:	84 e4       	ldi	r24, 0x44	; 68
    1b80:	65 e0       	ldi	r22, 0x05	; 5
    1b82:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LED_u8ReadStatus>
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	11 f4       	brne	.+4      	; 0x1b8e <main+0x1ce>
			{
				response = ON_STATUS;//set the response as on status
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	0e 94 c4 0c 	call	0x1988	; 0x1988 <SPI_ui8TransmitRecive>
    1b94:	3d cf       	rjmp	.-390    	; 0x1a10 <main+0x50>
			break;//break the switch case
			case ROOM3_STATUS:
			if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==0)//if the led is turned off
    1b96:	84 e4       	ldi	r24, 0x44	; 68
    1b98:	66 e0       	ldi	r22, 0x06	; 6
    1b9a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LED_u8ReadStatus>
    1b9e:	88 23       	and	r24, r24
    1ba0:	11 f4       	brne	.+4      	; 0x1ba6 <main+0x1e6>
			{
				response = OFF_STATUS;//set the response as off status
    1ba2:	19 82       	std	Y+1, r1	; 0x01
    1ba4:	08 c0       	rjmp	.+16     	; 0x1bb6 <main+0x1f6>
			}
			else if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==1)//if the led is turned on
    1ba6:	84 e4       	ldi	r24, 0x44	; 68
    1ba8:	66 e0       	ldi	r22, 0x06	; 6
    1baa:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LED_u8ReadStatus>
    1bae:	81 30       	cpi	r24, 0x01	; 1
    1bb0:	11 f4       	brne	.+4      	; 0x1bb6 <main+0x1f6>
			{
				response = ON_STATUS;//set the response as on status
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	0e 94 c4 0c 	call	0x1988	; 0x1988 <SPI_ui8TransmitRecive>
    1bbc:	29 cf       	rjmp	.-430    	; 0x1a10 <main+0x50>
			break;//break the switch case
			case ROOM4_STATUS:
			if (LED_u8ReadStatus(ROOM4_PORT,ROOM4_PIN)==0)//if the led is turned off
    1bbe:	84 e4       	ldi	r24, 0x44	; 68
    1bc0:	67 e0       	ldi	r22, 0x07	; 7
    1bc2:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LED_u8ReadStatus>
    1bc6:	88 23       	and	r24, r24
    1bc8:	11 f4       	brne	.+4      	; 0x1bce <main+0x20e>
			{
				response = OFF_STATUS;//set the response as off status
    1bca:	19 82       	std	Y+1, r1	; 0x01
    1bcc:	08 c0       	rjmp	.+16     	; 0x1bde <main+0x21e>
			}
			else if (LED_u8ReadStatus(ROOM4_PORT,ROOM4_PIN)==1)//if the led is turned on
    1bce:	84 e4       	ldi	r24, 0x44	; 68
    1bd0:	67 e0       	ldi	r22, 0x07	; 7
    1bd2:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LED_u8ReadStatus>
    1bd6:	81 30       	cpi	r24, 0x01	; 1
    1bd8:	11 f4       	brne	.+4      	; 0x1bde <main+0x21e>
			{
				response = ON_STATUS;//set the response as on status
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	0e 94 c4 0c 	call	0x1988	; 0x1988 <SPI_ui8TransmitRecive>
    1be4:	15 cf       	rjmp	.-470    	; 0x1a10 <main+0x50>
			break;//break the switch case
			case AIR_COND_STATUS:
			if (LED_u8ReadStatus(AIR_COND_PORT,AIR_COND_PIN)==0)//if the led is turned off
    1be6:	84 e4       	ldi	r24, 0x44	; 68
    1be8:	62 e0       	ldi	r22, 0x02	; 2
    1bea:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LED_u8ReadStatus>
    1bee:	88 23       	and	r24, r24
    1bf0:	11 f4       	brne	.+4      	; 0x1bf6 <main+0x236>
			{
				response = OFF_STATUS;//set the response as off status
    1bf2:	19 82       	std	Y+1, r1	; 0x01
    1bf4:	08 c0       	rjmp	.+16     	; 0x1c06 <main+0x246>
			}
			else if (LED_u8ReadStatus(AIR_COND_PORT,AIR_COND_PIN)==1)//if the led is turned on
    1bf6:	84 e4       	ldi	r24, 0x44	; 68
    1bf8:	62 e0       	ldi	r22, 0x02	; 2
    1bfa:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LED_u8ReadStatus>
    1bfe:	81 30       	cpi	r24, 0x01	; 1
    1c00:	11 f4       	brne	.+4      	; 0x1c06 <main+0x246>
			{
				response = ON_STATUS;//set the response as on status
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	0e 94 c4 0c 	call	0x1988	; 0x1988 <SPI_ui8TransmitRecive>
    1c0c:	01 cf       	rjmp	.-510    	; 0x1a10 <main+0x50>
			break;
			case TV_STATUS:
			if (LED_u8ReadStatus(TV_PORT,TV_PIN)==0)//if the led is turned off
    1c0e:	84 e4       	ldi	r24, 0x44	; 68
    1c10:	63 e0       	ldi	r22, 0x03	; 3
    1c12:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LED_u8ReadStatus>
    1c16:	88 23       	and	r24, r24
    1c18:	11 f4       	brne	.+4      	; 0x1c1e <main+0x25e>
			{
				response = OFF_STATUS;//set the response as off status
    1c1a:	19 82       	std	Y+1, r1	; 0x01
    1c1c:	08 c0       	rjmp	.+16     	; 0x1c2e <main+0x26e>
			}
			else if (LED_u8ReadStatus(TV_PORT,TV_PIN)==1)//if the led is turned on
    1c1e:	84 e4       	ldi	r24, 0x44	; 68
    1c20:	63 e0       	ldi	r22, 0x03	; 3
    1c22:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LED_u8ReadStatus>
    1c26:	81 30       	cpi	r24, 0x01	; 1
    1c28:	11 f4       	brne	.+4      	; 0x1c2e <main+0x26e>
			{
				response = ON_STATUS;//set the response as on status
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	0e 94 c4 0c 	call	0x1988	; 0x1988 <SPI_ui8TransmitRecive>
    1c34:	ed ce       	rjmp	.-550    	; 0x1a10 <main+0x50>
			break;//break the switch case
			
			/*********************************   TURN ON COMMANDS ********************************/
			case ROOM1_TURN_ON:
			LED_vTurnOn(ROOM1_PORT,ROOM1_PIN);//turn on the led of room 1
    1c36:	84 e4       	ldi	r24, 0x44	; 68
    1c38:	64 e0       	ldi	r22, 0x04	; 4
    1c3a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LED_vTurnOn>
    1c3e:	e8 ce       	rjmp	.-560    	; 0x1a10 <main+0x50>
			break;//break the switch case
			case ROOM2_TURN_ON:
			LED_vTurnOn(ROOM1_PORT,ROOM2_PIN);//turn on the led of room 2
    1c40:	84 e4       	ldi	r24, 0x44	; 68
    1c42:	65 e0       	ldi	r22, 0x05	; 5
    1c44:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LED_vTurnOn>
    1c48:	e3 ce       	rjmp	.-570    	; 0x1a10 <main+0x50>
			break;//break the switch case
			case ROOM3_TURN_ON:
			LED_vTurnOn(ROOM3_PORT,ROOM3_PIN);//turn on the led of room 3
    1c4a:	84 e4       	ldi	r24, 0x44	; 68
    1c4c:	66 e0       	ldi	r22, 0x06	; 6
    1c4e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LED_vTurnOn>
    1c52:	de ce       	rjmp	.-580    	; 0x1a10 <main+0x50>
			break;//break the switch case
			case ROOM4_TURN_ON:
			LED_vTurnOn(ROOM4_PORT,ROOM4_PIN);//turn on the led of room 4
    1c54:	84 e4       	ldi	r24, 0x44	; 68
    1c56:	67 e0       	ldi	r22, 0x07	; 7
    1c58:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LED_vTurnOn>
    1c5c:	d9 ce       	rjmp	.-590    	; 0x1a10 <main+0x50>
			break;//break the switch case
			case AIR_COND_TURN_ON:
			timer0_initializeCTC();
    1c5e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <timer0_initializeCTC>
			LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);//turn on the led of air conditioning
    1c62:	84 e4       	ldi	r24, 0x44	; 68
    1c64:	62 e0       	ldi	r22, 0x02	; 2
    1c66:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LED_vTurnOn>
    1c6a:	d2 ce       	rjmp	.-604    	; 0x1a10 <main+0x50>
			break;//break the switch case
			case TV_TURN_ON:
			LED_vTurnOn(TV_PORT,TV_PIN);//turn on the led of the TV
    1c6c:	84 e4       	ldi	r24, 0x44	; 68
    1c6e:	63 e0       	ldi	r22, 0x03	; 3
    1c70:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LED_vTurnOn>
    1c74:	cd ce       	rjmp	.-614    	; 0x1a10 <main+0x50>
			break;//break the switch case
			
			/*********************************   TURN OFF COMMANDS ********************************/
			case ROOM1_TURN_OFF:
			LED_vTurnOff(ROOM1_PORT,ROOM1_PIN);//turn off the led of room 1
    1c76:	84 e4       	ldi	r24, 0x44	; 68
    1c78:	64 e0       	ldi	r22, 0x04	; 4
    1c7a:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <LED_vTurnOff>
    1c7e:	c8 ce       	rjmp	.-624    	; 0x1a10 <main+0x50>
			break;//break the switch case
			case ROOM2_TURN_OFF:
			LED_vTurnOff(ROOM2_PORT,ROOM2_PIN);//turn off the led of room 2
    1c80:	84 e4       	ldi	r24, 0x44	; 68
    1c82:	65 e0       	ldi	r22, 0x05	; 5
    1c84:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <LED_vTurnOff>
    1c88:	c3 ce       	rjmp	.-634    	; 0x1a10 <main+0x50>
			break;//break the switch case
			case ROOM3_TURN_OFF:
			LED_vTurnOff(ROOM3_PORT,ROOM3_PIN);//turn off the led of room 3
    1c8a:	84 e4       	ldi	r24, 0x44	; 68
    1c8c:	66 e0       	ldi	r22, 0x06	; 6
    1c8e:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <LED_vTurnOff>
    1c92:	be ce       	rjmp	.-644    	; 0x1a10 <main+0x50>
			break;//break the switch case
			case ROOM4_TURN_OFF:
			LED_vTurnOff(ROOM4_PORT,ROOM4_PIN);//turn off the led of room 4
    1c94:	84 e4       	ldi	r24, 0x44	; 68
    1c96:	67 e0       	ldi	r22, 0x07	; 7
    1c98:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <LED_vTurnOff>
    1c9c:	b9 ce       	rjmp	.-654    	; 0x1a10 <main+0x50>
			break;//break the switch case
			case AIR_COND_TURN_OFF:
			timer0_stop();
    1c9e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <timer0_stop>
			LED_vTurnOff(AIR_COND_PORT,AIR_COND_PIN);//turn off the led of air conditioning
    1ca2:	84 e4       	ldi	r24, 0x44	; 68
    1ca4:	62 e0       	ldi	r22, 0x02	; 2
    1ca6:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <LED_vTurnOff>
    1caa:	b2 ce       	rjmp	.-668    	; 0x1a10 <main+0x50>
			break;//break the switch case
			case TV_TURN_OFF:
			LED_vTurnOff(TV_PORT,TV_PIN);//turn off the led of the TV
    1cac:	84 e4       	ldi	r24, 0x44	; 68
    1cae:	63 e0       	ldi	r22, 0x03	; 3
    1cb0:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <LED_vTurnOff>
    1cb4:	ad ce       	rjmp	.-678    	; 0x1a10 <main+0x50>
			break;//break the switch case
			
			/*********************************   Set temperature   ********************************/
			case SET_TEMPERATURE:
			required_temperature = SPI_ui8TransmitRecive(DEFAULT_ACK);//get the temperature from the master and store the temperature in required temperature 
    1cb6:	8f ef       	ldi	r24, 0xFF	; 255
    1cb8:	0e 94 c4 0c 	call	0x1988	; 0x1988 <SPI_ui8TransmitRecive>
    1cbc:	88 2f       	mov	r24, r24
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	90 93 69 01 	sts	0x0169, r25
    1cc4:	80 93 68 01 	sts	0x0168, r24
    1cc8:	a3 ce       	rjmp	.-698    	; 0x1a10 <main+0x50>

00001cca <__vector_10>:
		}
	}
}

ISR(TIMER0_COMP_vect)
{
    1cca:	1f 92       	push	r1
    1ccc:	0f 92       	push	r0
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	0f 92       	push	r0
    1cd2:	11 24       	eor	r1, r1
    1cd4:	2f 93       	push	r18
    1cd6:	3f 93       	push	r19
    1cd8:	4f 93       	push	r20
    1cda:	5f 93       	push	r21
    1cdc:	6f 93       	push	r22
    1cde:	7f 93       	push	r23
    1ce0:	8f 93       	push	r24
    1ce2:	9f 93       	push	r25
    1ce4:	af 93       	push	r26
    1ce6:	bf 93       	push	r27
    1ce8:	ef 93       	push	r30
    1cea:	ff 93       	push	r31
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
	counter++;//count the ticks of the timer zero
    1cf4:	80 91 6c 01 	lds	r24, 0x016C
    1cf8:	8f 5f       	subi	r24, 0xFF	; 255
    1cfa:	80 93 6c 01 	sts	0x016C, r24
	if(counter>=10)//do that code every 10 ticks 
    1cfe:	80 91 6c 01 	lds	r24, 0x016C
    1d02:	8a 30       	cpi	r24, 0x0A	; 10
    1d04:	08 f4       	brcc	.+2      	; 0x1d08 <__vector_10+0x3e>
    1d06:	68 c0       	rjmp	.+208    	; 0x1dd8 <__vector_10+0x10e>
	{
		counter=0;//clear the counter of ticks
    1d08:	10 92 6c 01 	sts	0x016C, r1
		temp_sensor_reading=(0.25*ADC_u16Read());//read the temperature from the temperature sensor connected to the ADC of the micro controller
    1d0c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <ADC_u16Read>
    1d10:	cc 01       	movw	r24, r24
    1d12:	a0 e0       	ldi	r26, 0x00	; 0
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	bc 01       	movw	r22, r24
    1d24:	cd 01       	movw	r24, r26
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e8       	ldi	r20, 0x80	; 128
    1d2c:	5e e3       	ldi	r21, 0x3E	; 62
    1d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	bc 01       	movw	r22, r24
    1d38:	cd 01       	movw	r24, r26
    1d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	90 93 6b 01 	sts	0x016B, r25
    1d46:	80 93 6a 01 	sts	0x016A, r24
		if (temp_sensor_reading>=(required_temperature+1))//do that code if the read temperature if greater than required temperature by one or more
    1d4a:	80 91 68 01 	lds	r24, 0x0168
    1d4e:	90 91 69 01 	lds	r25, 0x0169
    1d52:	9c 01       	movw	r18, r24
    1d54:	2f 5f       	subi	r18, 0xFF	; 255
    1d56:	3f 4f       	sbci	r19, 0xFF	; 255
    1d58:	80 91 6a 01 	lds	r24, 0x016A
    1d5c:	90 91 6b 01 	lds	r25, 0x016B
    1d60:	82 17       	cp	r24, r18
    1d62:	93 07       	cpc	r25, r19
    1d64:	40 f0       	brcs	.+16     	; 0x1d76 <__vector_10+0xac>
		{
			LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);//turn on the led of the air conditioning
    1d66:	84 e4       	ldi	r24, 0x44	; 68
    1d68:	62 e0       	ldi	r22, 0x02	; 2
    1d6a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LED_vTurnOn>
			last_air_conditioning_value=AIR_CONDTIONING_ON;//save the value of the state of the air conditioning
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	80 93 6d 01 	sts	0x016D, r24
    1d74:	31 c0       	rjmp	.+98     	; 0x1dd8 <__vector_10+0x10e>
		}
		else if (temp_sensor_reading<=(required_temperature-1))//do that code if the read temperature if lesser than required temperature by one or more
    1d76:	80 91 68 01 	lds	r24, 0x0168
    1d7a:	90 91 69 01 	lds	r25, 0x0169
    1d7e:	9c 01       	movw	r18, r24
    1d80:	21 50       	subi	r18, 0x01	; 1
    1d82:	30 40       	sbci	r19, 0x00	; 0
    1d84:	80 91 6a 01 	lds	r24, 0x016A
    1d88:	90 91 6b 01 	lds	r25, 0x016B
    1d8c:	28 17       	cp	r18, r24
    1d8e:	39 07       	cpc	r19, r25
    1d90:	38 f0       	brcs	.+14     	; 0x1da0 <__vector_10+0xd6>
		{
			LED_vTurnOff(AIR_COND_PORT,AIR_COND_PIN);//turn off the led of the air conditioning
    1d92:	84 e4       	ldi	r24, 0x44	; 68
    1d94:	62 e0       	ldi	r22, 0x02	; 2
    1d96:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <LED_vTurnOff>
			last_air_conditioning_value=AIR_CONDTIONING_OFF;//save the value of the state of the air conditioning
    1d9a:	10 92 6d 01 	sts	0x016D, r1
    1d9e:	1c c0       	rjmp	.+56     	; 0x1dd8 <__vector_10+0x10e>
		}
		else if (required_temperature==temp_sensor_reading)//do that code if the read temperature is equal to the required temperature
    1da0:	20 91 68 01 	lds	r18, 0x0168
    1da4:	30 91 69 01 	lds	r19, 0x0169
    1da8:	80 91 6a 01 	lds	r24, 0x016A
    1dac:	90 91 6b 01 	lds	r25, 0x016B
    1db0:	28 17       	cp	r18, r24
    1db2:	39 07       	cpc	r19, r25
    1db4:	89 f4       	brne	.+34     	; 0x1dd8 <__vector_10+0x10e>
		{
			if (last_air_conditioning_value==AIR_CONDTIONING_ON)//in the case of the last saved status of the air conditioning was on 
    1db6:	80 91 6d 01 	lds	r24, 0x016D
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	29 f4       	brne	.+10     	; 0x1dc8 <__vector_10+0xfe>
			{
				LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);//turn on the led of the air conditioning
    1dbe:	84 e4       	ldi	r24, 0x44	; 68
    1dc0:	62 e0       	ldi	r22, 0x02	; 2
    1dc2:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LED_vTurnOn>
    1dc6:	08 c0       	rjmp	.+16     	; 0x1dd8 <__vector_10+0x10e>
			}
			else if (last_air_conditioning_value==AIR_CONDTIONING_OFF)//in the case of the last saved status of the air conditioning was off 
    1dc8:	80 91 6d 01 	lds	r24, 0x016D
    1dcc:	88 23       	and	r24, r24
    1dce:	21 f4       	brne	.+8      	; 0x1dd8 <__vector_10+0x10e>
			{
				LED_vTurnOff(AIR_COND_PORT,AIR_COND_PIN);//turn off the led of the air conditioning
    1dd0:	84 e4       	ldi	r24, 0x44	; 68
    1dd2:	62 e0       	ldi	r22, 0x02	; 2
    1dd4:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <LED_vTurnOff>
			}
		}
	}
}
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	ff 91       	pop	r31
    1dde:	ef 91       	pop	r30
    1de0:	bf 91       	pop	r27
    1de2:	af 91       	pop	r26
    1de4:	9f 91       	pop	r25
    1de6:	8f 91       	pop	r24
    1de8:	7f 91       	pop	r23
    1dea:	6f 91       	pop	r22
    1dec:	5f 91       	pop	r21
    1dee:	4f 91       	pop	r20
    1df0:	3f 91       	pop	r19
    1df2:	2f 91       	pop	r18
    1df4:	0f 90       	pop	r0
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	0f 90       	pop	r0
    1dfa:	1f 90       	pop	r1
    1dfc:	18 95       	reti

00001dfe <timer0_initializeCTC>:
 *  Author: Mohamed Zaghlol
 */
#include "timer_driver.h"

void timer0_initializeCTC(void)
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 78; //to achieve tick equal to 10 msec
    1e06:	ec e5       	ldi	r30, 0x5C	; 92
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	8e e4       	ldi	r24, 0x4E	; 78
    1e0c:	80 83       	st	Z, r24
	
	//Set timer mode
	//Set the mode as Compare match
	SET_BIT(TCCR0, WGM01);
    1e0e:	a3 e5       	ldi	r26, 0x53	; 83
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e3 e5       	ldi	r30, 0x53	; 83
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	88 60       	ori	r24, 0x08	; 8
    1e1a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM00);
    1e1c:	a3 e5       	ldi	r26, 0x53	; 83
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e3 e5       	ldi	r30, 0x53	; 83
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	8f 7b       	andi	r24, 0xBF	; 191
    1e28:	8c 93       	st	X, r24
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
    1e2a:	a3 e5       	ldi	r26, 0x53	; 83
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e3 e5       	ldi	r30, 0x53	; 83
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	81 60       	ori	r24, 0x01	; 1
    1e36:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    1e38:	a3 e5       	ldi	r26, 0x53	; 83
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e3 e5       	ldi	r30, 0x53	; 83
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	8d 7f       	andi	r24, 0xFD	; 253
    1e44:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS02);
    1e46:	a3 e5       	ldi	r26, 0x53	; 83
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e3 e5       	ldi	r30, 0x53	; 83
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	84 60       	ori	r24, 0x04	; 4
    1e52:	8c 93       	st	X, r24
	
	//Enable global interrupts
	sei();
    1e54:	78 94       	sei
	
	//Enable timer 0 interrupt for compare match
	SET_BIT(TIMSK, OCIE0);
    1e56:	a9 e5       	ldi	r26, 0x59	; 89
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e9 e5       	ldi	r30, 0x59	; 89
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	82 60       	ori	r24, 0x02	; 2
    1e62:	8c 93       	st	X, r24
}
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <timer0_stop>:

void timer0_stop(void)
{
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
	//disable the clock to stop the counter
	CLR_BIT(TCCR0, CS00);
    1e72:	a3 e5       	ldi	r26, 0x53	; 83
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e3 e5       	ldi	r30, 0x53	; 83
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	8e 7f       	andi	r24, 0xFE	; 254
    1e7e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    1e80:	a3 e5       	ldi	r26, 0x53	; 83
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e3 e5       	ldi	r30, 0x53	; 83
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	8d 7f       	andi	r24, 0xFD	; 253
    1e8c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    1e8e:	a3 e5       	ldi	r26, 0x53	; 83
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e3 e5       	ldi	r30, 0x53	; 83
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	8b 7f       	andi	r24, 0xFB	; 251
    1e9a:	8c 93       	st	X, r24
}
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <timer_initializefastpwm>:
void timer_initializefastpwm(void)
{
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 128;
    1eaa:	ec e5       	ldi	r30, 0x5C	; 92
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 e8       	ldi	r24, 0x80	; 128
    1eb0:	80 83       	st	Z, r24
	
	//Set timer mode
	//adjust fast pulse width modulation mode
	SET_BIT(TCCR0, WGM00); 
    1eb2:	a3 e5       	ldi	r26, 0x53	; 83
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e3 e5       	ldi	r30, 0x53	; 83
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	80 64       	ori	r24, 0x40	; 64
    1ebe:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    1ec0:	a3 e5       	ldi	r26, 0x53	; 83
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e3 e5       	ldi	r30, 0x53	; 83
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	88 60       	ori	r24, 0x08	; 8
    1ecc:	8c 93       	st	X, r24
	
	//Enable global interrupts
	sei();
    1ece:	78 94       	sei
	
	SET_BIT(TCCR0, COM01); //adjust non inverting mode
    1ed0:	a3 e5       	ldi	r26, 0x53	; 83
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e3 e5       	ldi	r30, 0x53	; 83
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	80 62       	ori	r24, 0x20	; 32
    1edc:	8c 93       	st	X, r24
	
	//Enable timer0 interrupt for overflow mode
	SET_BIT(TIMSK,TOIE0);
    1ede:	a9 e5       	ldi	r26, 0x59	; 89
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e9 e5       	ldi	r30, 0x59	; 89
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	81 60       	ori	r24, 0x01	; 1
    1eea:	8c 93       	st	X, r24
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
    1eec:	a3 e5       	ldi	r26, 0x53	; 83
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e3 e5       	ldi	r30, 0x53	; 83
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	81 60       	ori	r24, 0x01	; 1
    1ef8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    1efa:	a3 e5       	ldi	r26, 0x53	; 83
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	e3 e5       	ldi	r30, 0x53	; 83
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	8d 7f       	andi	r24, 0xFD	; 253
    1f06:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS02);
    1f08:	a3 e5       	ldi	r26, 0x53	; 83
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e3 e5       	ldi	r30, 0x53	; 83
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	84 60       	ori	r24, 0x04	; 4
    1f14:	8c 93       	st	X, r24
}
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <change_dutycycle>:
void change_dutycycle(float64 duty)
{
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	df 93       	push	r29
    1f22:	cf 93       	push	r28
    1f24:	00 d0       	rcall	.+0      	; 0x1f26 <change_dutycycle+0xa>
    1f26:	00 d0       	rcall	.+0      	; 0x1f28 <change_dutycycle+0xc>
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	69 83       	std	Y+1, r22	; 0x01
    1f2e:	7a 83       	std	Y+2, r23	; 0x02
    1f30:	8b 83       	std	Y+3, r24	; 0x03
    1f32:	9c 83       	std	Y+4, r25	; 0x04
	OCR0 = (duty / 100) * 256;//Set the OCR0 depending on the duty percentage
    1f34:	0c e5       	ldi	r16, 0x5C	; 92
    1f36:	10 e0       	ldi	r17, 0x00	; 0
    1f38:	69 81       	ldd	r22, Y+1	; 0x01
    1f3a:	7a 81       	ldd	r23, Y+2	; 0x02
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	48 ec       	ldi	r20, 0xC8	; 200
    1f46:	52 e4       	ldi	r21, 0x42	; 66
    1f48:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e8       	ldi	r20, 0x80	; 128
    1f5a:	53 e4       	ldi	r21, 0x43	; 67
    1f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	f8 01       	movw	r30, r16
    1f72:	80 83       	st	Z, r24
}
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	1f 91       	pop	r17
    1f82:	0f 91       	pop	r16
    1f84:	08 95       	ret

00001f86 <__prologue_saves__>:
    1f86:	2f 92       	push	r2
    1f88:	3f 92       	push	r3
    1f8a:	4f 92       	push	r4
    1f8c:	5f 92       	push	r5
    1f8e:	6f 92       	push	r6
    1f90:	7f 92       	push	r7
    1f92:	8f 92       	push	r8
    1f94:	9f 92       	push	r9
    1f96:	af 92       	push	r10
    1f98:	bf 92       	push	r11
    1f9a:	cf 92       	push	r12
    1f9c:	df 92       	push	r13
    1f9e:	ef 92       	push	r14
    1fa0:	ff 92       	push	r15
    1fa2:	0f 93       	push	r16
    1fa4:	1f 93       	push	r17
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	ca 1b       	sub	r28, r26
    1fb0:	db 0b       	sbc	r29, r27
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	09 94       	ijmp

00001fbe <__epilogue_restores__>:
    1fbe:	2a 88       	ldd	r2, Y+18	; 0x12
    1fc0:	39 88       	ldd	r3, Y+17	; 0x11
    1fc2:	48 88       	ldd	r4, Y+16	; 0x10
    1fc4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fc6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fc8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fca:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fcc:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fce:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fd0:	b9 84       	ldd	r11, Y+9	; 0x09
    1fd2:	c8 84       	ldd	r12, Y+8	; 0x08
    1fd4:	df 80       	ldd	r13, Y+7	; 0x07
    1fd6:	ee 80       	ldd	r14, Y+6	; 0x06
    1fd8:	fd 80       	ldd	r15, Y+5	; 0x05
    1fda:	0c 81       	ldd	r16, Y+4	; 0x04
    1fdc:	1b 81       	ldd	r17, Y+3	; 0x03
    1fde:	aa 81       	ldd	r26, Y+2	; 0x02
    1fe0:	b9 81       	ldd	r27, Y+1	; 0x01
    1fe2:	ce 0f       	add	r28, r30
    1fe4:	d1 1d       	adc	r29, r1
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
    1ff0:	ed 01       	movw	r28, r26
    1ff2:	08 95       	ret

00001ff4 <_exit>:
    1ff4:	f8 94       	cli

00001ff6 <__stop_program>:
    1ff6:	ff cf       	rjmp	.-2      	; 0x1ff6 <__stop_program>
