
MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005944  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000242  00800060  00005944  000059d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008002a2  008002a2  00005c1a  2**0
                  ALLOC
  3 .stab         00004b48  00000000  00000000  00005c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001137  00000000  00000000  0000a764  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000b89b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000b9fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000bb8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000dbcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000ecd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000fc54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000fdd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00010096  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010924  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b6 1e 	jmp	0x3d6c	; 0x3d6c <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	f9 e5       	ldi	r31, 0x59	; 89
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3b       	cpi	r26, 0xB3	; 179
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <main>
      8a:	0c 94 a0 2c 	jmp	0x5940	; 0x5940 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 69 2c 	jmp	0x58d2	; 0x58d2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 85 2c 	jmp	0x590a	; 0x590a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 75 2c 	jmp	0x58ea	; 0x58ea <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 91 2c 	jmp	0x5922	; 0x5922 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 75 2c 	jmp	0x58ea	; 0x58ea <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 91 2c 	jmp	0x5922	; 0x5922 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 69 2c 	jmp	0x58d2	; 0x58d2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 85 2c 	jmp	0x590a	; 0x590a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 71 2c 	jmp	0x58e2	; 0x58e2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e8       	ldi	r22, 0x82	; 130
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 8d 2c 	jmp	0x591a	; 0x591a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 75 2c 	jmp	0x58ea	; 0x58ea <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 91 2c 	jmp	0x5922	; 0x5922 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 75 2c 	jmp	0x58ea	; 0x58ea <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 91 2c 	jmp	0x5922	; 0x5922 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 75 2c 	jmp	0x58ea	; 0x58ea <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 91 2c 	jmp	0x5922	; 0x5922 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 79 2c 	jmp	0x58f2	; 0x58f2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 95 2c 	jmp	0x592a	; 0x592a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_vsetPINDir>:
/**************************************************/
#include <avr/io.h>
#include "std_macros.h"
#include "DIO.h"
void DIO_vsetPINDir(uint8 portname,uint8 pinnumber,uint8 direction)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_vsetPINDir+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <DIO_vsetPINDir+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	6a 83       	std	Y+2, r22	; 0x02
     cb0:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	3d 83       	std	Y+5, r19	; 0x05
     cba:	2c 83       	std	Y+4, r18	; 0x04
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	9d 81       	ldd	r25, Y+5	; 0x05
     cc0:	82 34       	cpi	r24, 0x42	; 66
     cc2:	91 05       	cpc	r25, r1
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <DIO_vsetPINDir+0x2a>
     cc6:	44 c0       	rjmp	.+136    	; 0xd50 <DIO_vsetPINDir+0xb2>
     cc8:	2c 81       	ldd	r18, Y+4	; 0x04
     cca:	3d 81       	ldd	r19, Y+5	; 0x05
     ccc:	23 34       	cpi	r18, 0x43	; 67
     cce:	31 05       	cpc	r19, r1
     cd0:	34 f4       	brge	.+12     	; 0xcde <DIO_vsetPINDir+0x40>
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	9d 81       	ldd	r25, Y+5	; 0x05
     cd6:	81 34       	cpi	r24, 0x41	; 65
     cd8:	91 05       	cpc	r25, r1
     cda:	71 f0       	breq	.+28     	; 0xcf8 <DIO_vsetPINDir+0x5a>
     cdc:	bc c0       	rjmp	.+376    	; 0xe56 <DIO_vsetPINDir+0x1b8>
     cde:	2c 81       	ldd	r18, Y+4	; 0x04
     ce0:	3d 81       	ldd	r19, Y+5	; 0x05
     ce2:	23 34       	cpi	r18, 0x43	; 67
     ce4:	31 05       	cpc	r19, r1
     ce6:	09 f4       	brne	.+2      	; 0xcea <DIO_vsetPINDir+0x4c>
     ce8:	5f c0       	rjmp	.+190    	; 0xda8 <DIO_vsetPINDir+0x10a>
     cea:	8c 81       	ldd	r24, Y+4	; 0x04
     cec:	9d 81       	ldd	r25, Y+5	; 0x05
     cee:	84 34       	cpi	r24, 0x44	; 68
     cf0:	91 05       	cpc	r25, r1
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <DIO_vsetPINDir+0x58>
     cf4:	85 c0       	rjmp	.+266    	; 0xe00 <DIO_vsetPINDir+0x162>
     cf6:	af c0       	rjmp	.+350    	; 0xe56 <DIO_vsetPINDir+0x1b8>
	{
		
		
		case 'A':
		if(direction==1)
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	a1 f4       	brne	.+40     	; 0xd26 <DIO_vsetPINDir+0x88>
		{
			SET_BIT(DDRA,pinnumber);
     cfe:	aa e3       	ldi	r26, 0x3A	; 58
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ea e3       	ldi	r30, 0x3A	; 58
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_vsetPINDir+0x7e>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <DIO_vsetPINDir+0x7a>
     d20:	84 2b       	or	r24, r20
     d22:	8c 93       	st	X, r24
     d24:	98 c0       	rjmp	.+304    	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);
     d26:	aa e3       	ldi	r26, 0x3A	; 58
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	ea e3       	ldi	r30, 0x3A	; 58
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 2e       	mov	r0, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <DIO_vsetPINDir+0xa6>
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	0a 94       	dec	r0
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <DIO_vsetPINDir+0xa2>
     d48:	80 95       	com	r24
     d4a:	84 23       	and	r24, r20
     d4c:	8c 93       	st	X, r24
     d4e:	83 c0       	rjmp	.+262    	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'B':
		if(direction==1)
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	a1 f4       	brne	.+40     	; 0xd7e <DIO_vsetPINDir+0xe0>
		{
			SET_BIT(DDRB,pinnumber);
     d56:	a7 e3       	ldi	r26, 0x37	; 55
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e7 e3       	ldi	r30, 0x37	; 55
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_vsetPINDir+0xd6>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_vsetPINDir+0xd2>
     d78:	84 2b       	or	r24, r20
     d7a:	8c 93       	st	X, r24
     d7c:	6c c0       	rjmp	.+216    	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);
     d7e:	a7 e3       	ldi	r26, 0x37	; 55
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e7 e3       	ldi	r30, 0x37	; 55
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 2e       	mov	r0, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <DIO_vsetPINDir+0xfe>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	0a 94       	dec	r0
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <DIO_vsetPINDir+0xfa>
     da0:	80 95       	com	r24
     da2:	84 23       	and	r24, r20
     da4:	8c 93       	st	X, r24
     da6:	57 c0       	rjmp	.+174    	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'C':
		if(direction==1)
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	a1 f4       	brne	.+40     	; 0xdd6 <DIO_vsetPINDir+0x138>
		{
			SET_BIT(DDRC,pinnumber);
     dae:	a4 e3       	ldi	r26, 0x34	; 52
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e4 e3       	ldi	r30, 0x34	; 52
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <DIO_vsetPINDir+0x12e>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <DIO_vsetPINDir+0x12a>
     dd0:	84 2b       	or	r24, r20
     dd2:	8c 93       	st	X, r24
     dd4:	40 c0       	rjmp	.+128    	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);
     dd6:	a4 e3       	ldi	r26, 0x34	; 52
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e4 e3       	ldi	r30, 0x34	; 52
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_vsetPINDir+0x156>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_vsetPINDir+0x152>
     df8:	80 95       	com	r24
     dfa:	84 23       	and	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	2b c0       	rjmp	.+86     	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'D':
		if(direction==1)
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	a1 f4       	brne	.+40     	; 0xe2e <DIO_vsetPINDir+0x190>
		{
			SET_BIT(DDRD,pinnumber);
     e06:	a1 e3       	ldi	r26, 0x31	; 49
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e1 e3       	ldi	r30, 0x31	; 49
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_vsetPINDir+0x186>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_vsetPINDir+0x182>
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	14 c0       	rjmp	.+40     	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);
     e2e:	a1 e3       	ldi	r26, 0x31	; 49
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e1 e3       	ldi	r30, 0x31	; 49
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DIO_vsetPINDir+0x1ae>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DIO_vsetPINDir+0x1aa>
     e50:	80 95       	com	r24
     e52:	84 23       	and	r24, r20
     e54:	8c 93       	st	X, r24
		}
		break;
		default: break;
	}
}
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <DIO_write>:


void DIO_write(uint8 portname,uint8 pinnumber,uint8 outputvalue)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <DIO_write+0x6>
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <DIO_write+0x8>
     e6e:	0f 92       	push	r0
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	6a 83       	std	Y+2, r22	; 0x02
     e78:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	3d 83       	std	Y+5, r19	; 0x05
     e82:	2c 83       	std	Y+4, r18	; 0x04
     e84:	8c 81       	ldd	r24, Y+4	; 0x04
     e86:	9d 81       	ldd	r25, Y+5	; 0x05
     e88:	82 34       	cpi	r24, 0x42	; 66
     e8a:	91 05       	cpc	r25, r1
     e8c:	09 f4       	brne	.+2      	; 0xe90 <DIO_write+0x2a>
     e8e:	44 c0       	rjmp	.+136    	; 0xf18 <DIO_write+0xb2>
     e90:	2c 81       	ldd	r18, Y+4	; 0x04
     e92:	3d 81       	ldd	r19, Y+5	; 0x05
     e94:	23 34       	cpi	r18, 0x43	; 67
     e96:	31 05       	cpc	r19, r1
     e98:	34 f4       	brge	.+12     	; 0xea6 <DIO_write+0x40>
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	9d 81       	ldd	r25, Y+5	; 0x05
     e9e:	81 34       	cpi	r24, 0x41	; 65
     ea0:	91 05       	cpc	r25, r1
     ea2:	71 f0       	breq	.+28     	; 0xec0 <DIO_write+0x5a>
     ea4:	bc c0       	rjmp	.+376    	; 0x101e <DIO_write+0x1b8>
     ea6:	2c 81       	ldd	r18, Y+4	; 0x04
     ea8:	3d 81       	ldd	r19, Y+5	; 0x05
     eaa:	23 34       	cpi	r18, 0x43	; 67
     eac:	31 05       	cpc	r19, r1
     eae:	09 f4       	brne	.+2      	; 0xeb2 <DIO_write+0x4c>
     eb0:	5f c0       	rjmp	.+190    	; 0xf70 <DIO_write+0x10a>
     eb2:	8c 81       	ldd	r24, Y+4	; 0x04
     eb4:	9d 81       	ldd	r25, Y+5	; 0x05
     eb6:	84 34       	cpi	r24, 0x44	; 68
     eb8:	91 05       	cpc	r25, r1
     eba:	09 f4       	brne	.+2      	; 0xebe <DIO_write+0x58>
     ebc:	85 c0       	rjmp	.+266    	; 0xfc8 <DIO_write+0x162>
     ebe:	af c0       	rjmp	.+350    	; 0x101e <DIO_write+0x1b8>
	{
		case 'A' :
		
		if(outputvalue==1)
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	a1 f4       	brne	.+40     	; 0xeee <DIO_write+0x88>
		{
			SET_BIT(PORTA,pinnumber);
     ec6:	ab e3       	ldi	r26, 0x3B	; 59
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	eb e3       	ldi	r30, 0x3B	; 59
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 2e       	mov	r0, r18
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <DIO_write+0x7e>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	0a 94       	dec	r0
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <DIO_write+0x7a>
     ee8:	84 2b       	or	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	98 c0       	rjmp	.+304    	; 0x101e <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
     eee:	ab e3       	ldi	r26, 0x3B	; 59
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	eb e3       	ldi	r30, 0x3B	; 59
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_write+0xa6>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_write+0xa2>
     f10:	80 95       	com	r24
     f12:	84 23       	and	r24, r20
     f14:	8c 93       	st	X, r24
     f16:	83 c0       	rjmp	.+262    	; 0x101e <DIO_write+0x1b8>
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	a1 f4       	brne	.+40     	; 0xf46 <DIO_write+0xe0>
		{
			SET_BIT(PORTB,pinnumber);
     f1e:	a8 e3       	ldi	r26, 0x38	; 56
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e8 e3       	ldi	r30, 0x38	; 56
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_write+0xd6>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_write+0xd2>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	6c c0       	rjmp	.+216    	; 0x101e <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
     f46:	a8 e3       	ldi	r26, 0x38	; 56
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e8 e3       	ldi	r30, 0x38	; 56
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_write+0xfe>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_write+0xfa>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	57 c0       	rjmp	.+174    	; 0x101e <DIO_write+0x1b8>
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	a1 f4       	brne	.+40     	; 0xf9e <DIO_write+0x138>
		{
			SET_BIT(PORTC,pinnumber);
     f76:	a5 e3       	ldi	r26, 0x35	; 53
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e5 e3       	ldi	r30, 0x35	; 53
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_write+0x12e>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <DIO_write+0x12a>
     f98:	84 2b       	or	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	40 c0       	rjmp	.+128    	; 0x101e <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
     f9e:	a5 e3       	ldi	r26, 0x35	; 53
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e5 e3       	ldi	r30, 0x35	; 53
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <DIO_write+0x156>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <DIO_write+0x152>
     fc0:	80 95       	com	r24
     fc2:	84 23       	and	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	2b c0       	rjmp	.+86     	; 0x101e <DIO_write+0x1b8>
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	a1 f4       	brne	.+40     	; 0xff6 <DIO_write+0x190>
		{
			SET_BIT(PORTD,pinnumber);
     fce:	a2 e3       	ldi	r26, 0x32	; 50
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e2 e3       	ldi	r30, 0x32	; 50
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_write+0x186>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_write+0x182>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	14 c0       	rjmp	.+40     	; 0x101e <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
     ff6:	a2 e3       	ldi	r26, 0x32	; 50
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e2 e3       	ldi	r30, 0x32	; 50
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_write+0x1ae>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_write+0x1aa>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <DIO_u8read>:


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	00 d0       	rcall	.+0      	; 0x1034 <DIO_u8read+0x6>
    1034:	00 d0       	rcall	.+0      	; 0x1036 <DIO_u8read+0x8>
    1036:	0f 92       	push	r0
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	8a 83       	std	Y+2, r24	; 0x02
    103e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 return_value=0;
    1040:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	3d 83       	std	Y+5, r19	; 0x05
    104a:	2c 83       	std	Y+4, r18	; 0x04
    104c:	4c 81       	ldd	r20, Y+4	; 0x04
    104e:	5d 81       	ldd	r21, Y+5	; 0x05
    1050:	42 34       	cpi	r20, 0x42	; 66
    1052:	51 05       	cpc	r21, r1
    1054:	b1 f1       	breq	.+108    	; 0x10c2 <DIO_u8read+0x94>
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	9d 81       	ldd	r25, Y+5	; 0x05
    105a:	83 34       	cpi	r24, 0x43	; 67
    105c:	91 05       	cpc	r25, r1
    105e:	34 f4       	brge	.+12     	; 0x106c <DIO_u8read+0x3e>
    1060:	2c 81       	ldd	r18, Y+4	; 0x04
    1062:	3d 81       	ldd	r19, Y+5	; 0x05
    1064:	21 34       	cpi	r18, 0x41	; 65
    1066:	31 05       	cpc	r19, r1
    1068:	71 f0       	breq	.+28     	; 0x1086 <DIO_u8read+0x58>
    106a:	84 c0       	rjmp	.+264    	; 0x1174 <DIO_u8read+0x146>
    106c:	4c 81       	ldd	r20, Y+4	; 0x04
    106e:	5d 81       	ldd	r21, Y+5	; 0x05
    1070:	43 34       	cpi	r20, 0x43	; 67
    1072:	51 05       	cpc	r21, r1
    1074:	09 f4       	brne	.+2      	; 0x1078 <DIO_u8read+0x4a>
    1076:	43 c0       	rjmp	.+134    	; 0x10fe <DIO_u8read+0xd0>
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	9d 81       	ldd	r25, Y+5	; 0x05
    107c:	84 34       	cpi	r24, 0x44	; 68
    107e:	91 05       	cpc	r25, r1
    1080:	09 f4       	brne	.+2      	; 0x1084 <DIO_u8read+0x56>
    1082:	5b c0       	rjmp	.+182    	; 0x113a <DIO_u8read+0x10c>
    1084:	77 c0       	rjmp	.+238    	; 0x1174 <DIO_u8read+0x146>
	{
		case 'A' :
		return_value=Read_bIT(PINA,pinnumber);
    1086:	e9 e3       	ldi	r30, 0x39	; 57
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_u8read+0x72>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	2a 95       	dec	r18
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_u8read+0x6e>
    10a4:	9a 01       	movw	r18, r20
    10a6:	28 23       	and	r18, r24
    10a8:	39 23       	and	r19, r25
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	a9 01       	movw	r20, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_u8read+0x8a>
    10b4:	55 95       	asr	r21
    10b6:	47 95       	ror	r20
    10b8:	8a 95       	dec	r24
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_u8read+0x86>
    10bc:	ca 01       	movw	r24, r20
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	59 c0       	rjmp	.+178    	; 0x1174 <DIO_u8read+0x146>
		break;
		
		case 'B' :
		return_value=Read_bIT(PINB,pinnumber);
    10c2:	e6 e3       	ldi	r30, 0x36	; 54
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <DIO_u8read+0xae>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	2a 95       	dec	r18
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <DIO_u8read+0xaa>
    10e0:	9a 01       	movw	r18, r20
    10e2:	28 23       	and	r18, r24
    10e4:	39 23       	and	r19, r25
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a9 01       	movw	r20, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_u8read+0xc6>
    10f0:	55 95       	asr	r21
    10f2:	47 95       	ror	r20
    10f4:	8a 95       	dec	r24
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_u8read+0xc2>
    10f8:	ca 01       	movw	r24, r20
    10fa:	89 83       	std	Y+1, r24	; 0x01
    10fc:	3b c0       	rjmp	.+118    	; 0x1174 <DIO_u8read+0x146>
		break;
		
		case 'C' :
		return_value=Read_bIT(PINC,pinnumber);
    10fe:	e3 e3       	ldi	r30, 0x33	; 51
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	48 2f       	mov	r20, r24
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <DIO_u8read+0xea>
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	2a 95       	dec	r18
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <DIO_u8read+0xe6>
    111c:	9a 01       	movw	r18, r20
    111e:	28 23       	and	r18, r24
    1120:	39 23       	and	r19, r25
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_u8read+0x102>
    112c:	55 95       	asr	r21
    112e:	47 95       	ror	r20
    1130:	8a 95       	dec	r24
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_u8read+0xfe>
    1134:	ca 01       	movw	r24, r20
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	1d c0       	rjmp	.+58     	; 0x1174 <DIO_u8read+0x146>
		break;
		
		case 'D' :
		return_value=Read_bIT(PIND,pinnumber);
    113a:	e0 e3       	ldi	r30, 0x30	; 48
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_u8read+0x126>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	2a 95       	dec	r18
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_u8read+0x122>
    1158:	9a 01       	movw	r18, r20
    115a:	28 23       	and	r18, r24
    115c:	39 23       	and	r19, r25
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	a9 01       	movw	r20, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <DIO_u8read+0x13e>
    1168:	55 95       	asr	r21
    116a:	47 95       	ror	r20
    116c:	8a 95       	dec	r24
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <DIO_u8read+0x13a>
    1170:	ca 01       	movw	r24, r20
    1172:	89 83       	std	Y+1, r24	; 0x01
		break;
		default: break;
	}
	return return_value ;
    1174:	89 81       	ldd	r24, Y+1	; 0x01
}
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <DIO_toggle>:
void DIO_toggle(uint8 portname,uint8 pinnumber)
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <DIO_toggle+0x6>
    118c:	00 d0       	rcall	.+0      	; 0x118e <DIO_toggle+0x8>
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	3c 83       	std	Y+4, r19	; 0x04
    119e:	2b 83       	std	Y+3, r18	; 0x03
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	82 34       	cpi	r24, 0x42	; 66
    11a6:	91 05       	cpc	r25, r1
    11a8:	51 f1       	breq	.+84     	; 0x11fe <DIO_toggle+0x78>
    11aa:	2b 81       	ldd	r18, Y+3	; 0x03
    11ac:	3c 81       	ldd	r19, Y+4	; 0x04
    11ae:	23 34       	cpi	r18, 0x43	; 67
    11b0:	31 05       	cpc	r19, r1
    11b2:	34 f4       	brge	.+12     	; 0x11c0 <DIO_toggle+0x3a>
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	81 34       	cpi	r24, 0x41	; 65
    11ba:	91 05       	cpc	r25, r1
    11bc:	61 f0       	breq	.+24     	; 0x11d6 <DIO_toggle+0x50>
    11be:	5a c0       	rjmp	.+180    	; 0x1274 <DIO_toggle+0xee>
    11c0:	2b 81       	ldd	r18, Y+3	; 0x03
    11c2:	3c 81       	ldd	r19, Y+4	; 0x04
    11c4:	23 34       	cpi	r18, 0x43	; 67
    11c6:	31 05       	cpc	r19, r1
    11c8:	71 f1       	breq	.+92     	; 0x1226 <DIO_toggle+0xa0>
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	9c 81       	ldd	r25, Y+4	; 0x04
    11ce:	84 34       	cpi	r24, 0x44	; 68
    11d0:	91 05       	cpc	r25, r1
    11d2:	e9 f1       	breq	.+122    	; 0x124e <DIO_toggle+0xc8>
    11d4:	4f c0       	rjmp	.+158    	; 0x1274 <DIO_toggle+0xee>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);
    11d6:	ab e3       	ldi	r26, 0x3B	; 59
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	eb e3       	ldi	r30, 0x3B	; 59
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_toggle+0x6e>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_toggle+0x6a>
    11f8:	84 27       	eor	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	3b c0       	rjmp	.+118    	; 0x1274 <DIO_toggle+0xee>
		break;
		case 'B':
		TOG_BIT(PORTB,pinnumber);
    11fe:	a8 e3       	ldi	r26, 0x38	; 56
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e8 e3       	ldi	r30, 0x38	; 56
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_toggle+0x96>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_toggle+0x92>
    1220:	84 27       	eor	r24, r20
    1222:	8c 93       	st	X, r24
    1224:	27 c0       	rjmp	.+78     	; 0x1274 <DIO_toggle+0xee>
		break;
		case 'C':
		TOG_BIT(PORTC,pinnumber);
    1226:	a5 e3       	ldi	r26, 0x35	; 53
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e5 e3       	ldi	r30, 0x35	; 53
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO_toggle+0xbe>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO_toggle+0xba>
    1248:	84 27       	eor	r24, r20
    124a:	8c 93       	st	X, r24
    124c:	13 c0       	rjmp	.+38     	; 0x1274 <DIO_toggle+0xee>
		break;
		case 'D':
		TOG_BIT(PORTD,pinnumber);
    124e:	a2 e3       	ldi	r26, 0x32	; 50
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e2 e3       	ldi	r30, 0x32	; 50
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <DIO_toggle+0xe6>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <DIO_toggle+0xe2>
    1270:	84 27       	eor	r24, r20
    1272:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <DIO_write_port>:
void DIO_write_port(uint8 portname,uint8 portvalue)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	00 d0       	rcall	.+0      	; 0x1288 <DIO_write_port+0x6>
    1288:	00 d0       	rcall	.+0      	; 0x128a <DIO_write_port+0x8>
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	3c 83       	std	Y+4, r19	; 0x04
    129a:	2b 83       	std	Y+3, r18	; 0x03
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	82 34       	cpi	r24, 0x42	; 66
    12a2:	91 05       	cpc	r25, r1
    12a4:	d9 f0       	breq	.+54     	; 0x12dc <DIO_write_port+0x5a>
    12a6:	2b 81       	ldd	r18, Y+3	; 0x03
    12a8:	3c 81       	ldd	r19, Y+4	; 0x04
    12aa:	23 34       	cpi	r18, 0x43	; 67
    12ac:	31 05       	cpc	r19, r1
    12ae:	34 f4       	brge	.+12     	; 0x12bc <DIO_write_port+0x3a>
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	81 34       	cpi	r24, 0x41	; 65
    12b6:	91 05       	cpc	r25, r1
    12b8:	61 f0       	breq	.+24     	; 0x12d2 <DIO_write_port+0x50>
    12ba:	1e c0       	rjmp	.+60     	; 0x12f8 <DIO_write_port+0x76>
    12bc:	2b 81       	ldd	r18, Y+3	; 0x03
    12be:	3c 81       	ldd	r19, Y+4	; 0x04
    12c0:	23 34       	cpi	r18, 0x43	; 67
    12c2:	31 05       	cpc	r19, r1
    12c4:	81 f0       	breq	.+32     	; 0x12e6 <DIO_write_port+0x64>
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	84 34       	cpi	r24, 0x44	; 68
    12cc:	91 05       	cpc	r25, r1
    12ce:	81 f0       	breq	.+32     	; 0x12f0 <DIO_write_port+0x6e>
    12d0:	13 c0       	rjmp	.+38     	; 0x12f8 <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue;
    12d2:	eb e3       	ldi	r30, 0x3B	; 59
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	80 83       	st	Z, r24
    12da:	0e c0       	rjmp	.+28     	; 0x12f8 <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue;
    12dc:	e8 e3       	ldi	r30, 0x38	; 56
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	80 83       	st	Z, r24
    12e4:	09 c0       	rjmp	.+18     	; 0x12f8 <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue;
    12e6:	e5 e3       	ldi	r30, 0x35	; 53
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	80 83       	st	Z, r24
    12ee:	04 c0       	rjmp	.+8      	; 0x12f8 <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue;
    12f0:	e2 e3       	ldi	r30, 0x32	; 50
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	80 83       	st	Z, r24
		break ;
		default: break ;
	}
}
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <dio_write_highnibble>:
void dio_write_highnibble(uint8 portname,uint8 value)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	00 d0       	rcall	.+0      	; 0x130c <dio_write_highnibble+0x6>
    130c:	00 d0       	rcall	.+0      	; 0x130e <dio_write_highnibble+0x8>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	3c 83       	std	Y+4, r19	; 0x04
    131e:	2b 83       	std	Y+3, r18	; 0x03
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	82 34       	cpi	r24, 0x42	; 66
    1326:	91 05       	cpc	r25, r1
    1328:	09 f1       	breq	.+66     	; 0x136c <dio_write_highnibble+0x66>
    132a:	2b 81       	ldd	r18, Y+3	; 0x03
    132c:	3c 81       	ldd	r19, Y+4	; 0x04
    132e:	23 34       	cpi	r18, 0x43	; 67
    1330:	31 05       	cpc	r19, r1
    1332:	34 f4       	brge	.+12     	; 0x1340 <dio_write_highnibble+0x3a>
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	81 34       	cpi	r24, 0x41	; 65
    133a:	91 05       	cpc	r25, r1
    133c:	61 f0       	breq	.+24     	; 0x1356 <dio_write_highnibble+0x50>
    133e:	36 c0       	rjmp	.+108    	; 0x13ac <dio_write_highnibble+0xa6>
    1340:	2b 81       	ldd	r18, Y+3	; 0x03
    1342:	3c 81       	ldd	r19, Y+4	; 0x04
    1344:	23 34       	cpi	r18, 0x43	; 67
    1346:	31 05       	cpc	r19, r1
    1348:	e1 f0       	breq	.+56     	; 0x1382 <dio_write_highnibble+0x7c>
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	84 34       	cpi	r24, 0x44	; 68
    1350:	91 05       	cpc	r25, r1
    1352:	11 f1       	breq	.+68     	; 0x1398 <dio_write_highnibble+0x92>
    1354:	2b c0       	rjmp	.+86     	; 0x13ac <dio_write_highnibble+0xa6>
	{
		case 'A' :
		PORTA|=(value&0xf0);
    1356:	ab e3       	ldi	r26, 0x3B	; 59
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	eb e3       	ldi	r30, 0x3B	; 59
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	98 2f       	mov	r25, r24
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	80 7f       	andi	r24, 0xF0	; 240
    1366:	89 2b       	or	r24, r25
    1368:	8c 93       	st	X, r24
    136a:	20 c0       	rjmp	.+64     	; 0x13ac <dio_write_highnibble+0xa6>
		break ;
		case 'B':
		PORTB|=(value&0xf0);
    136c:	a8 e3       	ldi	r26, 0x38	; 56
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e8 e3       	ldi	r30, 0x38	; 56
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	98 2f       	mov	r25, r24
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	80 7f       	andi	r24, 0xF0	; 240
    137c:	89 2b       	or	r24, r25
    137e:	8c 93       	st	X, r24
    1380:	15 c0       	rjmp	.+42     	; 0x13ac <dio_write_highnibble+0xa6>
		break ;
		case 'C' :
		PORTC|=(value&0xf0);
    1382:	a5 e3       	ldi	r26, 0x35	; 53
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e5 e3       	ldi	r30, 0x35	; 53
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	98 2f       	mov	r25, r24
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	80 7f       	andi	r24, 0xF0	; 240
    1392:	89 2b       	or	r24, r25
    1394:	8c 93       	st	X, r24
    1396:	0a c0       	rjmp	.+20     	; 0x13ac <dio_write_highnibble+0xa6>
		break ;
		case 'D':
		PORTD|=(value&0xf0);
    1398:	a2 e3       	ldi	r26, 0x32	; 50
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e2 e3       	ldi	r30, 0x32	; 50
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	98 2f       	mov	r25, r24
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	80 7f       	andi	r24, 0xF0	; 240
    13a8:	89 2b       	or	r24, r25
    13aa:	8c 93       	st	X, r24
		break ;
		default: break ;
		
	}
}
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <clear_high_nibble>:

void clear_high_nibble(uint8 portname)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <clear_high_nibble+0x6>
    13c0:	0f 92       	push	r0
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	3b 83       	std	Y+3, r19	; 0x03
    13d0:	2a 83       	std	Y+2, r18	; 0x02
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	9b 81       	ldd	r25, Y+3	; 0x03
    13d6:	82 34       	cpi	r24, 0x42	; 66
    13d8:	91 05       	cpc	r25, r1
    13da:	f1 f0       	breq	.+60     	; 0x1418 <clear_high_nibble+0x5e>
    13dc:	2a 81       	ldd	r18, Y+2	; 0x02
    13de:	3b 81       	ldd	r19, Y+3	; 0x03
    13e0:	23 34       	cpi	r18, 0x43	; 67
    13e2:	31 05       	cpc	r19, r1
    13e4:	34 f4       	brge	.+12     	; 0x13f2 <clear_high_nibble+0x38>
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ea:	81 34       	cpi	r24, 0x41	; 65
    13ec:	91 05       	cpc	r25, r1
    13ee:	61 f0       	breq	.+24     	; 0x1408 <clear_high_nibble+0x4e>
    13f0:	2a c0       	rjmp	.+84     	; 0x1446 <clear_high_nibble+0x8c>
    13f2:	2a 81       	ldd	r18, Y+2	; 0x02
    13f4:	3b 81       	ldd	r19, Y+3	; 0x03
    13f6:	23 34       	cpi	r18, 0x43	; 67
    13f8:	31 05       	cpc	r19, r1
    13fa:	b1 f0       	breq	.+44     	; 0x1428 <clear_high_nibble+0x6e>
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1400:	84 34       	cpi	r24, 0x44	; 68
    1402:	91 05       	cpc	r25, r1
    1404:	c9 f0       	breq	.+50     	; 0x1438 <clear_high_nibble+0x7e>
    1406:	1f c0       	rjmp	.+62     	; 0x1446 <clear_high_nibble+0x8c>
	{
		case 'A' :
		PORTA&=0x0f;
    1408:	ab e3       	ldi	r26, 0x3B	; 59
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	eb e3       	ldi	r30, 0x3B	; 59
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	8f 70       	andi	r24, 0x0F	; 15
    1414:	8c 93       	st	X, r24
    1416:	17 c0       	rjmp	.+46     	; 0x1446 <clear_high_nibble+0x8c>
		break ;
		case 'B':
		PORTB&=0x0f;
    1418:	a8 e3       	ldi	r26, 0x38	; 56
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e8 e3       	ldi	r30, 0x38	; 56
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	8f 70       	andi	r24, 0x0F	; 15
    1424:	8c 93       	st	X, r24
    1426:	0f c0       	rjmp	.+30     	; 0x1446 <clear_high_nibble+0x8c>
		break ;
		case 'C' :
		PORTC&=0x0f;
    1428:	a5 e3       	ldi	r26, 0x35	; 53
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e5 e3       	ldi	r30, 0x35	; 53
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	8f 70       	andi	r24, 0x0F	; 15
    1434:	8c 93       	st	X, r24
    1436:	07 c0       	rjmp	.+14     	; 0x1446 <clear_high_nibble+0x8c>
		break ;
		case 'D':
		PORTD&=0x0f;
    1438:	a2 e3       	ldi	r26, 0x32	; 50
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e2 e3       	ldi	r30, 0x32	; 50
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	8f 70       	andi	r24, 0x0F	; 15
    1444:	8c 93       	st	X, r24
		break ;
		default: break ;
		
	}
}
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <DIO_vconnectpullup>:

void DIO_vconnectpullup(uint8 portname ,uint8 pinnumber, uint8 connect_pullup)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	00 d0       	rcall	.+0      	; 0x1458 <DIO_vconnectpullup+0x6>
    1458:	00 d0       	rcall	.+0      	; 0x145a <DIO_vconnectpullup+0x8>
    145a:	0f 92       	push	r0
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	89 83       	std	Y+1, r24	; 0x01
    1462:	6a 83       	std	Y+2, r22	; 0x02
    1464:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	3d 83       	std	Y+5, r19	; 0x05
    146e:	2c 83       	std	Y+4, r18	; 0x04
    1470:	8c 81       	ldd	r24, Y+4	; 0x04
    1472:	9d 81       	ldd	r25, Y+5	; 0x05
    1474:	82 34       	cpi	r24, 0x42	; 66
    1476:	91 05       	cpc	r25, r1
    1478:	09 f4       	brne	.+2      	; 0x147c <DIO_vconnectpullup+0x2a>
    147a:	5e c0       	rjmp	.+188    	; 0x1538 <DIO_vconnectpullup+0xe6>
    147c:	2c 81       	ldd	r18, Y+4	; 0x04
    147e:	3d 81       	ldd	r19, Y+5	; 0x05
    1480:	23 34       	cpi	r18, 0x43	; 67
    1482:	31 05       	cpc	r19, r1
    1484:	34 f4       	brge	.+12     	; 0x1492 <DIO_vconnectpullup+0x40>
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	81 34       	cpi	r24, 0x41	; 65
    148c:	91 05       	cpc	r25, r1
    148e:	71 f0       	breq	.+28     	; 0x14ac <DIO_vconnectpullup+0x5a>
    1490:	24 c1       	rjmp	.+584    	; 0x16da <DIO_vconnectpullup+0x288>
    1492:	2c 81       	ldd	r18, Y+4	; 0x04
    1494:	3d 81       	ldd	r19, Y+5	; 0x05
    1496:	23 34       	cpi	r18, 0x43	; 67
    1498:	31 05       	cpc	r19, r1
    149a:	09 f4       	brne	.+2      	; 0x149e <DIO_vconnectpullup+0x4c>
    149c:	93 c0       	rjmp	.+294    	; 0x15c4 <DIO_vconnectpullup+0x172>
    149e:	8c 81       	ldd	r24, Y+4	; 0x04
    14a0:	9d 81       	ldd	r25, Y+5	; 0x05
    14a2:	84 34       	cpi	r24, 0x44	; 68
    14a4:	91 05       	cpc	r25, r1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <DIO_vconnectpullup+0x58>
    14a8:	d3 c0       	rjmp	.+422    	; 0x1650 <DIO_vconnectpullup+0x1fe>
    14aa:	17 c1       	rjmp	.+558    	; 0x16da <DIO_vconnectpullup+0x288>
	{

		case 'A':
		if(connect_pullup==1)
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	81 30       	cpi	r24, 0x01	; 1
    14b0:	71 f5       	brne	.+92     	; 0x150e <DIO_vconnectpullup+0xbc>
		{
			CLR_BIT(SFIOR,PUD);
    14b2:	a0 e5       	ldi	r26, 0x50	; 80
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e0 e5       	ldi	r30, 0x50	; 80
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8b 7f       	andi	r24, 0xFB	; 251
    14be:	8c 93       	st	X, r24
			CLR_BIT(DDRA,pinnumber);
    14c0:	aa e3       	ldi	r26, 0x3A	; 58
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	ea e3       	ldi	r30, 0x3A	; 58
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	48 2f       	mov	r20, r24
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <DIO_vconnectpullup+0x8a>
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	2a 95       	dec	r18
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <DIO_vconnectpullup+0x86>
    14e0:	80 95       	com	r24
    14e2:	84 23       	and	r24, r20
    14e4:	8c 93       	st	X, r24
			SET_BIT(PORTA,pinnumber);
    14e6:	ab e3       	ldi	r26, 0x3B	; 59
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	eb e3       	ldi	r30, 0x3B	; 59
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	48 2f       	mov	r20, r24
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 2e       	mov	r0, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <DIO_vconnectpullup+0xb2>
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	0a 94       	dec	r0
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <DIO_vconnectpullup+0xae>
    1508:	84 2b       	or	r24, r20
    150a:	8c 93       	st	X, r24
    150c:	e6 c0       	rjmp	.+460    	; 0x16da <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
    150e:	ab e3       	ldi	r26, 0x3B	; 59
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	eb e3       	ldi	r30, 0x3B	; 59
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	48 2f       	mov	r20, r24
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	02 2e       	mov	r0, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <DIO_vconnectpullup+0xda>
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	0a 94       	dec	r0
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <DIO_vconnectpullup+0xd6>
    1530:	80 95       	com	r24
    1532:	84 23       	and	r24, r20
    1534:	8c 93       	st	X, r24
    1536:	d1 c0       	rjmp	.+418    	; 0x16da <DIO_vconnectpullup+0x288>
		}
		break;

		case 'B':
		if(connect_pullup==1)
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	71 f5       	brne	.+92     	; 0x159a <DIO_vconnectpullup+0x148>
		{
			CLR_BIT(SFIOR,PUD);
    153e:	a0 e5       	ldi	r26, 0x50	; 80
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e0 e5       	ldi	r30, 0x50	; 80
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	8b 7f       	andi	r24, 0xFB	; 251
    154a:	8c 93       	st	X, r24
			CLR_BIT(DDRB,pinnumber);
    154c:	a7 e3       	ldi	r26, 0x37	; 55
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e7 e3       	ldi	r30, 0x37	; 55
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	48 2f       	mov	r20, r24
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <DIO_vconnectpullup+0x116>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	2a 95       	dec	r18
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <DIO_vconnectpullup+0x112>
    156c:	80 95       	com	r24
    156e:	84 23       	and	r24, r20
    1570:	8c 93       	st	X, r24
			SET_BIT(PORTB,pinnumber);
    1572:	a8 e3       	ldi	r26, 0x38	; 56
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e8 e3       	ldi	r30, 0x38	; 56
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	48 2f       	mov	r20, r24
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 2e       	mov	r0, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_vconnectpullup+0x13e>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_vconnectpullup+0x13a>
    1594:	84 2b       	or	r24, r20
    1596:	8c 93       	st	X, r24
    1598:	a0 c0       	rjmp	.+320    	; 0x16da <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
    159a:	a8 e3       	ldi	r26, 0x38	; 56
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e8 e3       	ldi	r30, 0x38	; 56
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	48 2f       	mov	r20, r24
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 2e       	mov	r0, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <DIO_vconnectpullup+0x166>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <DIO_vconnectpullup+0x162>
    15bc:	80 95       	com	r24
    15be:	84 23       	and	r24, r20
    15c0:	8c 93       	st	X, r24
    15c2:	8b c0       	rjmp	.+278    	; 0x16da <DIO_vconnectpullup+0x288>
		}
		break;

		case 'C':
		if(connect_pullup==1)
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	71 f5       	brne	.+92     	; 0x1626 <DIO_vconnectpullup+0x1d4>
		{
			CLR_BIT(SFIOR,PUD);
    15ca:	a0 e5       	ldi	r26, 0x50	; 80
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e0 e5       	ldi	r30, 0x50	; 80
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	8b 7f       	andi	r24, 0xFB	; 251
    15d6:	8c 93       	st	X, r24
			CLR_BIT(DDRC,pinnumber);
    15d8:	a4 e3       	ldi	r26, 0x34	; 52
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e4 e3       	ldi	r30, 0x34	; 52
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <DIO_vconnectpullup+0x1a2>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	2a 95       	dec	r18
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <DIO_vconnectpullup+0x19e>
    15f8:	80 95       	com	r24
    15fa:	84 23       	and	r24, r20
    15fc:	8c 93       	st	X, r24
			SET_BIT(PORTC,pinnumber);
    15fe:	a5 e3       	ldi	r26, 0x35	; 53
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e5 e3       	ldi	r30, 0x35	; 53
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_vconnectpullup+0x1ca>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DIO_vconnectpullup+0x1c6>
    1620:	84 2b       	or	r24, r20
    1622:	8c 93       	st	X, r24
    1624:	5a c0       	rjmp	.+180    	; 0x16da <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
    1626:	a5 e3       	ldi	r26, 0x35	; 53
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e5 e3       	ldi	r30, 0x35	; 53
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	48 2f       	mov	r20, r24
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <DIO_vconnectpullup+0x1f2>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <DIO_vconnectpullup+0x1ee>
    1648:	80 95       	com	r24
    164a:	84 23       	and	r24, r20
    164c:	8c 93       	st	X, r24
    164e:	45 c0       	rjmp	.+138    	; 0x16da <DIO_vconnectpullup+0x288>
		}
		break;

		case 'D':
		if(connect_pullup==1)
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	71 f5       	brne	.+92     	; 0x16b2 <DIO_vconnectpullup+0x260>
		{
			CLR_BIT(SFIOR,PUD);
    1656:	a0 e5       	ldi	r26, 0x50	; 80
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e0 e5       	ldi	r30, 0x50	; 80
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	8b 7f       	andi	r24, 0xFB	; 251
    1662:	8c 93       	st	X, r24
			CLR_BIT(DDRD,pinnumber);
    1664:	a1 e3       	ldi	r26, 0x31	; 49
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e1 e3       	ldi	r30, 0x31	; 49
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	48 2f       	mov	r20, r24
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <DIO_vconnectpullup+0x22e>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	2a 95       	dec	r18
    1682:	e2 f7       	brpl	.-8      	; 0x167c <DIO_vconnectpullup+0x22a>
    1684:	80 95       	com	r24
    1686:	84 23       	and	r24, r20
    1688:	8c 93       	st	X, r24
			SET_BIT(PORTD,pinnumber);
    168a:	a2 e3       	ldi	r26, 0x32	; 50
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e2 e3       	ldi	r30, 0x32	; 50
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	48 2f       	mov	r20, r24
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 2e       	mov	r0, r18
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <DIO_vconnectpullup+0x256>
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	0a 94       	dec	r0
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <DIO_vconnectpullup+0x252>
    16ac:	84 2b       	or	r24, r20
    16ae:	8c 93       	st	X, r24
    16b0:	14 c0       	rjmp	.+40     	; 0x16da <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
    16b2:	a2 e3       	ldi	r26, 0x32	; 50
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e2 e3       	ldi	r30, 0x32	; 50
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	48 2f       	mov	r20, r24
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	02 2e       	mov	r0, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <DIO_vconnectpullup+0x27e>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	0a 94       	dec	r0
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <DIO_vconnectpullup+0x27a>
    16d4:	80 95       	com	r24
    16d6:	84 23       	and	r24, r20
    16d8:	8c 93       	st	X, r24
		}
		break;
		
	}
}
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <LCD_vInit>:
/**************************************************/
static void send_falling_edge(void);
#include "LCD.h" 

void LCD_vInit(void)
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	2e 97       	sbiw	r28, 0x0e	; 14
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
	#if defined eight_bits_mode
	DIO_vsetPINDir(LCD_PORT,LCD_FIRST_PIN,1);
    16fe:	81 e4       	ldi	r24, 0x41	; 65
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	41 e0       	ldi	r20, 0x01	; 1
    1704:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_SECOND_PIN,1);
    1708:	81 e4       	ldi	r24, 0x41	; 65
    170a:	61 e0       	ldi	r22, 0x01	; 1
    170c:	41 e0       	ldi	r20, 0x01	; 1
    170e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_THIRD_PIN,1);
    1712:	81 e4       	ldi	r24, 0x41	; 65
    1714:	62 e0       	ldi	r22, 0x02	; 2
    1716:	41 e0       	ldi	r20, 0x01	; 1
    1718:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_FOURTH_PIN,1);
    171c:	81 e4       	ldi	r24, 0x41	; 65
    171e:	63 e0       	ldi	r22, 0x03	; 3
    1720:	41 e0       	ldi	r20, 0x01	; 1
    1722:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_FIFTH_PIN,1);
    1726:	81 e4       	ldi	r24, 0x41	; 65
    1728:	64 e0       	ldi	r22, 0x04	; 4
    172a:	41 e0       	ldi	r20, 0x01	; 1
    172c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_SIXTH_PIN,1);
    1730:	81 e4       	ldi	r24, 0x41	; 65
    1732:	65 e0       	ldi	r22, 0x05	; 5
    1734:	41 e0       	ldi	r20, 0x01	; 1
    1736:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_SEVENTH_PIN,1);
    173a:	81 e4       	ldi	r24, 0x41	; 65
    173c:	66 e0       	ldi	r22, 0x06	; 6
    173e:	41 e0       	ldi	r20, 0x01	; 1
    1740:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_EIGHTH_PIN,1);
    1744:	81 e4       	ldi	r24, 0x41	; 65
    1746:	67 e0       	ldi	r22, 0x07	; 7
    1748:	41 e0       	ldi	r20, 0x01	; 1
    174a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	/*********************************/
	DIO_vsetPINDir(LCD_CONTROL_PORT,LCD_EN_PIN,1);
    174e:	82 e4       	ldi	r24, 0x42	; 66
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	41 e0       	ldi	r20, 0x01	; 1
    1754:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_CONTROL_PORT,LCD_RW_PIN,1);
    1758:	82 e4       	ldi	r24, 0x42	; 66
    175a:	62 e0       	ldi	r22, 0x02	; 2
    175c:	41 e0       	ldi	r20, 0x01	; 1
    175e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_CONTROL_PORT,LCD_RS_PIN,1);
    1762:	82 e4       	ldi	r24, 0x42	; 66
    1764:	61 e0       	ldi	r22, 0x01	; 1
    1766:	41 e0       	ldi	r20, 0x01	; 1
    1768:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	/*****************************/
	DIO_write(LCD_CONTROL_PORT,LCD_RW_PIN,0);
    176c:	82 e4       	ldi	r24, 0x42	; 66
    176e:	62 e0       	ldi	r22, 0x02	; 2
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
	LCD_vSend_cmd(EIGHT_BIT_MODE);
    1776:	88 e3       	ldi	r24, 0x38	; 56
    1778:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <LCD_vSend_cmd>
	LCD_vSend_cmd(CLR_SCREEN);
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <LCD_vSend_cmd>
	LCD_vSend_cmd(DISPLAY_ON_CURSOR_ON);
    1782:	8e e0       	ldi	r24, 0x0E	; 14
    1784:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <LCD_vSend_cmd>
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	a0 e2       	ldi	r26, 0x20	; 32
    178e:	b1 e4       	ldi	r27, 0x41	; 65
    1790:	8b 87       	std	Y+11, r24	; 0x0b
    1792:	9c 87       	std	Y+12, r25	; 0x0c
    1794:	ad 87       	std	Y+13, r26	; 0x0d
    1796:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1798:	6b 85       	ldd	r22, Y+11	; 0x0b
    179a:	7c 85       	ldd	r23, Y+12	; 0x0c
    179c:	8d 85       	ldd	r24, Y+13	; 0x0d
    179e:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	4a ef       	ldi	r20, 0xFA	; 250
    17a6:	54 e4       	ldi	r21, 0x44	; 68
    17a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	8f 83       	std	Y+7, r24	; 0x07
    17b2:	98 87       	std	Y+8, r25	; 0x08
    17b4:	a9 87       	std	Y+9, r26	; 0x09
    17b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17b8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ba:	78 85       	ldd	r23, Y+8	; 0x08
    17bc:	89 85       	ldd	r24, Y+9	; 0x09
    17be:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e8       	ldi	r20, 0x80	; 128
    17c6:	5f e3       	ldi	r21, 0x3F	; 63
    17c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17cc:	88 23       	and	r24, r24
    17ce:	2c f4       	brge	.+10     	; 0x17da <LCD_vInit+0xf0>
		__ticks = 1;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	9e 83       	std	Y+6, r25	; 0x06
    17d6:	8d 83       	std	Y+5, r24	; 0x05
    17d8:	3f c0       	rjmp	.+126    	; 0x1858 <LCD_vInit+0x16e>
	else if (__tmp > 65535)
    17da:	6f 81       	ldd	r22, Y+7	; 0x07
    17dc:	78 85       	ldd	r23, Y+8	; 0x08
    17de:	89 85       	ldd	r24, Y+9	; 0x09
    17e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	3f ef       	ldi	r19, 0xFF	; 255
    17e6:	4f e7       	ldi	r20, 0x7F	; 127
    17e8:	57 e4       	ldi	r21, 0x47	; 71
    17ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17ee:	18 16       	cp	r1, r24
    17f0:	4c f5       	brge	.+82     	; 0x1844 <LCD_vInit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	40 e2       	ldi	r20, 0x20	; 32
    1800:	51 e4       	ldi	r21, 0x41	; 65
    1802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	bc 01       	movw	r22, r24
    180c:	cd 01       	movw	r24, r26
    180e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	9e 83       	std	Y+6, r25	; 0x06
    1818:	8d 83       	std	Y+5, r24	; 0x05
    181a:	0f c0       	rjmp	.+30     	; 0x183a <LCD_vInit+0x150>
    181c:	88 ec       	ldi	r24, 0xC8	; 200
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	9c 83       	std	Y+4, r25	; 0x04
    1822:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	9c 81       	ldd	r25, Y+4	; 0x04
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <LCD_vInit+0x13e>
    182c:	9c 83       	std	Y+4, r25	; 0x04
    182e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1830:	8d 81       	ldd	r24, Y+5	; 0x05
    1832:	9e 81       	ldd	r25, Y+6	; 0x06
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	9e 83       	std	Y+6, r25	; 0x06
    1838:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183a:	8d 81       	ldd	r24, Y+5	; 0x05
    183c:	9e 81       	ldd	r25, Y+6	; 0x06
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	69 f7       	brne	.-38     	; 0x181c <LCD_vInit+0x132>
    1842:	14 c0       	rjmp	.+40     	; 0x186c <LCD_vInit+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1844:	6f 81       	ldd	r22, Y+7	; 0x07
    1846:	78 85       	ldd	r23, Y+8	; 0x08
    1848:	89 85       	ldd	r24, Y+9	; 0x09
    184a:	9a 85       	ldd	r25, Y+10	; 0x0a
    184c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	9e 83       	std	Y+6, r25	; 0x06
    1856:	8d 83       	std	Y+5, r24	; 0x05
    1858:	8d 81       	ldd	r24, Y+5	; 0x05
    185a:	9e 81       	ldd	r25, Y+6	; 0x06
    185c:	9a 83       	std	Y+2, r25	; 0x02
    185e:	89 83       	std	Y+1, r24	; 0x01
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	9a 81       	ldd	r25, Y+2	; 0x02
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f1 f7       	brne	.-4      	; 0x1864 <LCD_vInit+0x17a>
    1868:	9a 83       	std	Y+2, r25	; 0x02
    186a:	89 83       	std	Y+1, r24	; 0x01
	LCD_vSend_cmd(FOUR_BIT_MODE_II);
	LCD_vSend_cmd(CLR_SCREEN);
	LCD_vSend_cmd(DISPLAY_ON_CURSOR_ON);
	_delay_ms(10);
	#endif
}
    186c:	2e 96       	adiw	r28, 0x0e	; 14
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	cd bf       	out	0x3d, r28	; 61
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <send_falling_edge>:


static void send_falling_edge(void)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	6c 97       	sbiw	r28, 0x1c	; 28
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61

	DIO_write(LCD_CONTROL_PORT,LCD_EN_PIN,1);
    1892:	82 e4       	ldi	r24, 0x42	; 66
    1894:	60 e0       	ldi	r22, 0x00	; 0
    1896:	41 e0       	ldi	r20, 0x01	; 1
    1898:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	a0 e0       	ldi	r26, 0x00	; 0
    18a2:	b0 e4       	ldi	r27, 0x40	; 64
    18a4:	89 8f       	std	Y+25, r24	; 0x19
    18a6:	9a 8f       	std	Y+26, r25	; 0x1a
    18a8:	ab 8f       	std	Y+27, r26	; 0x1b
    18aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ac:	69 8d       	ldd	r22, Y+25	; 0x19
    18ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	4a ef       	ldi	r20, 0xFA	; 250
    18ba:	54 e4       	ldi	r21, 0x44	; 68
    18bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	8d 8b       	std	Y+21, r24	; 0x15
    18c6:	9e 8b       	std	Y+22, r25	; 0x16
    18c8:	af 8b       	std	Y+23, r26	; 0x17
    18ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18cc:	6d 89       	ldd	r22, Y+21	; 0x15
    18ce:	7e 89       	ldd	r23, Y+22	; 0x16
    18d0:	8f 89       	ldd	r24, Y+23	; 0x17
    18d2:	98 8d       	ldd	r25, Y+24	; 0x18
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	40 e8       	ldi	r20, 0x80	; 128
    18da:	5f e3       	ldi	r21, 0x3F	; 63
    18dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18e0:	88 23       	and	r24, r24
    18e2:	2c f4       	brge	.+10     	; 0x18ee <send_falling_edge+0x70>
		__ticks = 1;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	9c 8b       	std	Y+20, r25	; 0x14
    18ea:	8b 8b       	std	Y+19, r24	; 0x13
    18ec:	3f c0       	rjmp	.+126    	; 0x196c <send_falling_edge+0xee>
	else if (__tmp > 65535)
    18ee:	6d 89       	ldd	r22, Y+21	; 0x15
    18f0:	7e 89       	ldd	r23, Y+22	; 0x16
    18f2:	8f 89       	ldd	r24, Y+23	; 0x17
    18f4:	98 8d       	ldd	r25, Y+24	; 0x18
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	3f ef       	ldi	r19, 0xFF	; 255
    18fa:	4f e7       	ldi	r20, 0x7F	; 127
    18fc:	57 e4       	ldi	r21, 0x47	; 71
    18fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1902:	18 16       	cp	r1, r24
    1904:	4c f5       	brge	.+82     	; 0x1958 <send_falling_edge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1906:	69 8d       	ldd	r22, Y+25	; 0x19
    1908:	7a 8d       	ldd	r23, Y+26	; 0x1a
    190a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    190c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	40 e2       	ldi	r20, 0x20	; 32
    1914:	51 e4       	ldi	r21, 0x41	; 65
    1916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	bc 01       	movw	r22, r24
    1920:	cd 01       	movw	r24, r26
    1922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	9c 8b       	std	Y+20, r25	; 0x14
    192c:	8b 8b       	std	Y+19, r24	; 0x13
    192e:	0f c0       	rjmp	.+30     	; 0x194e <send_falling_edge+0xd0>
    1930:	88 ec       	ldi	r24, 0xC8	; 200
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	9a 8b       	std	Y+18, r25	; 0x12
    1936:	89 8b       	std	Y+17, r24	; 0x11
    1938:	89 89       	ldd	r24, Y+17	; 0x11
    193a:	9a 89       	ldd	r25, Y+18	; 0x12
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <send_falling_edge+0xbe>
    1940:	9a 8b       	std	Y+18, r25	; 0x12
    1942:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1944:	8b 89       	ldd	r24, Y+19	; 0x13
    1946:	9c 89       	ldd	r25, Y+20	; 0x14
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	9c 8b       	std	Y+20, r25	; 0x14
    194c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194e:	8b 89       	ldd	r24, Y+19	; 0x13
    1950:	9c 89       	ldd	r25, Y+20	; 0x14
    1952:	00 97       	sbiw	r24, 0x00	; 0
    1954:	69 f7       	brne	.-38     	; 0x1930 <send_falling_edge+0xb2>
    1956:	14 c0       	rjmp	.+40     	; 0x1980 <send_falling_edge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1958:	6d 89       	ldd	r22, Y+21	; 0x15
    195a:	7e 89       	ldd	r23, Y+22	; 0x16
    195c:	8f 89       	ldd	r24, Y+23	; 0x17
    195e:	98 8d       	ldd	r25, Y+24	; 0x18
    1960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	9c 8b       	std	Y+20, r25	; 0x14
    196a:	8b 8b       	std	Y+19, r24	; 0x13
    196c:	8b 89       	ldd	r24, Y+19	; 0x13
    196e:	9c 89       	ldd	r25, Y+20	; 0x14
    1970:	98 8b       	std	Y+16, r25	; 0x10
    1972:	8f 87       	std	Y+15, r24	; 0x0f
    1974:	8f 85       	ldd	r24, Y+15	; 0x0f
    1976:	98 89       	ldd	r25, Y+16	; 0x10
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	f1 f7       	brne	.-4      	; 0x1978 <send_falling_edge+0xfa>
    197c:	98 8b       	std	Y+16, r25	; 0x10
    197e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_write(LCD_CONTROL_PORT,LCD_EN_PIN,0);
    1980:	82 e4       	ldi	r24, 0x42	; 66
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	40 e0       	ldi	r20, 0x00	; 0
    1986:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	a0 e0       	ldi	r26, 0x00	; 0
    1990:	b0 e4       	ldi	r27, 0x40	; 64
    1992:	8b 87       	std	Y+11, r24	; 0x0b
    1994:	9c 87       	std	Y+12, r25	; 0x0c
    1996:	ad 87       	std	Y+13, r26	; 0x0d
    1998:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199a:	6b 85       	ldd	r22, Y+11	; 0x0b
    199c:	7c 85       	ldd	r23, Y+12	; 0x0c
    199e:	8d 85       	ldd	r24, Y+13	; 0x0d
    19a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	4a ef       	ldi	r20, 0xFA	; 250
    19a8:	54 e4       	ldi	r21, 0x44	; 68
    19aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	8f 83       	std	Y+7, r24	; 0x07
    19b4:	98 87       	std	Y+8, r25	; 0x08
    19b6:	a9 87       	std	Y+9, r26	; 0x09
    19b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ba:	6f 81       	ldd	r22, Y+7	; 0x07
    19bc:	78 85       	ldd	r23, Y+8	; 0x08
    19be:	89 85       	ldd	r24, Y+9	; 0x09
    19c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e8       	ldi	r20, 0x80	; 128
    19c8:	5f e3       	ldi	r21, 0x3F	; 63
    19ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19ce:	88 23       	and	r24, r24
    19d0:	2c f4       	brge	.+10     	; 0x19dc <send_falling_edge+0x15e>
		__ticks = 1;
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	9e 83       	std	Y+6, r25	; 0x06
    19d8:	8d 83       	std	Y+5, r24	; 0x05
    19da:	3f c0       	rjmp	.+126    	; 0x1a5a <send_falling_edge+0x1dc>
	else if (__tmp > 65535)
    19dc:	6f 81       	ldd	r22, Y+7	; 0x07
    19de:	78 85       	ldd	r23, Y+8	; 0x08
    19e0:	89 85       	ldd	r24, Y+9	; 0x09
    19e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	3f ef       	ldi	r19, 0xFF	; 255
    19e8:	4f e7       	ldi	r20, 0x7F	; 127
    19ea:	57 e4       	ldi	r21, 0x47	; 71
    19ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19f0:	18 16       	cp	r1, r24
    19f2:	4c f5       	brge	.+82     	; 0x1a46 <send_falling_edge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e2       	ldi	r20, 0x20	; 32
    1a02:	51 e4       	ldi	r21, 0x41	; 65
    1a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	cd 01       	movw	r24, r26
    1a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	9e 83       	std	Y+6, r25	; 0x06
    1a1a:	8d 83       	std	Y+5, r24	; 0x05
    1a1c:	0f c0       	rjmp	.+30     	; 0x1a3c <send_falling_edge+0x1be>
    1a1e:	88 ec       	ldi	r24, 0xC8	; 200
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	9c 83       	std	Y+4, r25	; 0x04
    1a24:	8b 83       	std	Y+3, r24	; 0x03
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	f1 f7       	brne	.-4      	; 0x1a2a <send_falling_edge+0x1ac>
    1a2e:	9c 83       	std	Y+4, r25	; 0x04
    1a30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a32:	8d 81       	ldd	r24, Y+5	; 0x05
    1a34:	9e 81       	ldd	r25, Y+6	; 0x06
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	9e 83       	std	Y+6, r25	; 0x06
    1a3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a40:	00 97       	sbiw	r24, 0x00	; 0
    1a42:	69 f7       	brne	.-38     	; 0x1a1e <send_falling_edge+0x1a0>
    1a44:	14 c0       	rjmp	.+40     	; 0x1a6e <send_falling_edge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a46:	6f 81       	ldd	r22, Y+7	; 0x07
    1a48:	78 85       	ldd	r23, Y+8	; 0x08
    1a4a:	89 85       	ldd	r24, Y+9	; 0x09
    1a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	9e 83       	std	Y+6, r25	; 0x06
    1a58:	8d 83       	std	Y+5, r24	; 0x05
    1a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5e:	9a 83       	std	Y+2, r25	; 0x02
    1a60:	89 83       	std	Y+1, r24	; 0x01
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	9a 81       	ldd	r25, Y+2	; 0x02
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	f1 f7       	brne	.-4      	; 0x1a66 <send_falling_edge+0x1e8>
    1a6a:	9a 83       	std	Y+2, r25	; 0x02
    1a6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1a6e:	6c 96       	adiw	r28, 0x1c	; 28
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <LCD_vSend_cmd>:
void LCD_vSend_cmd(uint8 cmd)
{
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	0f 92       	push	r0
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	89 83       	std	Y+1, r24	; 0x01
	#if defined eight_bits_mode
	DIO_write_port(LCD_PORT,cmd);
    1a8c:	81 e4       	ldi	r24, 0x41	; 65
    1a8e:	69 81       	ldd	r22, Y+1	; 0x01
    1a90:	0e 94 41 09 	call	0x1282	; 0x1282 <DIO_write_port>
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,0);
    1a94:	82 e4       	ldi	r24, 0x42	; 66
    1a96:	61 e0       	ldi	r22, 0x01	; 1
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
	send_falling_edge();
    1a9e:	0e 94 3f 0c 	call	0x187e	; 0x187e <send_falling_edge>
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,0);
	send_falling_edge();
	/***************************************/
	#endif
	
}
    1aa2:	0f 90       	pop	r0
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <LCD_vSend_char>:
void LCD_vSend_char(uint8 data)
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	0f 92       	push	r0
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	89 83       	std	Y+1, r24	; 0x01
	#if defined eight_bits_mode
	DIO_write_port(LCD_PORT,data);
    1ab6:	81 e4       	ldi	r24, 0x41	; 65
    1ab8:	69 81       	ldd	r22, Y+1	; 0x01
    1aba:	0e 94 41 09 	call	0x1282	; 0x1282 <DIO_write_port>
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,1);
    1abe:	82 e4       	ldi	r24, 0x42	; 66
    1ac0:	61 e0       	ldi	r22, 0x01	; 1
    1ac2:	41 e0       	ldi	r20, 0x01	; 1
    1ac4:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
	send_falling_edge();
    1ac8:	0e 94 3f 0c 	call	0x187e	; 0x187e <send_falling_edge>
	dio_write_highnibble(LCD_PORT,data<<4);
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,1);
	send_falling_edge();
	/******************************************/
	#endif
}
    1acc:	0f 90       	pop	r0
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <LCD_vSend_string>:

void LCD_vSend_string(char *data)
{
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	00 d0       	rcall	.+0      	; 0x1ada <LCD_vSend_string+0x6>
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	9a 83       	std	Y+2, r25	; 0x02
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	0a c0       	rjmp	.+20     	; 0x1af8 <LCD_vSend_string+0x24>
	while((*data)!=0)
	{
		LCD_vSend_char(*data);
    1ae4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae8:	80 81       	ld	r24, Z
    1aea:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_vSend_char>
		data++;
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	9a 81       	ldd	r25, Y+2	; 0x02
    1af2:	01 96       	adiw	r24, 0x01	; 1
    1af4:	9a 83       	std	Y+2, r25	; 0x02
    1af6:	89 83       	std	Y+1, r24	; 0x01
	#endif
}

void LCD_vSend_string(char *data)
{
	while((*data)!=0)
    1af8:	e9 81       	ldd	r30, Y+1	; 0x01
    1afa:	fa 81       	ldd	r31, Y+2	; 0x02
    1afc:	80 81       	ld	r24, Z
    1afe:	88 23       	and	r24, r24
    1b00:	89 f7       	brne	.-30     	; 0x1ae4 <LCD_vSend_string+0x10>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <LCD_clearscreen>:

void LCD_clearscreen(void)
{
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
	LCD_vSend_cmd(CLR_SCREEN);
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <LCD_vSend_cmd>
}
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <LCD_movecursor>:
void LCD_movecursor(uint8 row,uint8 coloumn)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <LCD_movecursor+0x6>
    1b26:	0f 92       	push	r0
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	8a 83       	std	Y+2, r24	; 0x02
    1b2e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	83 30       	cpi	r24, 0x03	; 3
    1b34:	48 f4       	brcc	.+18     	; 0x1b48 <LCD_movecursor+0x28>
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	88 23       	and	r24, r24
    1b3a:	31 f0       	breq	.+12     	; 0x1b48 <LCD_movecursor+0x28>
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	81 31       	cpi	r24, 0x11	; 17
    1b40:	18 f4       	brcc	.+6      	; 0x1b48 <LCD_movecursor+0x28>
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	88 23       	and	r24, r24
    1b46:	11 f4       	brne	.+4      	; 0x1b4c <LCD_movecursor+0x2c>
	{
		data=0x80;
    1b48:	80 e8       	ldi	r24, 0x80	; 128
    1b4a:	89 83       	std	Y+1, r24	; 0x01
	}
	/********************************************/

	if(row==1)
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	81 30       	cpi	r24, 0x01	; 1
    1b50:	21 f4       	brne	.+8      	; 0x1b5a <LCD_movecursor+0x3a>
	{
		data=0x80+coloumn-1 ;
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	81 58       	subi	r24, 0x81	; 129
    1b56:	89 83       	std	Y+1, r24	; 0x01
    1b58:	06 c0       	rjmp	.+12     	; 0x1b66 <LCD_movecursor+0x46>
	}
	else if (row==2)
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	82 30       	cpi	r24, 0x02	; 2
    1b5e:	19 f4       	brne	.+6      	; 0x1b66 <LCD_movecursor+0x46>
	{
		data=0xc0+coloumn-1;
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	81 54       	subi	r24, 0x41	; 65
    1b64:	89 83       	std	Y+1, r24	; 0x01
	}
	/**************************************/
	
	LCD_vSend_cmd(data); //set the position  of the cursor
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <LCD_vSend_cmd>
}
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	08 95       	ret

00001b78 <LED_vInit>:
/*Version: 1.0V                                   */
/**************************************************/

#include "LED.h"
void LED_vInit(uint8 portname,uint8 pinnumber)
{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <LED_vInit+0x6>
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	89 83       	std	Y+1, r24	; 0x01
    1b84:	6a 83       	std	Y+2, r22	; 0x02
	DIO_vsetPINDir(portname,pinnumber,1);
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	6a 81       	ldd	r22, Y+2	; 0x02
    1b8a:	41 e0       	ldi	r20, 0x01	; 1
    1b8c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
}
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <LED_vTurnOn>:
void LED_vTurnOn(uint8 portname,uint8 pinnumber)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <LED_vTurnOn+0x6>
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(portname,pinnumber,1);
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	6a 81       	ldd	r22, Y+2	; 0x02
    1bac:	41 e0       	ldi	r20, 0x01	; 1
    1bae:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
}
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <LED_vTurnOff>:
void LED_vTurnOff(uint8 portname,uint8 pinnumber)
{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	00 d0       	rcall	.+0      	; 0x1bc2 <LED_vTurnOff+0x6>
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	89 83       	std	Y+1, r24	; 0x01
    1bc8:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(portname,pinnumber,0);
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	6a 81       	ldd	r22, Y+2	; 0x02
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
}
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <LED_vToggle>:
void LED_vToggle(uint8 portname,uint8 pinnumber)
{
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <LED_vToggle+0x6>
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	6a 83       	std	Y+2, r22	; 0x02
	DIO_toggle(portname,pinnumber);
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	6a 81       	ldd	r22, Y+2	; 0x02
    1bf0:	0e 94 c3 08 	call	0x1186	; 0x1186 <DIO_toggle>
}
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <LED_u8ReadStatus>:
uint8 LED_u8ReadStatus(uint8 portname,uint8 pinnumber)
{
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <LED_u8ReadStatus+0x6>
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	89 83       	std	Y+1, r24	; 0x01
    1c0a:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_u8read(portname,pinnumber);
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	6a 81       	ldd	r22, Y+2	; 0x02
    1c10:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_u8read>
}
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <SPI_vInitMaster>:
#include "SPI.h"
#include "STD_MESSAGES.h"
#include "std_macros.h"

void SPI_vInitMaster (void)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
	DDRB |=(1<<SPI_MOSI) |(1<<SPI_SS)|(1<<SPI_SCK);
    1c26:	a7 e3       	ldi	r26, 0x37	; 55
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e7 e3       	ldi	r30, 0x37	; 55
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	80 6b       	ori	r24, 0xB0	; 176
    1c32:	8c 93       	st	X, r24
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1c34:	ad e2       	ldi	r26, 0x2D	; 45
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	ed e2       	ldi	r30, 0x2D	; 45
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	81 65       	ori	r24, 0x51	; 81
    1c40:	8c 93       	st	X, r24
}
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <SPI_vInitSlave>:

void SPI_vInitSlave (void)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<SPI_MISO) ;
    1c50:	a7 e3       	ldi	r26, 0x37	; 55
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e7 e3       	ldi	r30, 0x37	; 55
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	80 64       	ori	r24, 0x40	; 64
    1c5c:	8c 93       	st	X, r24
	SPCR |= (1<<SPE);
    1c5e:	ad e2       	ldi	r26, 0x2D	; 45
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	ed e2       	ldi	r30, 0x2D	; 45
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	80 64       	ori	r24, 0x40	; 64
    1c6a:	8c 93       	st	X, r24
}
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <SPI_ui8TransmitRecive>:

uint8 SPI_ui8TransmitRecive (uint8 data)
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	0f 92       	push	r0
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    1c7e:	ef e2       	ldi	r30, 0x2F	; 47
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	80 83       	st	Z, r24

	
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	;
    1c86:	ee e2       	ldi	r30, 0x2E	; 46
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	88 1f       	adc	r24, r24
    1c8e:	88 27       	eor	r24, r24
    1c90:	88 1f       	adc	r24, r24
    1c92:	88 2f       	mov	r24, r24
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	90 70       	andi	r25, 0x00	; 0
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	a9 f3       	breq	.-22     	; 0x1c86 <SPI_ui8TransmitRecive+0x14>
	
	return SPDR;
    1c9c:	ef e2       	ldi	r30, 0x2F	; 47
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
}
    1ca2:	0f 90       	pop	r0
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <keypad_vInit>:
/*Date   : 16 sep 2023                            */
/*Version: 1.0V                                   */
/**************************************************/
#include "keypad_driver.h"
void keypad_vInit(void)
{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
	/* Initialize first four bits in keypad as output pins */
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_FIRST_PIN,1);
    1cb2:	84 e4       	ldi	r24, 0x44	; 68
    1cb4:	60 e0       	ldi	r22, 0x00	; 0
    1cb6:	41 e0       	ldi	r20, 0x01	; 1
    1cb8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_SECOND_PIN,1);
    1cbc:	84 e4       	ldi	r24, 0x44	; 68
    1cbe:	61 e0       	ldi	r22, 0x01	; 1
    1cc0:	41 e0       	ldi	r20, 0x01	; 1
    1cc2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_THIRD_PIN,1);
    1cc6:	84 e4       	ldi	r24, 0x44	; 68
    1cc8:	62 e0       	ldi	r22, 0x02	; 2
    1cca:	41 e0       	ldi	r20, 0x01	; 1
    1ccc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_FOURTH_PIN,1);
    1cd0:	84 e4       	ldi	r24, 0x44	; 68
    1cd2:	63 e0       	ldi	r22, 0x03	; 3
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	/******************************************************/
	/* initalize second four bits in keypad as input pins */
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_FIFTH_PIN,0);
    1cda:	84 e4       	ldi	r24, 0x44	; 68
    1cdc:	64 e0       	ldi	r22, 0x04	; 4
    1cde:	40 e0       	ldi	r20, 0x00	; 0
    1ce0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_SIXTH_PIN,0);
    1ce4:	84 e4       	ldi	r24, 0x44	; 68
    1ce6:	65 e0       	ldi	r22, 0x05	; 5
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_SEVENTH_PIN,0);
    1cee:	84 e4       	ldi	r24, 0x44	; 68
    1cf0:	66 e0       	ldi	r22, 0x06	; 6
    1cf2:	40 e0       	ldi	r20, 0x00	; 0
    1cf4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_EIGHTH_PIN,0);
    1cf8:	84 e4       	ldi	r24, 0x44	; 68
    1cfa:	67 e0       	ldi	r22, 0x07	; 7
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	/*****************************************************/
	/*connect pull up resistance to the input pins*/
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_FIFTH_PIN,1);
    1d02:	84 e4       	ldi	r24, 0x44	; 68
    1d04:	64 e0       	ldi	r22, 0x04	; 4
    1d06:	41 e0       	ldi	r20, 0x01	; 1
    1d08:	0e 94 29 0a 	call	0x1452	; 0x1452 <DIO_vconnectpullup>
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_SIXTH_PIN,1);
    1d0c:	84 e4       	ldi	r24, 0x44	; 68
    1d0e:	65 e0       	ldi	r22, 0x05	; 5
    1d10:	41 e0       	ldi	r20, 0x01	; 1
    1d12:	0e 94 29 0a 	call	0x1452	; 0x1452 <DIO_vconnectpullup>
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_SEVENTH_PIN,1);
    1d16:	84 e4       	ldi	r24, 0x44	; 68
    1d18:	66 e0       	ldi	r22, 0x06	; 6
    1d1a:	41 e0       	ldi	r20, 0x01	; 1
    1d1c:	0e 94 29 0a 	call	0x1452	; 0x1452 <DIO_vconnectpullup>
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_EIGHTH_PIN,1);
    1d20:	84 e4       	ldi	r24, 0x44	; 68
    1d22:	67 e0       	ldi	r22, 0x07	; 7
    1d24:	41 e0       	ldi	r20, 0x01	; 1
    1d26:	0e 94 29 0a 	call	0x1452	; 0x1452 <DIO_vconnectpullup>
	/****************************************************/
}
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	08 95       	ret

00001d30 <keypad_u8check_press>:
uint8 keypad_u8check_press(void)
{
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	a7 97       	sbiw	r28, 0x27	; 39
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
	uint8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}}; //keypad buttons
    1d44:	ce 01       	movw	r24, r28
    1d46:	43 96       	adiw	r24, 0x13	; 19
    1d48:	9c a3       	std	Y+36, r25	; 0x24
    1d4a:	8b a3       	std	Y+35, r24	; 0x23
    1d4c:	e1 e9       	ldi	r30, 0x91	; 145
    1d4e:	f2 e0       	ldi	r31, 0x02	; 2
    1d50:	fe a3       	std	Y+38, r31	; 0x26
    1d52:	ed a3       	std	Y+37, r30	; 0x25
    1d54:	f0 e1       	ldi	r31, 0x10	; 16
    1d56:	ff a3       	std	Y+39, r31	; 0x27
    1d58:	ed a1       	ldd	r30, Y+37	; 0x25
    1d5a:	fe a1       	ldd	r31, Y+38	; 0x26
    1d5c:	00 80       	ld	r0, Z
    1d5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d60:	9e a1       	ldd	r25, Y+38	; 0x26
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	9e a3       	std	Y+38, r25	; 0x26
    1d66:	8d a3       	std	Y+37, r24	; 0x25
    1d68:	eb a1       	ldd	r30, Y+35	; 0x23
    1d6a:	fc a1       	ldd	r31, Y+36	; 0x24
    1d6c:	00 82       	st	Z, r0
    1d6e:	8b a1       	ldd	r24, Y+35	; 0x23
    1d70:	9c a1       	ldd	r25, Y+36	; 0x24
    1d72:	01 96       	adiw	r24, 0x01	; 1
    1d74:	9c a3       	std	Y+36, r25	; 0x24
    1d76:	8b a3       	std	Y+35, r24	; 0x23
    1d78:	9f a1       	ldd	r25, Y+39	; 0x27
    1d7a:	91 50       	subi	r25, 0x01	; 1
    1d7c:	9f a3       	std	Y+39, r25	; 0x27
    1d7e:	ef a1       	ldd	r30, Y+39	; 0x27
    1d80:	ee 23       	and	r30, r30
    1d82:	51 f7       	brne	.-44     	; 0x1d58 <keypad_u8check_press+0x28>
	uint8 row; //which indicate the given output  pin
	uint8 coloumn; //which indicate the given input pin
	uint8 key_pressed_indicator; //the variable  which contain the key pressed
	
	uint8 returnval=NOT_PRESSED; //the variable contain the value which will be returned which will be key pressed or not pressed in case of no key pressed
    1d84:	8f ef       	ldi	r24, 0xFF	; 255
    1d86:	8f 87       	std	Y+15, r24	; 0x0f
	for(row=0;row<4;row++)
    1d88:	1a 8a       	std	Y+18, r1	; 0x12
    1d8a:	b6 c0       	rjmp	.+364    	; 0x1ef8 <keypad_u8check_press+0x1c8>
	{
		/*stop the work of keypad firstly*/
		DIO_write(KEYPAD_PORT,KEYPAD_FIRST_PIN,1);
    1d8c:	84 e4       	ldi	r24, 0x44	; 68
    1d8e:	60 e0       	ldi	r22, 0x00	; 0
    1d90:	41 e0       	ldi	r20, 0x01	; 1
    1d92:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
		DIO_write(KEYPAD_PORT,KEYPAD_SECOND_PIN,1);
    1d96:	84 e4       	ldi	r24, 0x44	; 68
    1d98:	61 e0       	ldi	r22, 0x01	; 1
    1d9a:	41 e0       	ldi	r20, 0x01	; 1
    1d9c:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
		DIO_write(KEYPAD_PORT,KEYPAD_THIRD_PIN,1);
    1da0:	84 e4       	ldi	r24, 0x44	; 68
    1da2:	62 e0       	ldi	r22, 0x02	; 2
    1da4:	41 e0       	ldi	r20, 0x01	; 1
    1da6:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
		DIO_write(KEYPAD_PORT,KEYPAD_FOURTH_PIN,1);
    1daa:	84 e4       	ldi	r24, 0x44	; 68
    1dac:	63 e0       	ldi	r22, 0x03	; 3
    1dae:	41 e0       	ldi	r20, 0x01	; 1
    1db0:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	a0 ea       	ldi	r26, 0xA0	; 160
    1dba:	b1 e4       	ldi	r27, 0x41	; 65
    1dbc:	8b 87       	std	Y+11, r24	; 0x0b
    1dbe:	9c 87       	std	Y+12, r25	; 0x0c
    1dc0:	ad 87       	std	Y+13, r26	; 0x0d
    1dc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	4a ef       	ldi	r20, 0xFA	; 250
    1dd2:	54 e4       	ldi	r21, 0x44	; 68
    1dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	8f 83       	std	Y+7, r24	; 0x07
    1dde:	98 87       	std	Y+8, r25	; 0x08
    1de0:	a9 87       	std	Y+9, r26	; 0x09
    1de2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1de4:	6f 81       	ldd	r22, Y+7	; 0x07
    1de6:	78 85       	ldd	r23, Y+8	; 0x08
    1de8:	89 85       	ldd	r24, Y+9	; 0x09
    1dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e8       	ldi	r20, 0x80	; 128
    1df2:	5f e3       	ldi	r21, 0x3F	; 63
    1df4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1df8:	88 23       	and	r24, r24
    1dfa:	2c f4       	brge	.+10     	; 0x1e06 <keypad_u8check_press+0xd6>
		__ticks = 1;
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9e 83       	std	Y+6, r25	; 0x06
    1e02:	8d 83       	std	Y+5, r24	; 0x05
    1e04:	3f c0       	rjmp	.+126    	; 0x1e84 <keypad_u8check_press+0x154>
	else if (__tmp > 65535)
    1e06:	6f 81       	ldd	r22, Y+7	; 0x07
    1e08:	78 85       	ldd	r23, Y+8	; 0x08
    1e0a:	89 85       	ldd	r24, Y+9	; 0x09
    1e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	3f ef       	ldi	r19, 0xFF	; 255
    1e12:	4f e7       	ldi	r20, 0x7F	; 127
    1e14:	57 e4       	ldi	r21, 0x47	; 71
    1e16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e1a:	18 16       	cp	r1, r24
    1e1c:	4c f5       	brge	.+82     	; 0x1e70 <keypad_u8check_press+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e2       	ldi	r20, 0x20	; 32
    1e2c:	51 e4       	ldi	r21, 0x41	; 65
    1e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	bc 01       	movw	r22, r24
    1e38:	cd 01       	movw	r24, r26
    1e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	9e 83       	std	Y+6, r25	; 0x06
    1e44:	8d 83       	std	Y+5, r24	; 0x05
    1e46:	0f c0       	rjmp	.+30     	; 0x1e66 <keypad_u8check_press+0x136>
    1e48:	88 ec       	ldi	r24, 0xC8	; 200
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	9c 83       	std	Y+4, r25	; 0x04
    1e4e:	8b 83       	std	Y+3, r24	; 0x03
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <keypad_u8check_press+0x124>
    1e58:	9c 83       	std	Y+4, r25	; 0x04
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	9e 83       	std	Y+6, r25	; 0x06
    1e64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e66:	8d 81       	ldd	r24, Y+5	; 0x05
    1e68:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	69 f7       	brne	.-38     	; 0x1e48 <keypad_u8check_press+0x118>
    1e6e:	14 c0       	rjmp	.+40     	; 0x1e98 <keypad_u8check_press+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e70:	6f 81       	ldd	r22, Y+7	; 0x07
    1e72:	78 85       	ldd	r23, Y+8	; 0x08
    1e74:	89 85       	ldd	r24, Y+9	; 0x09
    1e76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	9e 83       	std	Y+6, r25	; 0x06
    1e82:	8d 83       	std	Y+5, r24	; 0x05
    1e84:	8d 81       	ldd	r24, Y+5	; 0x05
    1e86:	9e 81       	ldd	r25, Y+6	; 0x06
    1e88:	9a 83       	std	Y+2, r25	; 0x02
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <keypad_u8check_press+0x160>
    1e94:	9a 83       	std	Y+2, r25	; 0x02
    1e96:	89 83       	std	Y+1, r24	; 0x01
		/*************************************/
		_delay_ms(20); 
		DIO_write(KEYPAD_PORT,row,0);//write 0 to the first pin in keypad (output pin from MC)
    1e98:	84 e4       	ldi	r24, 0x44	; 68
    1e9a:	6a 89       	ldd	r22, Y+18	; 0x12
    1e9c:	40 e0       	ldi	r20, 0x00	; 0
    1e9e:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
		
		for(coloumn=0;coloumn<4;coloumn++)
    1ea2:	19 8a       	std	Y+17, r1	; 0x11
    1ea4:	23 c0       	rjmp	.+70     	; 0x1eec <keypad_u8check_press+0x1bc>
		{
			key_pressed_indicator=DIO_u8read(KEYPAD_PORT,(coloumn+4)); // read the input pins of MC which connected to keypad
    1ea6:	89 89       	ldd	r24, Y+17	; 0x11
    1ea8:	98 2f       	mov	r25, r24
    1eaa:	9c 5f       	subi	r25, 0xFC	; 252
    1eac:	84 e4       	ldi	r24, 0x44	; 68
    1eae:	69 2f       	mov	r22, r25
    1eb0:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_u8read>
    1eb4:	88 8b       	std	Y+16, r24	; 0x10
			if(key_pressed_indicator==0)// will be 0 only if any key pressed
    1eb6:	88 89       	ldd	r24, Y+16	; 0x10
    1eb8:	88 23       	and	r24, r24
    1eba:	a9 f4       	brne	.+42     	; 0x1ee6 <keypad_u8check_press+0x1b6>
			{
				returnval=arr[row][coloumn]; //put the selected pressed key to the retrurnval
    1ebc:	8a 89       	ldd	r24, Y+18	; 0x12
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	89 89       	ldd	r24, Y+17	; 0x11
    1ec4:	48 2f       	mov	r20, r24
    1ec6:	50 e0       	ldi	r21, 0x00	; 0
    1ec8:	22 0f       	add	r18, r18
    1eca:	33 1f       	adc	r19, r19
    1ecc:	22 0f       	add	r18, r18
    1ece:	33 1f       	adc	r19, r19
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	01 96       	adiw	r24, 0x01	; 1
    1ed4:	82 0f       	add	r24, r18
    1ed6:	93 1f       	adc	r25, r19
    1ed8:	84 0f       	add	r24, r20
    1eda:	95 1f       	adc	r25, r21
    1edc:	fc 01       	movw	r30, r24
    1ede:	72 96       	adiw	r30, 0x12	; 18
    1ee0:	80 81       	ld	r24, Z
    1ee2:	8f 87       	std	Y+15, r24	; 0x0f
    1ee4:	06 c0       	rjmp	.+12     	; 0x1ef2 <keypad_u8check_press+0x1c2>
		DIO_write(KEYPAD_PORT,KEYPAD_FOURTH_PIN,1);
		/*************************************/
		_delay_ms(20); 
		DIO_write(KEYPAD_PORT,row,0);//write 0 to the first pin in keypad (output pin from MC)
		
		for(coloumn=0;coloumn<4;coloumn++)
    1ee6:	89 89       	ldd	r24, Y+17	; 0x11
    1ee8:	8f 5f       	subi	r24, 0xFF	; 255
    1eea:	89 8b       	std	Y+17, r24	; 0x11
    1eec:	89 89       	ldd	r24, Y+17	; 0x11
    1eee:	84 30       	cpi	r24, 0x04	; 4
    1ef0:	d0 f2       	brcs	.-76     	; 0x1ea6 <keypad_u8check_press+0x176>
	uint8 row; //which indicate the given output  pin
	uint8 coloumn; //which indicate the given input pin
	uint8 key_pressed_indicator; //the variable  which contain the key pressed
	
	uint8 returnval=NOT_PRESSED; //the variable contain the value which will be returned which will be key pressed or not pressed in case of no key pressed
	for(row=0;row<4;row++)
    1ef2:	8a 89       	ldd	r24, Y+18	; 0x12
    1ef4:	8f 5f       	subi	r24, 0xFF	; 255
    1ef6:	8a 8b       	std	Y+18, r24	; 0x12
    1ef8:	8a 89       	ldd	r24, Y+18	; 0x12
    1efa:	84 30       	cpi	r24, 0x04	; 4
    1efc:	08 f4       	brcc	.+2      	; 0x1f00 <keypad_u8check_press+0x1d0>
    1efe:	46 cf       	rjmp	.-372    	; 0x1d8c <keypad_u8check_press+0x5c>
				returnval=arr[row][coloumn]; //put the selected pressed key to the retrurnval
				break; // break from the loop
			}
		}
	}
	return returnval ; //return the pressed key in case of key pressed or return 0xff in case of no key pressed
    1f00:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1f02:	a7 96       	adiw	r28, 0x27	; 39
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <main>:
/********************************* setting guest password **********************************************/
uint8 Gestpass[PASS_SIZE]= GEST_PASS ;
//The The End of if admin and guest password is set

int main(void)
{
    1f14:	0f 93       	push	r16
    1f16:	1f 93       	push	r17
    1f18:	df 93       	push	r29
    1f1a:	cf 93       	push	r28
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	c2 50       	subi	r28, 0x02	; 2
    1f22:	d1 40       	sbci	r29, 0x01	; 1
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	f8 94       	cli
    1f28:	de bf       	out	0x3e, r29	; 62
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	cd bf       	out	0x3d, r28	; 61
	/*  INITIALIZE  */
	initializeSystem();
    1f2e:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <initializeSystem>

	/* Printing Welcome screen */
	printWelcomeScreen();
    1f32:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <printWelcomeScreen>
		/********************************* setting Admin password **********************************************/
		setAdminPassword();
		/********************************* setting guest password **********************************************/
		setGestPassword();
	}
	block_mode_flag = LOGIN_BLOCKED;
    1f36:	80 91 a5 02 	lds	r24, 0x02A5
    1f3a:	80 93 a8 02 	sts	0x02A8, r24


	while (1)//The start of the periodic code
	{
		key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
    1f3e:	8f ef       	ldi	r24, 0xFF	; 255
    1f40:	80 93 8c 02 	sts	0x028C, r24
		uint8 pass_tries_count=0;//stores how many times the user tried to log in to the system and failed
    1f44:	fe 01       	movw	r30, r28
    1f46:	e2 50       	subi	r30, 0x02	; 2
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	10 82       	st	Z, r1

		if ( timeout_flag==TRUE )
    1f4c:	80 91 a4 02 	lds	r24, 0x02A4
    1f50:	81 30       	cpi	r24, 0x01	; 1
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <main+0x42>
    1f54:	a7 c2       	rjmp	.+1358   	; 0x24a4 <main+0x590>
		{
			timer0_stop();//stop the timer that increase the session counter
    1f56:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <timer0_stop>
			session_counter = 0;
    1f5a:	10 92 a3 02 	sts	0x02A3, r1
    1f5e:	10 92 a2 02 	sts	0x02A2, r1
			timeout_flag=FALSE;
    1f62:	10 92 a4 02 	sts	0x02A4, r1
			login_mode=NO_MODE;
    1f66:	10 92 a7 02 	sts	0x02A7, r1
			key_pressed = NOT_PRESSED;
    1f6a:	8f ef       	ldi	r24, 0xFF	; 255
    1f6c:	80 93 8c 02 	sts	0x028C, r24
			LED_vTurnOff(GUEST_LED_PORT,GUEST_LED_PIN);//turnoff the led of the guest
    1f70:	83 e4       	ldi	r24, 0x43	; 67
    1f72:	61 e0       	ldi	r22, 0x01	; 1
    1f74:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LED_vTurnOff>
			LED_vTurnOff(ADMIN_LED_PORT,ADMIN_LED_PIN);//turnoff the led of the admin
    1f78:	83 e4       	ldi	r24, 0x43	; 67
    1f7a:	60 e0       	ldi	r22, 0x00	; 0
    1f7c:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LED_vTurnOff>
			LCD_clearscreen();
    1f80:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
			LCD_vSend_string("Session Timeout");//print session timeout message
    1f84:	80 e6       	ldi	r24, 0x60	; 96
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	e7 50       	subi	r30, 0x07	; 7
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	aa e7       	ldi	r26, 0x7A	; 122
    1f98:	b4 e4       	ldi	r27, 0x44	; 68
    1f9a:	80 83       	st	Z, r24
    1f9c:	91 83       	std	Z+1, r25	; 0x01
    1f9e:	a2 83       	std	Z+2, r26	; 0x02
    1fa0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa2:	8e 01       	movw	r16, r28
    1fa4:	0b 50       	subi	r16, 0x0B	; 11
    1fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa8:	fe 01       	movw	r30, r28
    1faa:	e7 50       	subi	r30, 0x07	; 7
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	60 81       	ld	r22, Z
    1fb0:	71 81       	ldd	r23, Z+1	; 0x01
    1fb2:	82 81       	ldd	r24, Z+2	; 0x02
    1fb4:	93 81       	ldd	r25, Z+3	; 0x03
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	4a ef       	ldi	r20, 0xFA	; 250
    1fbc:	54 e4       	ldi	r21, 0x44	; 68
    1fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	f8 01       	movw	r30, r16
    1fc8:	80 83       	st	Z, r24
    1fca:	91 83       	std	Z+1, r25	; 0x01
    1fcc:	a2 83       	std	Z+2, r26	; 0x02
    1fce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	eb 50       	subi	r30, 0x0B	; 11
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	60 81       	ld	r22, Z
    1fd8:	71 81       	ldd	r23, Z+1	; 0x01
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	93 81       	ldd	r25, Z+3	; 0x03
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e8       	ldi	r20, 0x80	; 128
    1fe4:	5f e3       	ldi	r21, 0x3F	; 63
    1fe6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fea:	88 23       	and	r24, r24
    1fec:	44 f4       	brge	.+16     	; 0x1ffe <main+0xea>
		__ticks = 1;
    1fee:	fe 01       	movw	r30, r28
    1ff0:	ed 50       	subi	r30, 0x0D	; 13
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	91 83       	std	Z+1, r25	; 0x01
    1ffa:	80 83       	st	Z, r24
    1ffc:	64 c0       	rjmp	.+200    	; 0x20c6 <main+0x1b2>
	else if (__tmp > 65535)
    1ffe:	fe 01       	movw	r30, r28
    2000:	eb 50       	subi	r30, 0x0B	; 11
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	60 81       	ld	r22, Z
    2006:	71 81       	ldd	r23, Z+1	; 0x01
    2008:	82 81       	ldd	r24, Z+2	; 0x02
    200a:	93 81       	ldd	r25, Z+3	; 0x03
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	3f ef       	ldi	r19, 0xFF	; 255
    2010:	4f e7       	ldi	r20, 0x7F	; 127
    2012:	57 e4       	ldi	r21, 0x47	; 71
    2014:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2018:	18 16       	cp	r1, r24
    201a:	0c f0       	brlt	.+2      	; 0x201e <main+0x10a>
    201c:	43 c0       	rjmp	.+134    	; 0x20a4 <main+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201e:	fe 01       	movw	r30, r28
    2020:	e7 50       	subi	r30, 0x07	; 7
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	60 81       	ld	r22, Z
    2026:	71 81       	ldd	r23, Z+1	; 0x01
    2028:	82 81       	ldd	r24, Z+2	; 0x02
    202a:	93 81       	ldd	r25, Z+3	; 0x03
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e2       	ldi	r20, 0x20	; 32
    2032:	51 e4       	ldi	r21, 0x41	; 65
    2034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	8e 01       	movw	r16, r28
    203e:	0d 50       	subi	r16, 0x0D	; 13
    2040:	1f 4f       	sbci	r17, 0xFF	; 255
    2042:	bc 01       	movw	r22, r24
    2044:	cd 01       	movw	r24, r26
    2046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	f8 01       	movw	r30, r16
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	80 83       	st	Z, r24
    2054:	1f c0       	rjmp	.+62     	; 0x2094 <main+0x180>
    2056:	fe 01       	movw	r30, r28
    2058:	ef 50       	subi	r30, 0x0F	; 15
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	88 ec       	ldi	r24, 0xC8	; 200
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	91 83       	std	Z+1, r25	; 0x01
    2062:	80 83       	st	Z, r24
    2064:	fe 01       	movw	r30, r28
    2066:	ef 50       	subi	r30, 0x0F	; 15
    2068:	ff 4f       	sbci	r31, 0xFF	; 255
    206a:	80 81       	ld	r24, Z
    206c:	91 81       	ldd	r25, Z+1	; 0x01
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <main+0x15a>
    2072:	fe 01       	movw	r30, r28
    2074:	ef 50       	subi	r30, 0x0F	; 15
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	91 83       	std	Z+1, r25	; 0x01
    207a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207c:	de 01       	movw	r26, r28
    207e:	ad 50       	subi	r26, 0x0D	; 13
    2080:	bf 4f       	sbci	r27, 0xFF	; 255
    2082:	fe 01       	movw	r30, r28
    2084:	ed 50       	subi	r30, 0x0D	; 13
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	80 81       	ld	r24, Z
    208a:	91 81       	ldd	r25, Z+1	; 0x01
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	11 96       	adiw	r26, 0x01	; 1
    2090:	9c 93       	st	X, r25
    2092:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2094:	fe 01       	movw	r30, r28
    2096:	ed 50       	subi	r30, 0x0D	; 13
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	80 81       	ld	r24, Z
    209c:	91 81       	ldd	r25, Z+1	; 0x01
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	d1 f6       	brne	.-76     	; 0x2056 <main+0x142>
    20a2:	00 c2       	rjmp	.+1024   	; 0x24a4 <main+0x590>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a4:	8e 01       	movw	r16, r28
    20a6:	0d 50       	subi	r16, 0x0D	; 13
    20a8:	1f 4f       	sbci	r17, 0xFF	; 255
    20aa:	fe 01       	movw	r30, r28
    20ac:	eb 50       	subi	r30, 0x0B	; 11
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	60 81       	ld	r22, Z
    20b2:	71 81       	ldd	r23, Z+1	; 0x01
    20b4:	82 81       	ldd	r24, Z+2	; 0x02
    20b6:	93 81       	ldd	r25, Z+3	; 0x03
    20b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	f8 01       	movw	r30, r16
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	80 83       	st	Z, r24
    20c6:	de 01       	movw	r26, r28
    20c8:	a1 51       	subi	r26, 0x11	; 17
    20ca:	bf 4f       	sbci	r27, 0xFF	; 255
    20cc:	fe 01       	movw	r30, r28
    20ce:	ed 50       	subi	r30, 0x0D	; 13
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	80 81       	ld	r24, Z
    20d4:	91 81       	ldd	r25, Z+1	; 0x01
    20d6:	11 96       	adiw	r26, 0x01	; 1
    20d8:	9c 93       	st	X, r25
    20da:	8e 93       	st	-X, r24
    20dc:	fe 01       	movw	r30, r28
    20de:	e1 51       	subi	r30, 0x11	; 17
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	80 81       	ld	r24, Z
    20e4:	91 81       	ldd	r25, Z+1	; 0x01
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <main+0x1d2>
    20ea:	fe 01       	movw	r30, r28
    20ec:	e1 51       	subi	r30, 0x11	; 17
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	91 83       	std	Z+1, r25	; 0x01
    20f2:	80 83       	st	Z, r24
    20f4:	d7 c1       	rjmp	.+942    	; 0x24a4 <main+0x590>
			_delay_ms(1000);
		}
		while (login_mode==NO_MODE)
		{
			if(block_mode_flag==TRUE)//if the login process was blocked wait till the The End of the block period
    20f6:	80 91 a8 02 	lds	r24, 0x02A8
    20fa:	81 30       	cpi	r24, 0x01	; 1
    20fc:	09 f0       	breq	.+2      	; 0x2100 <main+0x1ec>
    20fe:	d1 c0       	rjmp	.+418    	; 0x22a2 <main+0x38e>
			{
				LCD_clearscreen();
    2100:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
				LCD_vSend_string("Login blocked");
    2104:	80 e7       	ldi	r24, 0x70	; 112
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
				LCD_movecursor(2,1);
    210c:	82 e0       	ldi	r24, 0x02	; 2
    210e:	61 e0       	ldi	r22, 0x01	; 1
    2110:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_movecursor>
				LCD_vSend_string("wait 20 seconds");
    2114:	8e e7       	ldi	r24, 0x7E	; 126
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
				LED_vTurnOn(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn on the led of Blocked
    211c:	83 e4       	ldi	r24, 0x43	; 67
    211e:	62 e0       	ldi	r22, 0x02	; 2
    2120:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <LED_vTurnOn>
    2124:	fe 01       	movw	r30, r28
    2126:	e5 51       	subi	r30, 0x15	; 21
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e4       	ldi	r25, 0x40	; 64
    212e:	ac e9       	ldi	r26, 0x9C	; 156
    2130:	b6 e4       	ldi	r27, 0x46	; 70
    2132:	80 83       	st	Z, r24
    2134:	91 83       	std	Z+1, r25	; 0x01
    2136:	a2 83       	std	Z+2, r26	; 0x02
    2138:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213a:	8e 01       	movw	r16, r28
    213c:	09 51       	subi	r16, 0x19	; 25
    213e:	1f 4f       	sbci	r17, 0xFF	; 255
    2140:	fe 01       	movw	r30, r28
    2142:	e5 51       	subi	r30, 0x15	; 21
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	60 81       	ld	r22, Z
    2148:	71 81       	ldd	r23, Z+1	; 0x01
    214a:	82 81       	ldd	r24, Z+2	; 0x02
    214c:	93 81       	ldd	r25, Z+3	; 0x03
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	4a ef       	ldi	r20, 0xFA	; 250
    2154:	54 e4       	ldi	r21, 0x44	; 68
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	f8 01       	movw	r30, r16
    2160:	80 83       	st	Z, r24
    2162:	91 83       	std	Z+1, r25	; 0x01
    2164:	a2 83       	std	Z+2, r26	; 0x02
    2166:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2168:	fe 01       	movw	r30, r28
    216a:	e9 51       	subi	r30, 0x19	; 25
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	60 81       	ld	r22, Z
    2170:	71 81       	ldd	r23, Z+1	; 0x01
    2172:	82 81       	ldd	r24, Z+2	; 0x02
    2174:	93 81       	ldd	r25, Z+3	; 0x03
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	40 e8       	ldi	r20, 0x80	; 128
    217c:	5f e3       	ldi	r21, 0x3F	; 63
    217e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2182:	88 23       	and	r24, r24
    2184:	44 f4       	brge	.+16     	; 0x2196 <main+0x282>
		__ticks = 1;
    2186:	fe 01       	movw	r30, r28
    2188:	eb 51       	subi	r30, 0x1B	; 27
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	91 83       	std	Z+1, r25	; 0x01
    2192:	80 83       	st	Z, r24
    2194:	64 c0       	rjmp	.+200    	; 0x225e <main+0x34a>
	else if (__tmp > 65535)
    2196:	fe 01       	movw	r30, r28
    2198:	e9 51       	subi	r30, 0x19	; 25
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	60 81       	ld	r22, Z
    219e:	71 81       	ldd	r23, Z+1	; 0x01
    21a0:	82 81       	ldd	r24, Z+2	; 0x02
    21a2:	93 81       	ldd	r25, Z+3	; 0x03
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	3f ef       	ldi	r19, 0xFF	; 255
    21a8:	4f e7       	ldi	r20, 0x7F	; 127
    21aa:	57 e4       	ldi	r21, 0x47	; 71
    21ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21b0:	18 16       	cp	r1, r24
    21b2:	0c f0       	brlt	.+2      	; 0x21b6 <main+0x2a2>
    21b4:	43 c0       	rjmp	.+134    	; 0x223c <main+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b6:	fe 01       	movw	r30, r28
    21b8:	e5 51       	subi	r30, 0x15	; 21
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	60 81       	ld	r22, Z
    21be:	71 81       	ldd	r23, Z+1	; 0x01
    21c0:	82 81       	ldd	r24, Z+2	; 0x02
    21c2:	93 81       	ldd	r25, Z+3	; 0x03
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e2       	ldi	r20, 0x20	; 32
    21ca:	51 e4       	ldi	r21, 0x41	; 65
    21cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	8e 01       	movw	r16, r28
    21d6:	0b 51       	subi	r16, 0x1B	; 27
    21d8:	1f 4f       	sbci	r17, 0xFF	; 255
    21da:	bc 01       	movw	r22, r24
    21dc:	cd 01       	movw	r24, r26
    21de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	f8 01       	movw	r30, r16
    21e8:	91 83       	std	Z+1, r25	; 0x01
    21ea:	80 83       	st	Z, r24
    21ec:	1f c0       	rjmp	.+62     	; 0x222c <main+0x318>
    21ee:	fe 01       	movw	r30, r28
    21f0:	ed 51       	subi	r30, 0x1D	; 29
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	88 ec       	ldi	r24, 0xC8	; 200
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	91 83       	std	Z+1, r25	; 0x01
    21fa:	80 83       	st	Z, r24
    21fc:	fe 01       	movw	r30, r28
    21fe:	ed 51       	subi	r30, 0x1D	; 29
    2200:	ff 4f       	sbci	r31, 0xFF	; 255
    2202:	80 81       	ld	r24, Z
    2204:	91 81       	ldd	r25, Z+1	; 0x01
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <main+0x2f2>
    220a:	fe 01       	movw	r30, r28
    220c:	ed 51       	subi	r30, 0x1D	; 29
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	91 83       	std	Z+1, r25	; 0x01
    2212:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2214:	de 01       	movw	r26, r28
    2216:	ab 51       	subi	r26, 0x1B	; 27
    2218:	bf 4f       	sbci	r27, 0xFF	; 255
    221a:	fe 01       	movw	r30, r28
    221c:	eb 51       	subi	r30, 0x1B	; 27
    221e:	ff 4f       	sbci	r31, 0xFF	; 255
    2220:	80 81       	ld	r24, Z
    2222:	91 81       	ldd	r25, Z+1	; 0x01
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	11 96       	adiw	r26, 0x01	; 1
    2228:	9c 93       	st	X, r25
    222a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222c:	fe 01       	movw	r30, r28
    222e:	eb 51       	subi	r30, 0x1B	; 27
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	80 81       	ld	r24, Z
    2234:	91 81       	ldd	r25, Z+1	; 0x01
    2236:	00 97       	sbiw	r24, 0x00	; 0
    2238:	d1 f6       	brne	.-76     	; 0x21ee <main+0x2da>
    223a:	27 c0       	rjmp	.+78     	; 0x228a <main+0x376>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223c:	8e 01       	movw	r16, r28
    223e:	0b 51       	subi	r16, 0x1B	; 27
    2240:	1f 4f       	sbci	r17, 0xFF	; 255
    2242:	fe 01       	movw	r30, r28
    2244:	e9 51       	subi	r30, 0x19	; 25
    2246:	ff 4f       	sbci	r31, 0xFF	; 255
    2248:	60 81       	ld	r22, Z
    224a:	71 81       	ldd	r23, Z+1	; 0x01
    224c:	82 81       	ldd	r24, Z+2	; 0x02
    224e:	93 81       	ldd	r25, Z+3	; 0x03
    2250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	f8 01       	movw	r30, r16
    225a:	91 83       	std	Z+1, r25	; 0x01
    225c:	80 83       	st	Z, r24
    225e:	de 01       	movw	r26, r28
    2260:	af 51       	subi	r26, 0x1F	; 31
    2262:	bf 4f       	sbci	r27, 0xFF	; 255
    2264:	fe 01       	movw	r30, r28
    2266:	eb 51       	subi	r30, 0x1B	; 27
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	80 81       	ld	r24, Z
    226c:	91 81       	ldd	r25, Z+1	; 0x01
    226e:	8d 93       	st	X+, r24
    2270:	9c 93       	st	X, r25
    2272:	fe 01       	movw	r30, r28
    2274:	ef 51       	subi	r30, 0x1F	; 31
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 81       	ld	r24, Z
    227a:	91 81       	ldd	r25, Z+1	; 0x01
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <main+0x368>
    2280:	fe 01       	movw	r30, r28
    2282:	ef 51       	subi	r30, 0x1F	; 31
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	91 83       	std	Z+1, r25	; 0x01
    2288:	80 83       	st	Z, r24
				_delay_ms(BLOCK_MODE_TIME);
				pass_tries_count = 0;
    228a:	fe 01       	movw	r30, r28
    228c:	e2 50       	subi	r30, 0x02	; 2
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	10 82       	st	Z, r1
				block_mode_flag = FALSE ;
    2292:	10 92 a8 02 	sts	0x02A8, r1
				LED_vTurnOff(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn off the led of Blocked
    2296:	83 e4       	ldi	r24, 0x43	; 67
    2298:	62 e0       	ldi	r22, 0x02	; 2
    229a:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LED_vTurnOff>
				LOGIN_BLOCKED = FALSE ;
    229e:	10 92 a5 02 	sts	0x02A5, r1
			}
			LCD_clearscreen();
    22a2:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
			LCD_vSend_string("Select mode :");
    22a6:	8e e8       	ldi	r24, 0x8E	; 142
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
			LCD_movecursor(2,1);
    22ae:	82 e0       	ldi	r24, 0x02	; 2
    22b0:	61 e0       	ldi	r22, 0x01	; 1
    22b2:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_movecursor>
			LCD_vSend_string("0:Admin 1:Guest");
    22b6:	8c e9       	ldi	r24, 0x9C	; 156
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    22be:	04 c0       	rjmp	.+8      	; 0x22c8 <main+0x3b4>
			while(key_pressed==NOT_PRESSED)
			{
				key_pressed = keypad_u8check_press();
    22c0:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <keypad_u8check_press>
    22c4:	80 93 8c 02 	sts	0x028C, r24
			}
			LCD_clearscreen();
			LCD_vSend_string("Select mode :");
			LCD_movecursor(2,1);
			LCD_vSend_string("0:Admin 1:Guest");
			while(key_pressed==NOT_PRESSED)
    22c8:	80 91 8c 02 	lds	r24, 0x028C
    22cc:	8f 3f       	cpi	r24, 0xFF	; 255
    22ce:	c1 f3       	breq	.-16     	; 0x22c0 <main+0x3ac>
			{
				key_pressed = keypad_u8check_press();
			}
			if ( key_pressed!=CHECK_ADMIN_MODE && key_pressed!=CHECK_GUEST_MODE )
    22d0:	80 91 8c 02 	lds	r24, 0x028C
    22d4:	80 33       	cpi	r24, 0x30	; 48
    22d6:	09 f4       	brne	.+2      	; 0x22da <main+0x3c6>
    22d8:	c3 c0       	rjmp	.+390    	; 0x2460 <main+0x54c>
    22da:	80 91 8c 02 	lds	r24, 0x028C
    22de:	81 33       	cpi	r24, 0x31	; 49
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <main+0x3d0>
    22e2:	be c0       	rjmp	.+380    	; 0x2460 <main+0x54c>
			{
				LCD_clearscreen();
    22e4:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
				LCD_vSend_string("Wrong input.");
    22e8:	8c ea       	ldi	r24, 0xAC	; 172
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
				key_pressed = NOT_PRESSED;
    22f0:	8f ef       	ldi	r24, 0xFF	; 255
    22f2:	80 93 8c 02 	sts	0x028C, r24
    22f6:	fe 01       	movw	r30, r28
    22f8:	e3 52       	subi	r30, 0x23	; 35
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	aa e7       	ldi	r26, 0x7A	; 122
    2302:	b4 e4       	ldi	r27, 0x44	; 68
    2304:	80 83       	st	Z, r24
    2306:	91 83       	std	Z+1, r25	; 0x01
    2308:	a2 83       	std	Z+2, r26	; 0x02
    230a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230c:	8e 01       	movw	r16, r28
    230e:	07 52       	subi	r16, 0x27	; 39
    2310:	1f 4f       	sbci	r17, 0xFF	; 255
    2312:	fe 01       	movw	r30, r28
    2314:	e3 52       	subi	r30, 0x23	; 35
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	60 81       	ld	r22, Z
    231a:	71 81       	ldd	r23, Z+1	; 0x01
    231c:	82 81       	ldd	r24, Z+2	; 0x02
    231e:	93 81       	ldd	r25, Z+3	; 0x03
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	4a ef       	ldi	r20, 0xFA	; 250
    2326:	54 e4       	ldi	r21, 0x44	; 68
    2328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	f8 01       	movw	r30, r16
    2332:	80 83       	st	Z, r24
    2334:	91 83       	std	Z+1, r25	; 0x01
    2336:	a2 83       	std	Z+2, r26	; 0x02
    2338:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    233a:	fe 01       	movw	r30, r28
    233c:	e7 52       	subi	r30, 0x27	; 39
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	60 81       	ld	r22, Z
    2342:	71 81       	ldd	r23, Z+1	; 0x01
    2344:	82 81       	ldd	r24, Z+2	; 0x02
    2346:	93 81       	ldd	r25, Z+3	; 0x03
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e8       	ldi	r20, 0x80	; 128
    234e:	5f e3       	ldi	r21, 0x3F	; 63
    2350:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2354:	88 23       	and	r24, r24
    2356:	44 f4       	brge	.+16     	; 0x2368 <main+0x454>
		__ticks = 1;
    2358:	fe 01       	movw	r30, r28
    235a:	e9 52       	subi	r30, 0x29	; 41
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	91 83       	std	Z+1, r25	; 0x01
    2364:	80 83       	st	Z, r24
    2366:	64 c0       	rjmp	.+200    	; 0x2430 <main+0x51c>
	else if (__tmp > 65535)
    2368:	fe 01       	movw	r30, r28
    236a:	e7 52       	subi	r30, 0x27	; 39
    236c:	ff 4f       	sbci	r31, 0xFF	; 255
    236e:	60 81       	ld	r22, Z
    2370:	71 81       	ldd	r23, Z+1	; 0x01
    2372:	82 81       	ldd	r24, Z+2	; 0x02
    2374:	93 81       	ldd	r25, Z+3	; 0x03
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	3f ef       	ldi	r19, 0xFF	; 255
    237a:	4f e7       	ldi	r20, 0x7F	; 127
    237c:	57 e4       	ldi	r21, 0x47	; 71
    237e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2382:	18 16       	cp	r1, r24
    2384:	0c f0       	brlt	.+2      	; 0x2388 <main+0x474>
    2386:	43 c0       	rjmp	.+134    	; 0x240e <main+0x4fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2388:	fe 01       	movw	r30, r28
    238a:	e3 52       	subi	r30, 0x23	; 35
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	60 81       	ld	r22, Z
    2390:	71 81       	ldd	r23, Z+1	; 0x01
    2392:	82 81       	ldd	r24, Z+2	; 0x02
    2394:	93 81       	ldd	r25, Z+3	; 0x03
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e2       	ldi	r20, 0x20	; 32
    239c:	51 e4       	ldi	r21, 0x41	; 65
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	8e 01       	movw	r16, r28
    23a8:	09 52       	subi	r16, 0x29	; 41
    23aa:	1f 4f       	sbci	r17, 0xFF	; 255
    23ac:	bc 01       	movw	r22, r24
    23ae:	cd 01       	movw	r24, r26
    23b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	f8 01       	movw	r30, r16
    23ba:	91 83       	std	Z+1, r25	; 0x01
    23bc:	80 83       	st	Z, r24
    23be:	1f c0       	rjmp	.+62     	; 0x23fe <main+0x4ea>
    23c0:	fe 01       	movw	r30, r28
    23c2:	eb 52       	subi	r30, 0x2B	; 43
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	88 ec       	ldi	r24, 0xC8	; 200
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	91 83       	std	Z+1, r25	; 0x01
    23cc:	80 83       	st	Z, r24
    23ce:	fe 01       	movw	r30, r28
    23d0:	eb 52       	subi	r30, 0x2B	; 43
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 81       	ld	r24, Z
    23d6:	91 81       	ldd	r25, Z+1	; 0x01
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <main+0x4c4>
    23dc:	fe 01       	movw	r30, r28
    23de:	eb 52       	subi	r30, 0x2B	; 43
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	91 83       	std	Z+1, r25	; 0x01
    23e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e6:	de 01       	movw	r26, r28
    23e8:	a9 52       	subi	r26, 0x29	; 41
    23ea:	bf 4f       	sbci	r27, 0xFF	; 255
    23ec:	fe 01       	movw	r30, r28
    23ee:	e9 52       	subi	r30, 0x29	; 41
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	80 81       	ld	r24, Z
    23f4:	91 81       	ldd	r25, Z+1	; 0x01
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	11 96       	adiw	r26, 0x01	; 1
    23fa:	9c 93       	st	X, r25
    23fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fe:	fe 01       	movw	r30, r28
    2400:	e9 52       	subi	r30, 0x29	; 41
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 81       	ld	r24, Z
    2406:	91 81       	ldd	r25, Z+1	; 0x01
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	d1 f6       	brne	.-76     	; 0x23c0 <main+0x4ac>
    240c:	4b c0       	rjmp	.+150    	; 0x24a4 <main+0x590>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240e:	8e 01       	movw	r16, r28
    2410:	09 52       	subi	r16, 0x29	; 41
    2412:	1f 4f       	sbci	r17, 0xFF	; 255
    2414:	fe 01       	movw	r30, r28
    2416:	e7 52       	subi	r30, 0x27	; 39
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	60 81       	ld	r22, Z
    241c:	71 81       	ldd	r23, Z+1	; 0x01
    241e:	82 81       	ldd	r24, Z+2	; 0x02
    2420:	93 81       	ldd	r25, Z+3	; 0x03
    2422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	f8 01       	movw	r30, r16
    242c:	91 83       	std	Z+1, r25	; 0x01
    242e:	80 83       	st	Z, r24
    2430:	de 01       	movw	r26, r28
    2432:	ad 52       	subi	r26, 0x2D	; 45
    2434:	bf 4f       	sbci	r27, 0xFF	; 255
    2436:	fe 01       	movw	r30, r28
    2438:	e9 52       	subi	r30, 0x29	; 41
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	80 81       	ld	r24, Z
    243e:	91 81       	ldd	r25, Z+1	; 0x01
    2440:	11 96       	adiw	r26, 0x01	; 1
    2442:	9c 93       	st	X, r25
    2444:	8e 93       	st	-X, r24
    2446:	fe 01       	movw	r30, r28
    2448:	ed 52       	subi	r30, 0x2D	; 45
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	80 81       	ld	r24, Z
    244e:	91 81       	ldd	r25, Z+1	; 0x01
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	f1 f7       	brne	.-4      	; 0x2450 <main+0x53c>
    2454:	fe 01       	movw	r30, r28
    2456:	ed 52       	subi	r30, 0x2D	; 45
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	91 83       	std	Z+1, r25	; 0x01
    245c:	80 83       	st	Z, r24
    245e:	22 c0       	rjmp	.+68     	; 0x24a4 <main+0x590>
				_delay_ms(1000);
				continue;//return to the loop of login #while (login_mode==NO_MODE)
			}


			switch(key_pressed)
    2460:	80 91 8c 02 	lds	r24, 0x028C
    2464:	28 2f       	mov	r18, r24
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	cf 5f       	subi	r28, 0xFF	; 255
    246a:	de 4f       	sbci	r29, 0xFE	; 254
    246c:	39 83       	std	Y+1, r19	; 0x01
    246e:	28 83       	st	Y, r18
    2470:	c1 50       	subi	r28, 0x01	; 1
    2472:	d1 40       	sbci	r29, 0x01	; 1
    2474:	cf 5f       	subi	r28, 0xFF	; 255
    2476:	de 4f       	sbci	r29, 0xFE	; 254
    2478:	88 81       	ld	r24, Y
    247a:	99 81       	ldd	r25, Y+1	; 0x01
    247c:	c1 50       	subi	r28, 0x01	; 1
    247e:	d1 40       	sbci	r29, 0x01	; 1
    2480:	80 33       	cpi	r24, 0x30	; 48
    2482:	91 05       	cpc	r25, r1
    2484:	51 f0       	breq	.+20     	; 0x249a <main+0x586>
    2486:	cf 5f       	subi	r28, 0xFF	; 255
    2488:	de 4f       	sbci	r29, 0xFE	; 254
    248a:	e8 81       	ld	r30, Y
    248c:	f9 81       	ldd	r31, Y+1	; 0x01
    248e:	c1 50       	subi	r28, 0x01	; 1
    2490:	d1 40       	sbci	r29, 0x01	; 1
    2492:	e1 33       	cpi	r30, 0x31	; 49
    2494:	f1 05       	cpc	r31, r1
    2496:	21 f0       	breq	.+8      	; 0x24a0 <main+0x58c>
    2498:	05 c0       	rjmp	.+10     	; 0x24a4 <main+0x590>
			{
			/********************************* Admin login **********************************************/
			case CHECK_ADMIN_MODE:
				AdiminLogin();
    249a:	0e 94 1b 23 	call	0x4636	; 0x4636 <AdiminLogin>
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <main+0x590>
				break;//bREAK SWITCH case
				/********************************* case Guest login **********************************************/
			case  CHECK_GUEST_MODE:

				GistLogin();
    24a0:	0e 94 19 26 	call	0x4c32	; 0x4c32 <GistLogin>
			LED_vTurnOff(ADMIN_LED_PORT,ADMIN_LED_PIN);//turnoff the led of the admin
			LCD_clearscreen();
			LCD_vSend_string("Session Timeout");//print session timeout message
			_delay_ms(1000);
		}
		while (login_mode==NO_MODE)
    24a4:	80 91 a7 02 	lds	r24, 0x02A7
    24a8:	88 23       	and	r24, r24
    24aa:	09 f4       	brne	.+2      	; 0x24ae <main+0x59a>
    24ac:	24 ce       	rjmp	.-952    	; 0x20f6 <main+0x1e2>
			}//The End of switch

		}

		/*************************************************************************************************/
		uint8 show_menu = MAIN_MENU;
    24ae:	fe 01       	movw	r30, r28
    24b0:	e3 50       	subi	r30, 0x03	; 3
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	80 83       	st	Z, r24
    24b8:	0c 94 ae 1e 	jmp	0x3d5c	; 0x3d5c <main+0x1e48>


		while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
		{
			key_pressed = NOT_PRESSED;//Set the key pressed by the user to its default value
    24bc:	8f ef       	ldi	r24, 0xFF	; 255
    24be:	80 93 8c 02 	sts	0x028C, r24
			switch (show_menu)
    24c2:	fe 01       	movw	r30, r28
    24c4:	e3 50       	subi	r30, 0x03	; 3
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	80 81       	ld	r24, Z
    24ca:	28 2f       	mov	r18, r24
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	c1 50       	subi	r28, 0x01	; 1
    24d0:	df 4f       	sbci	r29, 0xFF	; 255
    24d2:	39 83       	std	Y+1, r19	; 0x01
    24d4:	28 83       	st	Y, r18
    24d6:	cf 5f       	subi	r28, 0xFF	; 255
    24d8:	d0 40       	sbci	r29, 0x00	; 0
    24da:	c1 50       	subi	r28, 0x01	; 1
    24dc:	df 4f       	sbci	r29, 0xFF	; 255
    24de:	88 81       	ld	r24, Y
    24e0:	99 81       	ldd	r25, Y+1	; 0x01
    24e2:	cf 5f       	subi	r28, 0xFF	; 255
    24e4:	d0 40       	sbci	r29, 0x00	; 0
    24e6:	87 30       	cpi	r24, 0x07	; 7
    24e8:	91 05       	cpc	r25, r1
    24ea:	11 f4       	brne	.+4      	; 0x24f0 <main+0x5dc>
    24ec:	0c 94 4f 1a 	jmp	0x349e	; 0x349e <main+0x158a>
    24f0:	c1 50       	subi	r28, 0x01	; 1
    24f2:	df 4f       	sbci	r29, 0xFF	; 255
    24f4:	e8 81       	ld	r30, Y
    24f6:	f9 81       	ldd	r31, Y+1	; 0x01
    24f8:	cf 5f       	subi	r28, 0xFF	; 255
    24fa:	d0 40       	sbci	r29, 0x00	; 0
    24fc:	e8 30       	cpi	r30, 0x08	; 8
    24fe:	f1 05       	cpc	r31, r1
    2500:	0c f0       	brlt	.+2      	; 0x2504 <main+0x5f0>
    2502:	3f c0       	rjmp	.+126    	; 0x2582 <main+0x66e>
    2504:	c1 50       	subi	r28, 0x01	; 1
    2506:	df 4f       	sbci	r29, 0xFF	; 255
    2508:	28 81       	ld	r18, Y
    250a:	39 81       	ldd	r19, Y+1	; 0x01
    250c:	cf 5f       	subi	r28, 0xFF	; 255
    250e:	d0 40       	sbci	r29, 0x00	; 0
    2510:	23 30       	cpi	r18, 0x03	; 3
    2512:	31 05       	cpc	r19, r1
    2514:	09 f4       	brne	.+2      	; 0x2518 <main+0x604>
    2516:	8e c7       	rjmp	.+3868   	; 0x3434 <main+0x1520>
    2518:	c1 50       	subi	r28, 0x01	; 1
    251a:	df 4f       	sbci	r29, 0xFF	; 255
    251c:	88 81       	ld	r24, Y
    251e:	99 81       	ldd	r25, Y+1	; 0x01
    2520:	cf 5f       	subi	r28, 0xFF	; 255
    2522:	d0 40       	sbci	r29, 0x00	; 0
    2524:	84 30       	cpi	r24, 0x04	; 4
    2526:	91 05       	cpc	r25, r1
    2528:	b4 f4       	brge	.+44     	; 0x2556 <main+0x642>
    252a:	c1 50       	subi	r28, 0x01	; 1
    252c:	df 4f       	sbci	r29, 0xFF	; 255
    252e:	e8 81       	ld	r30, Y
    2530:	f9 81       	ldd	r31, Y+1	; 0x01
    2532:	cf 5f       	subi	r28, 0xFF	; 255
    2534:	d0 40       	sbci	r29, 0x00	; 0
    2536:	e1 30       	cpi	r30, 0x01	; 1
    2538:	f1 05       	cpc	r31, r1
    253a:	09 f4       	brne	.+2      	; 0x253e <main+0x62a>
    253c:	6b c0       	rjmp	.+214    	; 0x2614 <main+0x700>
    253e:	c1 50       	subi	r28, 0x01	; 1
    2540:	df 4f       	sbci	r29, 0xFF	; 255
    2542:	28 81       	ld	r18, Y
    2544:	39 81       	ldd	r19, Y+1	; 0x01
    2546:	cf 5f       	subi	r28, 0xFF	; 255
    2548:	d0 40       	sbci	r29, 0x00	; 0
    254a:	22 30       	cpi	r18, 0x02	; 2
    254c:	31 05       	cpc	r19, r1
    254e:	09 f4       	brne	.+2      	; 0x2552 <main+0x63e>
    2550:	35 c2       	rjmp	.+1130   	; 0x29bc <main+0xaa8>
    2552:	0c 94 ae 1e 	jmp	0x3d5c	; 0x3d5c <main+0x1e48>
    2556:	c1 50       	subi	r28, 0x01	; 1
    2558:	df 4f       	sbci	r29, 0xFF	; 255
    255a:	88 81       	ld	r24, Y
    255c:	99 81       	ldd	r25, Y+1	; 0x01
    255e:	cf 5f       	subi	r28, 0xFF	; 255
    2560:	d0 40       	sbci	r29, 0x00	; 0
    2562:	85 30       	cpi	r24, 0x05	; 5
    2564:	91 05       	cpc	r25, r1
    2566:	09 f4       	brne	.+2      	; 0x256a <main+0x656>
    2568:	7d c7       	rjmp	.+3834   	; 0x3464 <main+0x1550>
    256a:	c1 50       	subi	r28, 0x01	; 1
    256c:	df 4f       	sbci	r29, 0xFF	; 255
    256e:	e8 81       	ld	r30, Y
    2570:	f9 81       	ldd	r31, Y+1	; 0x01
    2572:	cf 5f       	subi	r28, 0xFF	; 255
    2574:	d0 40       	sbci	r29, 0x00	; 0
    2576:	e6 30       	cpi	r30, 0x06	; 6
    2578:	f1 05       	cpc	r31, r1
    257a:	0c f0       	brlt	.+2      	; 0x257e <main+0x66a>
    257c:	7f c7       	rjmp	.+3838   	; 0x347c <main+0x1568>
    257e:	0c 94 26 1a 	jmp	0x344c	; 0x344c <main+0x1538>
    2582:	c1 50       	subi	r28, 0x01	; 1
    2584:	df 4f       	sbci	r29, 0xFF	; 255
    2586:	28 81       	ld	r18, Y
    2588:	39 81       	ldd	r19, Y+1	; 0x01
    258a:	cf 5f       	subi	r28, 0xFF	; 255
    258c:	d0 40       	sbci	r29, 0x00	; 0
    258e:	2a 30       	cpi	r18, 0x0A	; 10
    2590:	31 05       	cpc	r19, r1
    2592:	09 f4       	brne	.+2      	; 0x2596 <main+0x682>
    2594:	9c c7       	rjmp	.+3896   	; 0x34ce <main+0x15ba>
    2596:	c1 50       	subi	r28, 0x01	; 1
    2598:	df 4f       	sbci	r29, 0xFF	; 255
    259a:	88 81       	ld	r24, Y
    259c:	99 81       	ldd	r25, Y+1	; 0x01
    259e:	cf 5f       	subi	r28, 0xFF	; 255
    25a0:	d0 40       	sbci	r29, 0x00	; 0
    25a2:	8b 30       	cpi	r24, 0x0B	; 11
    25a4:	91 05       	cpc	r25, r1
    25a6:	b4 f4       	brge	.+44     	; 0x25d4 <main+0x6c0>
    25a8:	c1 50       	subi	r28, 0x01	; 1
    25aa:	df 4f       	sbci	r29, 0xFF	; 255
    25ac:	e8 81       	ld	r30, Y
    25ae:	f9 81       	ldd	r31, Y+1	; 0x01
    25b0:	cf 5f       	subi	r28, 0xFF	; 255
    25b2:	d0 40       	sbci	r29, 0x00	; 0
    25b4:	e8 30       	cpi	r30, 0x08	; 8
    25b6:	f1 05       	cpc	r31, r1
    25b8:	09 f4       	brne	.+2      	; 0x25bc <main+0x6a8>
    25ba:	88 c5       	rjmp	.+2832   	; 0x30cc <main+0x11b8>
    25bc:	c1 50       	subi	r28, 0x01	; 1
    25be:	df 4f       	sbci	r29, 0xFF	; 255
    25c0:	28 81       	ld	r18, Y
    25c2:	39 81       	ldd	r19, Y+1	; 0x01
    25c4:	cf 5f       	subi	r28, 0xFF	; 255
    25c6:	d0 40       	sbci	r29, 0x00	; 0
    25c8:	29 30       	cpi	r18, 0x09	; 9
    25ca:	31 05       	cpc	r19, r1
    25cc:	09 f4       	brne	.+2      	; 0x25d0 <main+0x6bc>
    25ce:	73 c7       	rjmp	.+3814   	; 0x34b6 <main+0x15a2>
    25d0:	0c 94 ae 1e 	jmp	0x3d5c	; 0x3d5c <main+0x1e48>
    25d4:	c1 50       	subi	r28, 0x01	; 1
    25d6:	df 4f       	sbci	r29, 0xFF	; 255
    25d8:	88 81       	ld	r24, Y
    25da:	99 81       	ldd	r25, Y+1	; 0x01
    25dc:	cf 5f       	subi	r28, 0xFF	; 255
    25de:	d0 40       	sbci	r29, 0x00	; 0
    25e0:	8c 30       	cpi	r24, 0x0C	; 12
    25e2:	91 05       	cpc	r25, r1
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <main+0x6d4>
    25e6:	5e c5       	rjmp	.+2748   	; 0x30a4 <main+0x1190>
    25e8:	c1 50       	subi	r28, 0x01	; 1
    25ea:	df 4f       	sbci	r29, 0xFF	; 255
    25ec:	e8 81       	ld	r30, Y
    25ee:	f9 81       	ldd	r31, Y+1	; 0x01
    25f0:	cf 5f       	subi	r28, 0xFF	; 255
    25f2:	d0 40       	sbci	r29, 0x00	; 0
    25f4:	ec 30       	cpi	r30, 0x0C	; 12
    25f6:	f1 05       	cpc	r31, r1
    25f8:	0c f4       	brge	.+2      	; 0x25fc <main+0x6e8>
    25fa:	a0 c3       	rjmp	.+1856   	; 0x2d3c <main+0xe28>
    25fc:	c1 50       	subi	r28, 0x01	; 1
    25fe:	df 4f       	sbci	r29, 0xFF	; 255
    2600:	28 81       	ld	r18, Y
    2602:	39 81       	ldd	r19, Y+1	; 0x01
    2604:	cf 5f       	subi	r28, 0xFF	; 255
    2606:	d0 40       	sbci	r29, 0x00	; 0
    2608:	2d 30       	cpi	r18, 0x0D	; 13
    260a:	31 05       	cpc	r19, r1
    260c:	09 f4       	brne	.+2      	; 0x2610 <main+0x6fc>
    260e:	54 c5       	rjmp	.+2728   	; 0x30b8 <main+0x11a4>
    2610:	0c 94 ae 1e 	jmp	0x3d5c	; 0x3d5c <main+0x1e48>
			{
			case MAIN_MENU:
				do
				{
					/******************** print main Menu ******************/
					LCD_clearscreen();
    2614:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
					LCD_vSend_string("1:Light ");
    2618:	89 eb       	ldi	r24, 0xB9	; 185
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>

					if(login_mode==ADMIN)//check login mode
    2620:	80 91 a7 02 	lds	r24, 0x02A7
    2624:	81 30       	cpi	r24, 0x01	; 1
    2626:	61 f4       	brne	.+24     	; 0x2640 <main+0x72c>
					{
						LCD_vSend_string("  2:Pass");
    2628:	82 ec       	ldi	r24, 0xC2	; 194
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
						LCD_movecursor(2,1);
    2630:	82 e0       	ldi	r24, 0x02	; 2
    2632:	61 e0       	ldi	r22, 0x01	; 1
    2634:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_movecursor>
						LCD_vSend_string("3:Air Cond  4:TV");//this menu options only printed if the logged in user is an admin
    2638:	8b ec       	ldi	r24, 0xCB	; 203
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
					}

					/*******************************************************/

					key_pressed = u8GetKeyPressed(login_mode);
    2640:	80 91 a7 02 	lds	r24, 0x02A7
    2644:	0e 94 76 2b 	call	0x56ec	; 0x56ec <u8GetKeyPressed>
    2648:	80 93 8c 02 	sts	0x028C, r24
    264c:	fe 01       	movw	r30, r28
    264e:	e1 53       	subi	r30, 0x31	; 49
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	a8 ec       	ldi	r26, 0xC8	; 200
    2658:	b2 e4       	ldi	r27, 0x42	; 66
    265a:	80 83       	st	Z, r24
    265c:	91 83       	std	Z+1, r25	; 0x01
    265e:	a2 83       	std	Z+2, r26	; 0x02
    2660:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2662:	8e 01       	movw	r16, r28
    2664:	05 53       	subi	r16, 0x35	; 53
    2666:	1f 4f       	sbci	r17, 0xFF	; 255
    2668:	fe 01       	movw	r30, r28
    266a:	e1 53       	subi	r30, 0x31	; 49
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	60 81       	ld	r22, Z
    2670:	71 81       	ldd	r23, Z+1	; 0x01
    2672:	82 81       	ldd	r24, Z+2	; 0x02
    2674:	93 81       	ldd	r25, Z+3	; 0x03
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	4a ef       	ldi	r20, 0xFA	; 250
    267c:	54 e4       	ldi	r21, 0x44	; 68
    267e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	f8 01       	movw	r30, r16
    2688:	80 83       	st	Z, r24
    268a:	91 83       	std	Z+1, r25	; 0x01
    268c:	a2 83       	std	Z+2, r26	; 0x02
    268e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2690:	fe 01       	movw	r30, r28
    2692:	e5 53       	subi	r30, 0x35	; 53
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	60 81       	ld	r22, Z
    2698:	71 81       	ldd	r23, Z+1	; 0x01
    269a:	82 81       	ldd	r24, Z+2	; 0x02
    269c:	93 81       	ldd	r25, Z+3	; 0x03
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e8       	ldi	r20, 0x80	; 128
    26a4:	5f e3       	ldi	r21, 0x3F	; 63
    26a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26aa:	88 23       	and	r24, r24
    26ac:	44 f4       	brge	.+16     	; 0x26be <main+0x7aa>
		__ticks = 1;
    26ae:	fe 01       	movw	r30, r28
    26b0:	e7 53       	subi	r30, 0x37	; 55
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	91 83       	std	Z+1, r25	; 0x01
    26ba:	80 83       	st	Z, r24
    26bc:	64 c0       	rjmp	.+200    	; 0x2786 <main+0x872>
	else if (__tmp > 65535)
    26be:	fe 01       	movw	r30, r28
    26c0:	e5 53       	subi	r30, 0x35	; 53
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	60 81       	ld	r22, Z
    26c6:	71 81       	ldd	r23, Z+1	; 0x01
    26c8:	82 81       	ldd	r24, Z+2	; 0x02
    26ca:	93 81       	ldd	r25, Z+3	; 0x03
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	3f ef       	ldi	r19, 0xFF	; 255
    26d0:	4f e7       	ldi	r20, 0x7F	; 127
    26d2:	57 e4       	ldi	r21, 0x47	; 71
    26d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26d8:	18 16       	cp	r1, r24
    26da:	0c f0       	brlt	.+2      	; 0x26de <main+0x7ca>
    26dc:	43 c0       	rjmp	.+134    	; 0x2764 <main+0x850>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26de:	fe 01       	movw	r30, r28
    26e0:	e1 53       	subi	r30, 0x31	; 49
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	60 81       	ld	r22, Z
    26e6:	71 81       	ldd	r23, Z+1	; 0x01
    26e8:	82 81       	ldd	r24, Z+2	; 0x02
    26ea:	93 81       	ldd	r25, Z+3	; 0x03
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e2       	ldi	r20, 0x20	; 32
    26f2:	51 e4       	ldi	r21, 0x41	; 65
    26f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	8e 01       	movw	r16, r28
    26fe:	07 53       	subi	r16, 0x37	; 55
    2700:	1f 4f       	sbci	r17, 0xFF	; 255
    2702:	bc 01       	movw	r22, r24
    2704:	cd 01       	movw	r24, r26
    2706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	f8 01       	movw	r30, r16
    2710:	91 83       	std	Z+1, r25	; 0x01
    2712:	80 83       	st	Z, r24
    2714:	1f c0       	rjmp	.+62     	; 0x2754 <main+0x840>
    2716:	fe 01       	movw	r30, r28
    2718:	e9 53       	subi	r30, 0x39	; 57
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	88 ec       	ldi	r24, 0xC8	; 200
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	80 83       	st	Z, r24
    2724:	fe 01       	movw	r30, r28
    2726:	e9 53       	subi	r30, 0x39	; 57
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	80 81       	ld	r24, Z
    272c:	91 81       	ldd	r25, Z+1	; 0x01
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	f1 f7       	brne	.-4      	; 0x272e <main+0x81a>
    2732:	fe 01       	movw	r30, r28
    2734:	e9 53       	subi	r30, 0x39	; 57
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	91 83       	std	Z+1, r25	; 0x01
    273a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273c:	de 01       	movw	r26, r28
    273e:	a7 53       	subi	r26, 0x37	; 55
    2740:	bf 4f       	sbci	r27, 0xFF	; 255
    2742:	fe 01       	movw	r30, r28
    2744:	e7 53       	subi	r30, 0x37	; 55
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	80 81       	ld	r24, Z
    274a:	91 81       	ldd	r25, Z+1	; 0x01
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	11 96       	adiw	r26, 0x01	; 1
    2750:	9c 93       	st	X, r25
    2752:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2754:	fe 01       	movw	r30, r28
    2756:	e7 53       	subi	r30, 0x37	; 55
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	80 81       	ld	r24, Z
    275c:	91 81       	ldd	r25, Z+1	; 0x01
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	d1 f6       	brne	.-76     	; 0x2716 <main+0x802>
    2762:	28 c0       	rjmp	.+80     	; 0x27b4 <main+0x8a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2764:	8e 01       	movw	r16, r28
    2766:	07 53       	subi	r16, 0x37	; 55
    2768:	1f 4f       	sbci	r17, 0xFF	; 255
    276a:	fe 01       	movw	r30, r28
    276c:	e5 53       	subi	r30, 0x35	; 53
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	60 81       	ld	r22, Z
    2772:	71 81       	ldd	r23, Z+1	; 0x01
    2774:	82 81       	ldd	r24, Z+2	; 0x02
    2776:	93 81       	ldd	r25, Z+3	; 0x03
    2778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	f8 01       	movw	r30, r16
    2782:	91 83       	std	Z+1, r25	; 0x01
    2784:	80 83       	st	Z, r24
    2786:	de 01       	movw	r26, r28
    2788:	ab 53       	subi	r26, 0x3B	; 59
    278a:	bf 4f       	sbci	r27, 0xFF	; 255
    278c:	fe 01       	movw	r30, r28
    278e:	e7 53       	subi	r30, 0x37	; 55
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	80 81       	ld	r24, Z
    2794:	91 81       	ldd	r25, Z+1	; 0x01
    2796:	11 96       	adiw	r26, 0x01	; 1
    2798:	9c 93       	st	X, r25
    279a:	8e 93       	st	-X, r24
    279c:	fe 01       	movw	r30, r28
    279e:	eb 53       	subi	r30, 0x3B	; 59
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	80 81       	ld	r24, Z
    27a4:	91 81       	ldd	r25, Z+1	; 0x01
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	f1 f7       	brne	.-4      	; 0x27a6 <main+0x892>
    27aa:	fe 01       	movw	r30, r28
    27ac:	eb 53       	subi	r30, 0x3B	; 59
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	91 83       	std	Z+1, r25	; 0x01
    27b2:	80 83       	st	Z, r24
					_delay_ms(100);

					if (key_pressed == SELECT_LIGHT_CONTROL)// key pressed is 1
    27b4:	80 91 8c 02 	lds	r24, 0x028C
    27b8:	81 33       	cpi	r24, 0x31	; 49
    27ba:	31 f4       	brne	.+12     	; 0x27c8 <main+0x8b4>
					{
						show_menu = LIGHT_CONTROL_MENU;
    27bc:	fe 01       	movw	r30, r28
    27be:	e3 50       	subi	r30, 0x03	; 3
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	82 e0       	ldi	r24, 0x02	; 2
    27c4:	80 83       	st	Z, r24
    27c6:	e9 c0       	rjmp	.+466    	; 0x299a <main+0xa86>
					}
					else if (key_pressed == SELECT_PASSWORD && login_mode == ADMIN)// key pressed is 2 and the logged in user is admin
    27c8:	80 91 8c 02 	lds	r24, 0x028C
    27cc:	82 33       	cpi	r24, 0x32	; 50
    27ce:	51 f4       	brne	.+20     	; 0x27e4 <main+0x8d0>
    27d0:	80 91 a7 02 	lds	r24, 0x02A7
    27d4:	81 30       	cpi	r24, 0x01	; 1
    27d6:	31 f4       	brne	.+12     	; 0x27e4 <main+0x8d0>
					{
						show_menu = PASSWORD_MENU;//shown to more menu
    27d8:	fe 01       	movw	r30, r28
    27da:	e3 50       	subi	r30, 0x03	; 3
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	8b e0       	ldi	r24, 0x0B	; 11
    27e0:	80 83       	st	Z, r24
    27e2:	db c0       	rjmp	.+438    	; 0x299a <main+0xa86>
					}
					else if (key_pressed == SELECT_AIR_CONDITIONING && login_mode == ADMIN)// key pressed is 3 and the logged in user is admin
    27e4:	80 91 8c 02 	lds	r24, 0x028C
    27e8:	83 33       	cpi	r24, 0x33	; 51
    27ea:	51 f4       	brne	.+20     	; 0x2800 <main+0x8ec>
    27ec:	80 91 a7 02 	lds	r24, 0x02A7
    27f0:	81 30       	cpi	r24, 0x01	; 1
    27f2:	31 f4       	brne	.+12     	; 0x2800 <main+0x8ec>
					{
						show_menu = AIRCONDITIONING_MENU;//shown to more menu
    27f4:	fe 01       	movw	r30, r28
    27f6:	e3 50       	subi	r30, 0x03	; 3
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	88 e0       	ldi	r24, 0x08	; 8
    27fc:	80 83       	st	Z, r24
    27fe:	cd c0       	rjmp	.+410    	; 0x299a <main+0xa86>
					}
					else if (key_pressed == SELECT_TV && login_mode == ADMIN)// key pressed is 4 and the logged in user is admin
    2800:	80 91 8c 02 	lds	r24, 0x028C
    2804:	84 33       	cpi	r24, 0x34	; 52
    2806:	51 f4       	brne	.+20     	; 0x281c <main+0x908>
    2808:	80 91 a7 02 	lds	r24, 0x02A7
    280c:	81 30       	cpi	r24, 0x01	; 1
    280e:	31 f4       	brne	.+12     	; 0x281c <main+0x908>
					{
						show_menu = TV_MENU;
    2810:	fe 01       	movw	r30, r28
    2812:	e3 50       	subi	r30, 0x03	; 3
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	87 e0       	ldi	r24, 0x07	; 7
    2818:	80 83       	st	Z, r24
    281a:	bf c0       	rjmp	.+382    	; 0x299a <main+0xa86>
					}

					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
    281c:	80 91 8c 02 	lds	r24, 0x028C
    2820:	8f 3f       	cpi	r24, 0xFF	; 255
    2822:	09 f4       	brne	.+2      	; 0x2826 <main+0x912>
    2824:	ba c0       	rjmp	.+372    	; 0x299a <main+0xa86>
					{
						LCD_clearscreen();
    2826:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
						LCD_vSend_string("Wrong input");
    282a:	8c ed       	ldi	r24, 0xDC	; 220
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    2832:	fe 01       	movw	r30, r28
    2834:	ef 53       	subi	r30, 0x3F	; 63
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	aa ef       	ldi	r26, 0xFA	; 250
    283e:	b3 e4       	ldi	r27, 0x43	; 67
    2840:	80 83       	st	Z, r24
    2842:	91 83       	std	Z+1, r25	; 0x01
    2844:	a2 83       	std	Z+2, r26	; 0x02
    2846:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2848:	8e 01       	movw	r16, r28
    284a:	03 54       	subi	r16, 0x43	; 67
    284c:	1f 4f       	sbci	r17, 0xFF	; 255
    284e:	fe 01       	movw	r30, r28
    2850:	ef 53       	subi	r30, 0x3F	; 63
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	60 81       	ld	r22, Z
    2856:	71 81       	ldd	r23, Z+1	; 0x01
    2858:	82 81       	ldd	r24, Z+2	; 0x02
    285a:	93 81       	ldd	r25, Z+3	; 0x03
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	4a ef       	ldi	r20, 0xFA	; 250
    2862:	54 e4       	ldi	r21, 0x44	; 68
    2864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	f8 01       	movw	r30, r16
    286e:	80 83       	st	Z, r24
    2870:	91 83       	std	Z+1, r25	; 0x01
    2872:	a2 83       	std	Z+2, r26	; 0x02
    2874:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2876:	fe 01       	movw	r30, r28
    2878:	e3 54       	subi	r30, 0x43	; 67
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	60 81       	ld	r22, Z
    287e:	71 81       	ldd	r23, Z+1	; 0x01
    2880:	82 81       	ldd	r24, Z+2	; 0x02
    2882:	93 81       	ldd	r25, Z+3	; 0x03
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e8       	ldi	r20, 0x80	; 128
    288a:	5f e3       	ldi	r21, 0x3F	; 63
    288c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2890:	88 23       	and	r24, r24
    2892:	44 f4       	brge	.+16     	; 0x28a4 <main+0x990>
		__ticks = 1;
    2894:	fe 01       	movw	r30, r28
    2896:	e5 54       	subi	r30, 0x45	; 69
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	91 83       	std	Z+1, r25	; 0x01
    28a0:	80 83       	st	Z, r24
    28a2:	64 c0       	rjmp	.+200    	; 0x296c <main+0xa58>
	else if (__tmp > 65535)
    28a4:	fe 01       	movw	r30, r28
    28a6:	e3 54       	subi	r30, 0x43	; 67
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	60 81       	ld	r22, Z
    28ac:	71 81       	ldd	r23, Z+1	; 0x01
    28ae:	82 81       	ldd	r24, Z+2	; 0x02
    28b0:	93 81       	ldd	r25, Z+3	; 0x03
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	3f ef       	ldi	r19, 0xFF	; 255
    28b6:	4f e7       	ldi	r20, 0x7F	; 127
    28b8:	57 e4       	ldi	r21, 0x47	; 71
    28ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28be:	18 16       	cp	r1, r24
    28c0:	0c f0       	brlt	.+2      	; 0x28c4 <main+0x9b0>
    28c2:	43 c0       	rjmp	.+134    	; 0x294a <main+0xa36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c4:	fe 01       	movw	r30, r28
    28c6:	ef 53       	subi	r30, 0x3F	; 63
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	60 81       	ld	r22, Z
    28cc:	71 81       	ldd	r23, Z+1	; 0x01
    28ce:	82 81       	ldd	r24, Z+2	; 0x02
    28d0:	93 81       	ldd	r25, Z+3	; 0x03
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e2       	ldi	r20, 0x20	; 32
    28d8:	51 e4       	ldi	r21, 0x41	; 65
    28da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	8e 01       	movw	r16, r28
    28e4:	05 54       	subi	r16, 0x45	; 69
    28e6:	1f 4f       	sbci	r17, 0xFF	; 255
    28e8:	bc 01       	movw	r22, r24
    28ea:	cd 01       	movw	r24, r26
    28ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	f8 01       	movw	r30, r16
    28f6:	91 83       	std	Z+1, r25	; 0x01
    28f8:	80 83       	st	Z, r24
    28fa:	1f c0       	rjmp	.+62     	; 0x293a <main+0xa26>
    28fc:	fe 01       	movw	r30, r28
    28fe:	e7 54       	subi	r30, 0x47	; 71
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	88 ec       	ldi	r24, 0xC8	; 200
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	91 83       	std	Z+1, r25	; 0x01
    2908:	80 83       	st	Z, r24
    290a:	fe 01       	movw	r30, r28
    290c:	e7 54       	subi	r30, 0x47	; 71
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	80 81       	ld	r24, Z
    2912:	91 81       	ldd	r25, Z+1	; 0x01
    2914:	01 97       	sbiw	r24, 0x01	; 1
    2916:	f1 f7       	brne	.-4      	; 0x2914 <main+0xa00>
    2918:	fe 01       	movw	r30, r28
    291a:	e7 54       	subi	r30, 0x47	; 71
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	91 83       	std	Z+1, r25	; 0x01
    2920:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2922:	de 01       	movw	r26, r28
    2924:	a5 54       	subi	r26, 0x45	; 69
    2926:	bf 4f       	sbci	r27, 0xFF	; 255
    2928:	fe 01       	movw	r30, r28
    292a:	e5 54       	subi	r30, 0x45	; 69
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	80 81       	ld	r24, Z
    2930:	91 81       	ldd	r25, Z+1	; 0x01
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	11 96       	adiw	r26, 0x01	; 1
    2936:	9c 93       	st	X, r25
    2938:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293a:	fe 01       	movw	r30, r28
    293c:	e5 54       	subi	r30, 0x45	; 69
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	80 81       	ld	r24, Z
    2942:	91 81       	ldd	r25, Z+1	; 0x01
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	d1 f6       	brne	.-76     	; 0x28fc <main+0x9e8>
    2948:	28 c0       	rjmp	.+80     	; 0x299a <main+0xa86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294a:	8e 01       	movw	r16, r28
    294c:	05 54       	subi	r16, 0x45	; 69
    294e:	1f 4f       	sbci	r17, 0xFF	; 255
    2950:	fe 01       	movw	r30, r28
    2952:	e3 54       	subi	r30, 0x43	; 67
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	60 81       	ld	r22, Z
    2958:	71 81       	ldd	r23, Z+1	; 0x01
    295a:	82 81       	ldd	r24, Z+2	; 0x02
    295c:	93 81       	ldd	r25, Z+3	; 0x03
    295e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	f8 01       	movw	r30, r16
    2968:	91 83       	std	Z+1, r25	; 0x01
    296a:	80 83       	st	Z, r24
    296c:	de 01       	movw	r26, r28
    296e:	a9 54       	subi	r26, 0x49	; 73
    2970:	bf 4f       	sbci	r27, 0xFF	; 255
    2972:	fe 01       	movw	r30, r28
    2974:	e5 54       	subi	r30, 0x45	; 69
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	80 81       	ld	r24, Z
    297a:	91 81       	ldd	r25, Z+1	; 0x01
    297c:	11 96       	adiw	r26, 0x01	; 1
    297e:	9c 93       	st	X, r25
    2980:	8e 93       	st	-X, r24
    2982:	fe 01       	movw	r30, r28
    2984:	e9 54       	subi	r30, 0x49	; 73
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	80 81       	ld	r24, Z
    298a:	91 81       	ldd	r25, Z+1	; 0x01
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	f1 f7       	brne	.-4      	; 0x298c <main+0xa78>
    2990:	fe 01       	movw	r30, r28
    2992:	e9 54       	subi	r30, 0x49	; 73
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	91 83       	std	Z+1, r25	; 0x01
    2998:	80 83       	st	Z, r24
						_delay_ms(500);
					}
				} while ( ((key_pressed < '1') || (key_pressed > '4') ) && (timeout_flag == FALSE) );//break the loop in case of valid key or time is out
    299a:	80 91 8c 02 	lds	r24, 0x028C
    299e:	81 33       	cpi	r24, 0x31	; 49
    29a0:	30 f0       	brcs	.+12     	; 0x29ae <main+0xa9a>
    29a2:	80 91 8c 02 	lds	r24, 0x028C
    29a6:	85 33       	cpi	r24, 0x35	; 53
    29a8:	10 f4       	brcc	.+4      	; 0x29ae <main+0xa9a>
    29aa:	0c 94 ae 1e 	jmp	0x3d5c	; 0x3d5c <main+0x1e48>
    29ae:	80 91 a4 02 	lds	r24, 0x02A4
    29b2:	88 23       	and	r24, r24
    29b4:	09 f4       	brne	.+2      	; 0x29b8 <main+0xaa4>
    29b6:	2e ce       	rjmp	.-932    	; 0x2614 <main+0x700>
    29b8:	0c 94 ae 1e 	jmp	0x3d5c	; 0x3d5c <main+0x1e48>

			case LIGHT_CONTROL_MENU:
				do
				{
					/******************** print more Menu ******************/
					LCD_clearscreen();
    29bc:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
					LCD_vSend_string("1:Room1 2:Room2");
    29c0:	88 ee       	ldi	r24, 0xE8	; 232
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
					LCD_movecursor(2,1);
    29c8:	82 e0       	ldi	r24, 0x02	; 2
    29ca:	61 e0       	ldi	r22, 0x01	; 1
    29cc:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_movecursor>
					LCD_vSend_string("3:Room3 4:Room4");
    29d0:	88 ef       	ldi	r24, 0xF8	; 248
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
					/*******************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
    29d8:	80 91 a7 02 	lds	r24, 0x02A7
    29dc:	0e 94 76 2b 	call	0x56ec	; 0x56ec <u8GetKeyPressed>
    29e0:	80 93 8c 02 	sts	0x028C, r24
    29e4:	fe 01       	movw	r30, r28
    29e6:	ed 54       	subi	r30, 0x4D	; 77
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	a8 ec       	ldi	r26, 0xC8	; 200
    29f0:	b2 e4       	ldi	r27, 0x42	; 66
    29f2:	80 83       	st	Z, r24
    29f4:	91 83       	std	Z+1, r25	; 0x01
    29f6:	a2 83       	std	Z+2, r26	; 0x02
    29f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29fa:	8e 01       	movw	r16, r28
    29fc:	01 55       	subi	r16, 0x51	; 81
    29fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2a00:	fe 01       	movw	r30, r28
    2a02:	ed 54       	subi	r30, 0x4D	; 77
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	60 81       	ld	r22, Z
    2a08:	71 81       	ldd	r23, Z+1	; 0x01
    2a0a:	82 81       	ldd	r24, Z+2	; 0x02
    2a0c:	93 81       	ldd	r25, Z+3	; 0x03
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	4a ef       	ldi	r20, 0xFA	; 250
    2a14:	54 e4       	ldi	r21, 0x44	; 68
    2a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	f8 01       	movw	r30, r16
    2a20:	80 83       	st	Z, r24
    2a22:	91 83       	std	Z+1, r25	; 0x01
    2a24:	a2 83       	std	Z+2, r26	; 0x02
    2a26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a28:	fe 01       	movw	r30, r28
    2a2a:	e1 55       	subi	r30, 0x51	; 81
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	60 81       	ld	r22, Z
    2a30:	71 81       	ldd	r23, Z+1	; 0x01
    2a32:	82 81       	ldd	r24, Z+2	; 0x02
    2a34:	93 81       	ldd	r25, Z+3	; 0x03
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	40 e8       	ldi	r20, 0x80	; 128
    2a3c:	5f e3       	ldi	r21, 0x3F	; 63
    2a3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a42:	88 23       	and	r24, r24
    2a44:	44 f4       	brge	.+16     	; 0x2a56 <main+0xb42>
		__ticks = 1;
    2a46:	fe 01       	movw	r30, r28
    2a48:	e3 55       	subi	r30, 0x53	; 83
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	91 83       	std	Z+1, r25	; 0x01
    2a52:	80 83       	st	Z, r24
    2a54:	64 c0       	rjmp	.+200    	; 0x2b1e <main+0xc0a>
	else if (__tmp > 65535)
    2a56:	fe 01       	movw	r30, r28
    2a58:	e1 55       	subi	r30, 0x51	; 81
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	60 81       	ld	r22, Z
    2a5e:	71 81       	ldd	r23, Z+1	; 0x01
    2a60:	82 81       	ldd	r24, Z+2	; 0x02
    2a62:	93 81       	ldd	r25, Z+3	; 0x03
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	3f ef       	ldi	r19, 0xFF	; 255
    2a68:	4f e7       	ldi	r20, 0x7F	; 127
    2a6a:	57 e4       	ldi	r21, 0x47	; 71
    2a6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a70:	18 16       	cp	r1, r24
    2a72:	0c f0       	brlt	.+2      	; 0x2a76 <main+0xb62>
    2a74:	43 c0       	rjmp	.+134    	; 0x2afc <main+0xbe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a76:	fe 01       	movw	r30, r28
    2a78:	ed 54       	subi	r30, 0x4D	; 77
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	60 81       	ld	r22, Z
    2a7e:	71 81       	ldd	r23, Z+1	; 0x01
    2a80:	82 81       	ldd	r24, Z+2	; 0x02
    2a82:	93 81       	ldd	r25, Z+3	; 0x03
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	40 e2       	ldi	r20, 0x20	; 32
    2a8a:	51 e4       	ldi	r21, 0x41	; 65
    2a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	8e 01       	movw	r16, r28
    2a96:	03 55       	subi	r16, 0x53	; 83
    2a98:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9a:	bc 01       	movw	r22, r24
    2a9c:	cd 01       	movw	r24, r26
    2a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	f8 01       	movw	r30, r16
    2aa8:	91 83       	std	Z+1, r25	; 0x01
    2aaa:	80 83       	st	Z, r24
    2aac:	1f c0       	rjmp	.+62     	; 0x2aec <main+0xbd8>
    2aae:	fe 01       	movw	r30, r28
    2ab0:	e5 55       	subi	r30, 0x55	; 85
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	88 ec       	ldi	r24, 0xC8	; 200
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	91 83       	std	Z+1, r25	; 0x01
    2aba:	80 83       	st	Z, r24
    2abc:	fe 01       	movw	r30, r28
    2abe:	e5 55       	subi	r30, 0x55	; 85
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	80 81       	ld	r24, Z
    2ac4:	91 81       	ldd	r25, Z+1	; 0x01
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	f1 f7       	brne	.-4      	; 0x2ac6 <main+0xbb2>
    2aca:	fe 01       	movw	r30, r28
    2acc:	e5 55       	subi	r30, 0x55	; 85
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	91 83       	std	Z+1, r25	; 0x01
    2ad2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad4:	de 01       	movw	r26, r28
    2ad6:	a3 55       	subi	r26, 0x53	; 83
    2ad8:	bf 4f       	sbci	r27, 0xFF	; 255
    2ada:	fe 01       	movw	r30, r28
    2adc:	e3 55       	subi	r30, 0x53	; 83
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	80 81       	ld	r24, Z
    2ae2:	91 81       	ldd	r25, Z+1	; 0x01
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	11 96       	adiw	r26, 0x01	; 1
    2ae8:	9c 93       	st	X, r25
    2aea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aec:	fe 01       	movw	r30, r28
    2aee:	e3 55       	subi	r30, 0x53	; 83
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	80 81       	ld	r24, Z
    2af4:	91 81       	ldd	r25, Z+1	; 0x01
    2af6:	00 97       	sbiw	r24, 0x00	; 0
    2af8:	d1 f6       	brne	.-76     	; 0x2aae <main+0xb9a>
    2afa:	28 c0       	rjmp	.+80     	; 0x2b4c <main+0xc38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afc:	8e 01       	movw	r16, r28
    2afe:	03 55       	subi	r16, 0x53	; 83
    2b00:	1f 4f       	sbci	r17, 0xFF	; 255
    2b02:	fe 01       	movw	r30, r28
    2b04:	e1 55       	subi	r30, 0x51	; 81
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	60 81       	ld	r22, Z
    2b0a:	71 81       	ldd	r23, Z+1	; 0x01
    2b0c:	82 81       	ldd	r24, Z+2	; 0x02
    2b0e:	93 81       	ldd	r25, Z+3	; 0x03
    2b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	f8 01       	movw	r30, r16
    2b1a:	91 83       	std	Z+1, r25	; 0x01
    2b1c:	80 83       	st	Z, r24
    2b1e:	de 01       	movw	r26, r28
    2b20:	a7 55       	subi	r26, 0x57	; 87
    2b22:	bf 4f       	sbci	r27, 0xFF	; 255
    2b24:	fe 01       	movw	r30, r28
    2b26:	e3 55       	subi	r30, 0x53	; 83
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	80 81       	ld	r24, Z
    2b2c:	91 81       	ldd	r25, Z+1	; 0x01
    2b2e:	11 96       	adiw	r26, 0x01	; 1
    2b30:	9c 93       	st	X, r25
    2b32:	8e 93       	st	-X, r24
    2b34:	fe 01       	movw	r30, r28
    2b36:	e7 55       	subi	r30, 0x57	; 87
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	80 81       	ld	r24, Z
    2b3c:	91 81       	ldd	r25, Z+1	; 0x01
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <main+0xc2a>
    2b42:	fe 01       	movw	r30, r28
    2b44:	e7 55       	subi	r30, 0x57	; 87
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	91 83       	std	Z+1, r25	; 0x01
    2b4a:	80 83       	st	Z, r24
					_delay_ms(100);

					if (key_pressed == SELECT_ROOM1)// key pressed is 1
    2b4c:	80 91 8c 02 	lds	r24, 0x028C
    2b50:	81 33       	cpi	r24, 0x31	; 49
    2b52:	31 f4       	brne	.+12     	; 0x2b60 <main+0xc4c>
					{
						show_menu = ROOM1_MENU;//shown to room1 menu
    2b54:	fe 01       	movw	r30, r28
    2b56:	e3 50       	subi	r30, 0x03	; 3
    2b58:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5a:	83 e0       	ldi	r24, 0x03	; 3
    2b5c:	80 83       	st	Z, r24
    2b5e:	dd c0       	rjmp	.+442    	; 0x2d1a <main+0xe06>
					}
					else if (key_pressed == SELECT_ROOM2)// key pressed is 2
    2b60:	80 91 8c 02 	lds	r24, 0x028C
    2b64:	82 33       	cpi	r24, 0x32	; 50
    2b66:	31 f4       	brne	.+12     	; 0x2b74 <main+0xc60>
					{
						show_menu = ROOM2_MENU;//shown to room2 menu
    2b68:	fe 01       	movw	r30, r28
    2b6a:	e3 50       	subi	r30, 0x03	; 3
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	84 e0       	ldi	r24, 0x04	; 4
    2b70:	80 83       	st	Z, r24
    2b72:	d3 c0       	rjmp	.+422    	; 0x2d1a <main+0xe06>
					}
					else if (key_pressed == SELECT_ROOM3)// key pressed is 3
    2b74:	80 91 8c 02 	lds	r24, 0x028C
    2b78:	83 33       	cpi	r24, 0x33	; 51
    2b7a:	31 f4       	brne	.+12     	; 0x2b88 <main+0xc74>
					{
						show_menu = ROOM3_MENU;//shown to room3 menu
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	e3 50       	subi	r30, 0x03	; 3
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	85 e0       	ldi	r24, 0x05	; 5
    2b84:	80 83       	st	Z, r24
    2b86:	c9 c0       	rjmp	.+402    	; 0x2d1a <main+0xe06>
					}
					else if (key_pressed == SELECT_ROOM4 )// key pressed is 4
    2b88:	80 91 8c 02 	lds	r24, 0x028C
    2b8c:	84 33       	cpi	r24, 0x34	; 52
    2b8e:	31 f4       	brne	.+12     	; 0x2b9c <main+0xc88>
					{
						show_menu = ROOM4_MENU;//shown to room4 menu
    2b90:	fe 01       	movw	r30, r28
    2b92:	e3 50       	subi	r30, 0x03	; 3
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	86 e0       	ldi	r24, 0x06	; 6
    2b98:	80 83       	st	Z, r24
    2b9a:	bf c0       	rjmp	.+382    	; 0x2d1a <main+0xe06>
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
    2b9c:	80 91 8c 02 	lds	r24, 0x028C
    2ba0:	8f 3f       	cpi	r24, 0xFF	; 255
    2ba2:	09 f4       	brne	.+2      	; 0x2ba6 <main+0xc92>
    2ba4:	ba c0       	rjmp	.+372    	; 0x2d1a <main+0xe06>
					{
						LCD_clearscreen();
    2ba6:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
						LCD_vSend_string("Wrong input");
    2baa:	8c ed       	ldi	r24, 0xDC	; 220
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	eb 55       	subi	r30, 0x5B	; 91
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	aa ef       	ldi	r26, 0xFA	; 250
    2bbe:	b3 e4       	ldi	r27, 0x43	; 67
    2bc0:	80 83       	st	Z, r24
    2bc2:	91 83       	std	Z+1, r25	; 0x01
    2bc4:	a2 83       	std	Z+2, r26	; 0x02
    2bc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc8:	8e 01       	movw	r16, r28
    2bca:	0f 55       	subi	r16, 0x5F	; 95
    2bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bce:	fe 01       	movw	r30, r28
    2bd0:	eb 55       	subi	r30, 0x5B	; 91
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	60 81       	ld	r22, Z
    2bd6:	71 81       	ldd	r23, Z+1	; 0x01
    2bd8:	82 81       	ldd	r24, Z+2	; 0x02
    2bda:	93 81       	ldd	r25, Z+3	; 0x03
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	4a ef       	ldi	r20, 0xFA	; 250
    2be2:	54 e4       	ldi	r21, 0x44	; 68
    2be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	f8 01       	movw	r30, r16
    2bee:	80 83       	st	Z, r24
    2bf0:	91 83       	std	Z+1, r25	; 0x01
    2bf2:	a2 83       	std	Z+2, r26	; 0x02
    2bf4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	ef 55       	subi	r30, 0x5F	; 95
    2bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfc:	60 81       	ld	r22, Z
    2bfe:	71 81       	ldd	r23, Z+1	; 0x01
    2c00:	82 81       	ldd	r24, Z+2	; 0x02
    2c02:	93 81       	ldd	r25, Z+3	; 0x03
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e8       	ldi	r20, 0x80	; 128
    2c0a:	5f e3       	ldi	r21, 0x3F	; 63
    2c0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c10:	88 23       	and	r24, r24
    2c12:	44 f4       	brge	.+16     	; 0x2c24 <main+0xd10>
		__ticks = 1;
    2c14:	fe 01       	movw	r30, r28
    2c16:	e1 56       	subi	r30, 0x61	; 97
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	91 83       	std	Z+1, r25	; 0x01
    2c20:	80 83       	st	Z, r24
    2c22:	64 c0       	rjmp	.+200    	; 0x2cec <main+0xdd8>
	else if (__tmp > 65535)
    2c24:	fe 01       	movw	r30, r28
    2c26:	ef 55       	subi	r30, 0x5F	; 95
    2c28:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2a:	60 81       	ld	r22, Z
    2c2c:	71 81       	ldd	r23, Z+1	; 0x01
    2c2e:	82 81       	ldd	r24, Z+2	; 0x02
    2c30:	93 81       	ldd	r25, Z+3	; 0x03
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	3f ef       	ldi	r19, 0xFF	; 255
    2c36:	4f e7       	ldi	r20, 0x7F	; 127
    2c38:	57 e4       	ldi	r21, 0x47	; 71
    2c3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c3e:	18 16       	cp	r1, r24
    2c40:	0c f0       	brlt	.+2      	; 0x2c44 <main+0xd30>
    2c42:	43 c0       	rjmp	.+134    	; 0x2cca <main+0xdb6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c44:	fe 01       	movw	r30, r28
    2c46:	eb 55       	subi	r30, 0x5B	; 91
    2c48:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4a:	60 81       	ld	r22, Z
    2c4c:	71 81       	ldd	r23, Z+1	; 0x01
    2c4e:	82 81       	ldd	r24, Z+2	; 0x02
    2c50:	93 81       	ldd	r25, Z+3	; 0x03
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e2       	ldi	r20, 0x20	; 32
    2c58:	51 e4       	ldi	r21, 0x41	; 65
    2c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	8e 01       	movw	r16, r28
    2c64:	01 56       	subi	r16, 0x61	; 97
    2c66:	1f 4f       	sbci	r17, 0xFF	; 255
    2c68:	bc 01       	movw	r22, r24
    2c6a:	cd 01       	movw	r24, r26
    2c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	f8 01       	movw	r30, r16
    2c76:	91 83       	std	Z+1, r25	; 0x01
    2c78:	80 83       	st	Z, r24
    2c7a:	1f c0       	rjmp	.+62     	; 0x2cba <main+0xda6>
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	e3 56       	subi	r30, 0x63	; 99
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	88 ec       	ldi	r24, 0xC8	; 200
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	91 83       	std	Z+1, r25	; 0x01
    2c88:	80 83       	st	Z, r24
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	e3 56       	subi	r30, 0x63	; 99
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	80 81       	ld	r24, Z
    2c92:	91 81       	ldd	r25, Z+1	; 0x01
    2c94:	01 97       	sbiw	r24, 0x01	; 1
    2c96:	f1 f7       	brne	.-4      	; 0x2c94 <main+0xd80>
    2c98:	fe 01       	movw	r30, r28
    2c9a:	e3 56       	subi	r30, 0x63	; 99
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	91 83       	std	Z+1, r25	; 0x01
    2ca0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca2:	de 01       	movw	r26, r28
    2ca4:	a1 56       	subi	r26, 0x61	; 97
    2ca6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ca8:	fe 01       	movw	r30, r28
    2caa:	e1 56       	subi	r30, 0x61	; 97
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	80 81       	ld	r24, Z
    2cb0:	91 81       	ldd	r25, Z+1	; 0x01
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	11 96       	adiw	r26, 0x01	; 1
    2cb6:	9c 93       	st	X, r25
    2cb8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cba:	fe 01       	movw	r30, r28
    2cbc:	e1 56       	subi	r30, 0x61	; 97
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	80 81       	ld	r24, Z
    2cc2:	91 81       	ldd	r25, Z+1	; 0x01
    2cc4:	00 97       	sbiw	r24, 0x00	; 0
    2cc6:	d1 f6       	brne	.-76     	; 0x2c7c <main+0xd68>
    2cc8:	28 c0       	rjmp	.+80     	; 0x2d1a <main+0xe06>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cca:	8e 01       	movw	r16, r28
    2ccc:	01 56       	subi	r16, 0x61	; 97
    2cce:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	ef 55       	subi	r30, 0x5F	; 95
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	60 81       	ld	r22, Z
    2cd8:	71 81       	ldd	r23, Z+1	; 0x01
    2cda:	82 81       	ldd	r24, Z+2	; 0x02
    2cdc:	93 81       	ldd	r25, Z+3	; 0x03
    2cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	f8 01       	movw	r30, r16
    2ce8:	91 83       	std	Z+1, r25	; 0x01
    2cea:	80 83       	st	Z, r24
    2cec:	de 01       	movw	r26, r28
    2cee:	a5 56       	subi	r26, 0x65	; 101
    2cf0:	bf 4f       	sbci	r27, 0xFF	; 255
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	e1 56       	subi	r30, 0x61	; 97
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	80 81       	ld	r24, Z
    2cfa:	91 81       	ldd	r25, Z+1	; 0x01
    2cfc:	11 96       	adiw	r26, 0x01	; 1
    2cfe:	9c 93       	st	X, r25
    2d00:	8e 93       	st	-X, r24
    2d02:	fe 01       	movw	r30, r28
    2d04:	e5 56       	subi	r30, 0x65	; 101
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	80 81       	ld	r24, Z
    2d0a:	91 81       	ldd	r25, Z+1	; 0x01
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	f1 f7       	brne	.-4      	; 0x2d0c <main+0xdf8>
    2d10:	fe 01       	movw	r30, r28
    2d12:	e5 56       	subi	r30, 0x65	; 101
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	91 83       	std	Z+1, r25	; 0x01
    2d18:	80 83       	st	Z, r24
						_delay_ms(500);
					}

				} while (( (key_pressed < '1') || (key_pressed > '4') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
    2d1a:	80 91 8c 02 	lds	r24, 0x028C
    2d1e:	81 33       	cpi	r24, 0x31	; 49
    2d20:	30 f0       	brcs	.+12     	; 0x2d2e <main+0xe1a>
    2d22:	80 91 8c 02 	lds	r24, 0x028C
    2d26:	85 33       	cpi	r24, 0x35	; 53
    2d28:	10 f4       	brcc	.+4      	; 0x2d2e <main+0xe1a>
    2d2a:	0c 94 ae 1e 	jmp	0x3d5c	; 0x3d5c <main+0x1e48>
    2d2e:	80 91 a4 02 	lds	r24, 0x02A4
    2d32:	88 23       	and	r24, r24
    2d34:	09 f4       	brne	.+2      	; 0x2d38 <main+0xe24>
    2d36:	42 ce       	rjmp	.-892    	; 0x29bc <main+0xaa8>
    2d38:	0c 94 ae 1e 	jmp	0x3d5c	; 0x3d5c <main+0x1e48>
				break;//The End of light 
			case PASSWORD_MENU:
				do
				{
					/******************** print more Menu ******************/
					LCD_clearscreen();
    2d3c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
					LCD_vSend_string("ChangePass 0:Ret");
    2d40:	88 e0       	ldi	r24, 0x08	; 8
    2d42:	91 e0       	ldi	r25, 0x01	; 1
    2d44:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
					LCD_movecursor(2,1);
    2d48:	82 e0       	ldi	r24, 0x02	; 2
    2d4a:	61 e0       	ldi	r22, 0x01	; 1
    2d4c:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_movecursor>
					LCD_vSend_string("1:Admin  2:Guest ");
    2d50:	89 e1       	ldi	r24, 0x19	; 25
    2d52:	91 e0       	ldi	r25, 0x01	; 1
    2d54:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
					/*******************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
    2d58:	80 91 a7 02 	lds	r24, 0x02A7
    2d5c:	0e 94 76 2b 	call	0x56ec	; 0x56ec <u8GetKeyPressed>
    2d60:	80 93 8c 02 	sts	0x028C, r24
    2d64:	fe 01       	movw	r30, r28
    2d66:	e9 56       	subi	r30, 0x69	; 105
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	a8 ec       	ldi	r26, 0xC8	; 200
    2d70:	b2 e4       	ldi	r27, 0x42	; 66
    2d72:	80 83       	st	Z, r24
    2d74:	91 83       	std	Z+1, r25	; 0x01
    2d76:	a2 83       	std	Z+2, r26	; 0x02
    2d78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d7a:	8e 01       	movw	r16, r28
    2d7c:	0d 56       	subi	r16, 0x6D	; 109
    2d7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d80:	fe 01       	movw	r30, r28
    2d82:	e9 56       	subi	r30, 0x69	; 105
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	60 81       	ld	r22, Z
    2d88:	71 81       	ldd	r23, Z+1	; 0x01
    2d8a:	82 81       	ldd	r24, Z+2	; 0x02
    2d8c:	93 81       	ldd	r25, Z+3	; 0x03
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	4a ef       	ldi	r20, 0xFA	; 250
    2d94:	54 e4       	ldi	r21, 0x44	; 68
    2d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	f8 01       	movw	r30, r16
    2da0:	80 83       	st	Z, r24
    2da2:	91 83       	std	Z+1, r25	; 0x01
    2da4:	a2 83       	std	Z+2, r26	; 0x02
    2da6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2da8:	fe 01       	movw	r30, r28
    2daa:	ed 56       	subi	r30, 0x6D	; 109
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	60 81       	ld	r22, Z
    2db0:	71 81       	ldd	r23, Z+1	; 0x01
    2db2:	82 81       	ldd	r24, Z+2	; 0x02
    2db4:	93 81       	ldd	r25, Z+3	; 0x03
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	40 e8       	ldi	r20, 0x80	; 128
    2dbc:	5f e3       	ldi	r21, 0x3F	; 63
    2dbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dc2:	88 23       	and	r24, r24
    2dc4:	44 f4       	brge	.+16     	; 0x2dd6 <main+0xec2>
		__ticks = 1;
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	ef 56       	subi	r30, 0x6F	; 111
    2dca:	ff 4f       	sbci	r31, 0xFF	; 255
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	91 83       	std	Z+1, r25	; 0x01
    2dd2:	80 83       	st	Z, r24
    2dd4:	64 c0       	rjmp	.+200    	; 0x2e9e <main+0xf8a>
	else if (__tmp > 65535)
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	ed 56       	subi	r30, 0x6D	; 109
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	60 81       	ld	r22, Z
    2dde:	71 81       	ldd	r23, Z+1	; 0x01
    2de0:	82 81       	ldd	r24, Z+2	; 0x02
    2de2:	93 81       	ldd	r25, Z+3	; 0x03
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	3f ef       	ldi	r19, 0xFF	; 255
    2de8:	4f e7       	ldi	r20, 0x7F	; 127
    2dea:	57 e4       	ldi	r21, 0x47	; 71
    2dec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2df0:	18 16       	cp	r1, r24
    2df2:	0c f0       	brlt	.+2      	; 0x2df6 <main+0xee2>
    2df4:	43 c0       	rjmp	.+134    	; 0x2e7c <main+0xf68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df6:	fe 01       	movw	r30, r28
    2df8:	e9 56       	subi	r30, 0x69	; 105
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	60 81       	ld	r22, Z
    2dfe:	71 81       	ldd	r23, Z+1	; 0x01
    2e00:	82 81       	ldd	r24, Z+2	; 0x02
    2e02:	93 81       	ldd	r25, Z+3	; 0x03
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	40 e2       	ldi	r20, 0x20	; 32
    2e0a:	51 e4       	ldi	r21, 0x41	; 65
    2e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	8e 01       	movw	r16, r28
    2e16:	0f 56       	subi	r16, 0x6F	; 111
    2e18:	1f 4f       	sbci	r17, 0xFF	; 255
    2e1a:	bc 01       	movw	r22, r24
    2e1c:	cd 01       	movw	r24, r26
    2e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	f8 01       	movw	r30, r16
    2e28:	91 83       	std	Z+1, r25	; 0x01
    2e2a:	80 83       	st	Z, r24
    2e2c:	1f c0       	rjmp	.+62     	; 0x2e6c <main+0xf58>
    2e2e:	fe 01       	movw	r30, r28
    2e30:	e1 57       	subi	r30, 0x71	; 113
    2e32:	ff 4f       	sbci	r31, 0xFF	; 255
    2e34:	88 ec       	ldi	r24, 0xC8	; 200
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	91 83       	std	Z+1, r25	; 0x01
    2e3a:	80 83       	st	Z, r24
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	e1 57       	subi	r30, 0x71	; 113
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	80 81       	ld	r24, Z
    2e44:	91 81       	ldd	r25, Z+1	; 0x01
    2e46:	01 97       	sbiw	r24, 0x01	; 1
    2e48:	f1 f7       	brne	.-4      	; 0x2e46 <main+0xf32>
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	e1 57       	subi	r30, 0x71	; 113
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	91 83       	std	Z+1, r25	; 0x01
    2e52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e54:	de 01       	movw	r26, r28
    2e56:	af 56       	subi	r26, 0x6F	; 111
    2e58:	bf 4f       	sbci	r27, 0xFF	; 255
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	ef 56       	subi	r30, 0x6F	; 111
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	80 81       	ld	r24, Z
    2e62:	91 81       	ldd	r25, Z+1	; 0x01
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	11 96       	adiw	r26, 0x01	; 1
    2e68:	9c 93       	st	X, r25
    2e6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6c:	fe 01       	movw	r30, r28
    2e6e:	ef 56       	subi	r30, 0x6F	; 111
    2e70:	ff 4f       	sbci	r31, 0xFF	; 255
    2e72:	80 81       	ld	r24, Z
    2e74:	91 81       	ldd	r25, Z+1	; 0x01
    2e76:	00 97       	sbiw	r24, 0x00	; 0
    2e78:	d1 f6       	brne	.-76     	; 0x2e2e <main+0xf1a>
    2e7a:	28 c0       	rjmp	.+80     	; 0x2ecc <main+0xfb8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e7c:	8e 01       	movw	r16, r28
    2e7e:	0f 56       	subi	r16, 0x6F	; 111
    2e80:	1f 4f       	sbci	r17, 0xFF	; 255
    2e82:	fe 01       	movw	r30, r28
    2e84:	ed 56       	subi	r30, 0x6D	; 109
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	60 81       	ld	r22, Z
    2e8a:	71 81       	ldd	r23, Z+1	; 0x01
    2e8c:	82 81       	ldd	r24, Z+2	; 0x02
    2e8e:	93 81       	ldd	r25, Z+3	; 0x03
    2e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e94:	dc 01       	movw	r26, r24
    2e96:	cb 01       	movw	r24, r22
    2e98:	f8 01       	movw	r30, r16
    2e9a:	91 83       	std	Z+1, r25	; 0x01
    2e9c:	80 83       	st	Z, r24
    2e9e:	de 01       	movw	r26, r28
    2ea0:	a3 57       	subi	r26, 0x73	; 115
    2ea2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ea4:	fe 01       	movw	r30, r28
    2ea6:	ef 56       	subi	r30, 0x6F	; 111
    2ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eaa:	80 81       	ld	r24, Z
    2eac:	91 81       	ldd	r25, Z+1	; 0x01
    2eae:	11 96       	adiw	r26, 0x01	; 1
    2eb0:	9c 93       	st	X, r25
    2eb2:	8e 93       	st	-X, r24
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e3 57       	subi	r30, 0x73	; 115
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	80 81       	ld	r24, Z
    2ebc:	91 81       	ldd	r25, Z+1	; 0x01
    2ebe:	01 97       	sbiw	r24, 0x01	; 1
    2ec0:	f1 f7       	brne	.-4      	; 0x2ebe <main+0xfaa>
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	e3 57       	subi	r30, 0x73	; 115
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	91 83       	std	Z+1, r25	; 0x01
    2eca:	80 83       	st	Z, r24
					_delay_ms(100);

					if (key_pressed == SELECT_CHNG_ADMIN_PASS)
    2ecc:	80 91 8c 02 	lds	r24, 0x028C
    2ed0:	81 33       	cpi	r24, 0x31	; 49
    2ed2:	31 f4       	brne	.+12     	; 0x2ee0 <main+0xfcc>
					{
						show_menu = CHNG_ADMIN_PASS_MENU;
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	e3 50       	subi	r30, 0x03	; 3
    2ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eda:	8c e0       	ldi	r24, 0x0C	; 12
    2edc:	80 83       	st	Z, r24
    2ede:	d3 c0       	rjmp	.+422    	; 0x3086 <main+0x1172>
					}
					else if (key_pressed == SELECT_CHNG_GUEST_PASS)
    2ee0:	80 91 8c 02 	lds	r24, 0x028C
    2ee4:	82 33       	cpi	r24, 0x32	; 50
    2ee6:	31 f4       	brne	.+12     	; 0x2ef4 <main+0xfe0>
					{
						show_menu = CHNG_GUEST_PASS_MENU;
    2ee8:	fe 01       	movw	r30, r28
    2eea:	e3 50       	subi	r30, 0x03	; 3
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	8d e0       	ldi	r24, 0x0D	; 13
    2ef0:	80 83       	st	Z, r24
    2ef2:	c9 c0       	rjmp	.+402    	; 0x3086 <main+0x1172>
					}
					else if (key_pressed == SELECT_PASS_RET)// key pressed is 0
    2ef4:	80 91 8c 02 	lds	r24, 0x028C
    2ef8:	80 33       	cpi	r24, 0x30	; 48
    2efa:	31 f4       	brne	.+12     	; 0x2f08 <main+0xff4>
					{
						show_menu = MAIN_MENU;//shown to more menu
    2efc:	fe 01       	movw	r30, r28
    2efe:	e3 50       	subi	r30, 0x03	; 3
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	80 83       	st	Z, r24
    2f06:	bf c0       	rjmp	.+382    	; 0x3086 <main+0x1172>
					}
					else if(key_pressed != NOT_PRESSED)
    2f08:	80 91 8c 02 	lds	r24, 0x028C
    2f0c:	8f 3f       	cpi	r24, 0xFF	; 255
    2f0e:	09 f4       	brne	.+2      	; 0x2f12 <main+0xffe>
    2f10:	ba c0       	rjmp	.+372    	; 0x3086 <main+0x1172>
					{
						LCD_clearscreen();
    2f12:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
						LCD_vSend_string("Wrong input");
    2f16:	8c ed       	ldi	r24, 0xDC	; 220
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    2f1e:	fe 01       	movw	r30, r28
    2f20:	e7 57       	subi	r30, 0x77	; 119
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	aa ef       	ldi	r26, 0xFA	; 250
    2f2a:	b3 e4       	ldi	r27, 0x43	; 67
    2f2c:	80 83       	st	Z, r24
    2f2e:	91 83       	std	Z+1, r25	; 0x01
    2f30:	a2 83       	std	Z+2, r26	; 0x02
    2f32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f34:	8e 01       	movw	r16, r28
    2f36:	0b 57       	subi	r16, 0x7B	; 123
    2f38:	1f 4f       	sbci	r17, 0xFF	; 255
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	e7 57       	subi	r30, 0x77	; 119
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	60 81       	ld	r22, Z
    2f42:	71 81       	ldd	r23, Z+1	; 0x01
    2f44:	82 81       	ldd	r24, Z+2	; 0x02
    2f46:	93 81       	ldd	r25, Z+3	; 0x03
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	4a ef       	ldi	r20, 0xFA	; 250
    2f4e:	54 e4       	ldi	r21, 0x44	; 68
    2f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	f8 01       	movw	r30, r16
    2f5a:	80 83       	st	Z, r24
    2f5c:	91 83       	std	Z+1, r25	; 0x01
    2f5e:	a2 83       	std	Z+2, r26	; 0x02
    2f60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f62:	fe 01       	movw	r30, r28
    2f64:	eb 57       	subi	r30, 0x7B	; 123
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	60 81       	ld	r22, Z
    2f6a:	71 81       	ldd	r23, Z+1	; 0x01
    2f6c:	82 81       	ldd	r24, Z+2	; 0x02
    2f6e:	93 81       	ldd	r25, Z+3	; 0x03
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	40 e8       	ldi	r20, 0x80	; 128
    2f76:	5f e3       	ldi	r21, 0x3F	; 63
    2f78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f7c:	88 23       	and	r24, r24
    2f7e:	44 f4       	brge	.+16     	; 0x2f90 <main+0x107c>
		__ticks = 1;
    2f80:	fe 01       	movw	r30, r28
    2f82:	ed 57       	subi	r30, 0x7D	; 125
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	91 83       	std	Z+1, r25	; 0x01
    2f8c:	80 83       	st	Z, r24
    2f8e:	64 c0       	rjmp	.+200    	; 0x3058 <main+0x1144>
	else if (__tmp > 65535)
    2f90:	fe 01       	movw	r30, r28
    2f92:	eb 57       	subi	r30, 0x7B	; 123
    2f94:	ff 4f       	sbci	r31, 0xFF	; 255
    2f96:	60 81       	ld	r22, Z
    2f98:	71 81       	ldd	r23, Z+1	; 0x01
    2f9a:	82 81       	ldd	r24, Z+2	; 0x02
    2f9c:	93 81       	ldd	r25, Z+3	; 0x03
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	3f ef       	ldi	r19, 0xFF	; 255
    2fa2:	4f e7       	ldi	r20, 0x7F	; 127
    2fa4:	57 e4       	ldi	r21, 0x47	; 71
    2fa6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2faa:	18 16       	cp	r1, r24
    2fac:	0c f0       	brlt	.+2      	; 0x2fb0 <main+0x109c>
    2fae:	43 c0       	rjmp	.+134    	; 0x3036 <main+0x1122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	e7 57       	subi	r30, 0x77	; 119
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	60 81       	ld	r22, Z
    2fb8:	71 81       	ldd	r23, Z+1	; 0x01
    2fba:	82 81       	ldd	r24, Z+2	; 0x02
    2fbc:	93 81       	ldd	r25, Z+3	; 0x03
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	40 e2       	ldi	r20, 0x20	; 32
    2fc4:	51 e4       	ldi	r21, 0x41	; 65
    2fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	8e 01       	movw	r16, r28
    2fd0:	0d 57       	subi	r16, 0x7D	; 125
    2fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd4:	bc 01       	movw	r22, r24
    2fd6:	cd 01       	movw	r24, r26
    2fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	f8 01       	movw	r30, r16
    2fe2:	91 83       	std	Z+1, r25	; 0x01
    2fe4:	80 83       	st	Z, r24
    2fe6:	1f c0       	rjmp	.+62     	; 0x3026 <main+0x1112>
    2fe8:	fe 01       	movw	r30, r28
    2fea:	ef 57       	subi	r30, 0x7F	; 127
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	88 ec       	ldi	r24, 0xC8	; 200
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	91 83       	std	Z+1, r25	; 0x01
    2ff4:	80 83       	st	Z, r24
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	ef 57       	subi	r30, 0x7F	; 127
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	80 81       	ld	r24, Z
    2ffe:	91 81       	ldd	r25, Z+1	; 0x01
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <main+0x10ec>
    3004:	fe 01       	movw	r30, r28
    3006:	ef 57       	subi	r30, 0x7F	; 127
    3008:	ff 4f       	sbci	r31, 0xFF	; 255
    300a:	91 83       	std	Z+1, r25	; 0x01
    300c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    300e:	de 01       	movw	r26, r28
    3010:	ad 57       	subi	r26, 0x7D	; 125
    3012:	bf 4f       	sbci	r27, 0xFF	; 255
    3014:	fe 01       	movw	r30, r28
    3016:	ed 57       	subi	r30, 0x7D	; 125
    3018:	ff 4f       	sbci	r31, 0xFF	; 255
    301a:	80 81       	ld	r24, Z
    301c:	91 81       	ldd	r25, Z+1	; 0x01
    301e:	01 97       	sbiw	r24, 0x01	; 1
    3020:	11 96       	adiw	r26, 0x01	; 1
    3022:	9c 93       	st	X, r25
    3024:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3026:	fe 01       	movw	r30, r28
    3028:	ed 57       	subi	r30, 0x7D	; 125
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	80 81       	ld	r24, Z
    302e:	91 81       	ldd	r25, Z+1	; 0x01
    3030:	00 97       	sbiw	r24, 0x00	; 0
    3032:	d1 f6       	brne	.-76     	; 0x2fe8 <main+0x10d4>
    3034:	28 c0       	rjmp	.+80     	; 0x3086 <main+0x1172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3036:	8e 01       	movw	r16, r28
    3038:	0d 57       	subi	r16, 0x7D	; 125
    303a:	1f 4f       	sbci	r17, 0xFF	; 255
    303c:	fe 01       	movw	r30, r28
    303e:	eb 57       	subi	r30, 0x7B	; 123
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	60 81       	ld	r22, Z
    3044:	71 81       	ldd	r23, Z+1	; 0x01
    3046:	82 81       	ldd	r24, Z+2	; 0x02
    3048:	93 81       	ldd	r25, Z+3	; 0x03
    304a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    304e:	dc 01       	movw	r26, r24
    3050:	cb 01       	movw	r24, r22
    3052:	f8 01       	movw	r30, r16
    3054:	91 83       	std	Z+1, r25	; 0x01
    3056:	80 83       	st	Z, r24
    3058:	de 01       	movw	r26, r28
    305a:	a1 58       	subi	r26, 0x81	; 129
    305c:	bf 4f       	sbci	r27, 0xFF	; 255
    305e:	fe 01       	movw	r30, r28
    3060:	ed 57       	subi	r30, 0x7D	; 125
    3062:	ff 4f       	sbci	r31, 0xFF	; 255
    3064:	80 81       	ld	r24, Z
    3066:	91 81       	ldd	r25, Z+1	; 0x01
    3068:	11 96       	adiw	r26, 0x01	; 1
    306a:	9c 93       	st	X, r25
    306c:	8e 93       	st	-X, r24
    306e:	fe 01       	movw	r30, r28
    3070:	e1 58       	subi	r30, 0x81	; 129
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	80 81       	ld	r24, Z
    3076:	91 81       	ldd	r25, Z+1	; 0x01
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	f1 f7       	brne	.-4      	; 0x3078 <main+0x1164>
    307c:	fe 01       	movw	r30, r28
    307e:	e1 58       	subi	r30, 0x81	; 129
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	91 83       	std	Z+1, r25	; 0x01
    3084:	80 83       	st	Z, r24
						_delay_ms(500);
					}
				} while (( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
    3086:	80 91 8c 02 	lds	r24, 0x028C
    308a:	80 33       	cpi	r24, 0x30	; 48
    308c:	28 f0       	brcs	.+10     	; 0x3098 <main+0x1184>
    308e:	80 91 8c 02 	lds	r24, 0x028C
    3092:	83 33       	cpi	r24, 0x33	; 51
    3094:	08 f4       	brcc	.+2      	; 0x3098 <main+0x1184>
    3096:	62 c6       	rjmp	.+3268   	; 0x3d5c <main+0x1e48>
    3098:	80 91 a4 02 	lds	r24, 0x02A4
    309c:	88 23       	and	r24, r24
    309e:	09 f4       	brne	.+2      	; 0x30a2 <main+0x118e>
    30a0:	4d ce       	rjmp	.-870    	; 0x2d3c <main+0xe28>
    30a2:	5c c6       	rjmp	.+3256   	; 0x3d5c <main+0x1e48>
				break;//The End of air conditioning 
			case CHNG_ADMIN_PASS_MENU:
				LCD_clearscreen();
    30a4:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
				setAdminPassword();
    30a8:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <setAdminPassword>
				show_menu = MAIN_MENU;//shown to main menu
    30ac:	fe 01       	movw	r30, r28
    30ae:	e3 50       	subi	r30, 0x03	; 3
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	80 83       	st	Z, r24
    30b6:	52 c6       	rjmp	.+3236   	; 0x3d5c <main+0x1e48>
				break;//The End of sit admin password case
			case CHNG_GUEST_PASS_MENU:
				LCD_clearscreen();
    30b8:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
				setGestPassword();
    30bc:	0e 94 4d 21 	call	0x429a	; 0x429a <setGestPassword>
				show_menu = MAIN_MENU;//shown to main menu
    30c0:	fe 01       	movw	r30, r28
    30c2:	e3 50       	subi	r30, 0x03	; 3
    30c4:	ff 4f       	sbci	r31, 0xFF	; 255
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	80 83       	st	Z, r24
    30ca:	48 c6       	rjmp	.+3216   	; 0x3d5c <main+0x1e48>
				break;//The End of sit guest password case
			case AIRCONDITIONING_MENU:
				do
				{
					/******************** print more Menu ******************/
					LCD_clearscreen();
    30cc:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
					LCD_vSend_string("1:Set temperature ");
    30d0:	8b e2       	ldi	r24, 0x2B	; 43
    30d2:	91 e0       	ldi	r25, 0x01	; 1
    30d4:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
					LCD_movecursor(2,1);
    30d8:	82 e0       	ldi	r24, 0x02	; 2
    30da:	61 e0       	ldi	r22, 0x01	; 1
    30dc:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_movecursor>
					LCD_vSend_string("2:Control  0:RET");
    30e0:	8e e3       	ldi	r24, 0x3E	; 62
    30e2:	91 e0       	ldi	r25, 0x01	; 1
    30e4:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
					/*******************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
    30e8:	80 91 a7 02 	lds	r24, 0x02A7
    30ec:	0e 94 76 2b 	call	0x56ec	; 0x56ec <u8GetKeyPressed>
    30f0:	80 93 8c 02 	sts	0x028C, r24
    30f4:	fe 01       	movw	r30, r28
    30f6:	e5 58       	subi	r30, 0x85	; 133
    30f8:	ff 4f       	sbci	r31, 0xFF	; 255
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	a8 ec       	ldi	r26, 0xC8	; 200
    3100:	b2 e4       	ldi	r27, 0x42	; 66
    3102:	80 83       	st	Z, r24
    3104:	91 83       	std	Z+1, r25	; 0x01
    3106:	a2 83       	std	Z+2, r26	; 0x02
    3108:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    310a:	8e 01       	movw	r16, r28
    310c:	09 58       	subi	r16, 0x89	; 137
    310e:	1f 4f       	sbci	r17, 0xFF	; 255
    3110:	fe 01       	movw	r30, r28
    3112:	e5 58       	subi	r30, 0x85	; 133
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	60 81       	ld	r22, Z
    3118:	71 81       	ldd	r23, Z+1	; 0x01
    311a:	82 81       	ldd	r24, Z+2	; 0x02
    311c:	93 81       	ldd	r25, Z+3	; 0x03
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	4a ef       	ldi	r20, 0xFA	; 250
    3124:	54 e4       	ldi	r21, 0x44	; 68
    3126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	f8 01       	movw	r30, r16
    3130:	80 83       	st	Z, r24
    3132:	91 83       	std	Z+1, r25	; 0x01
    3134:	a2 83       	std	Z+2, r26	; 0x02
    3136:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3138:	fe 01       	movw	r30, r28
    313a:	e9 58       	subi	r30, 0x89	; 137
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	60 81       	ld	r22, Z
    3140:	71 81       	ldd	r23, Z+1	; 0x01
    3142:	82 81       	ldd	r24, Z+2	; 0x02
    3144:	93 81       	ldd	r25, Z+3	; 0x03
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	40 e8       	ldi	r20, 0x80	; 128
    314c:	5f e3       	ldi	r21, 0x3F	; 63
    314e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3152:	88 23       	and	r24, r24
    3154:	44 f4       	brge	.+16     	; 0x3166 <main+0x1252>
		__ticks = 1;
    3156:	fe 01       	movw	r30, r28
    3158:	eb 58       	subi	r30, 0x8B	; 139
    315a:	ff 4f       	sbci	r31, 0xFF	; 255
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	91 83       	std	Z+1, r25	; 0x01
    3162:	80 83       	st	Z, r24
    3164:	64 c0       	rjmp	.+200    	; 0x322e <main+0x131a>
	else if (__tmp > 65535)
    3166:	fe 01       	movw	r30, r28
    3168:	e9 58       	subi	r30, 0x89	; 137
    316a:	ff 4f       	sbci	r31, 0xFF	; 255
    316c:	60 81       	ld	r22, Z
    316e:	71 81       	ldd	r23, Z+1	; 0x01
    3170:	82 81       	ldd	r24, Z+2	; 0x02
    3172:	93 81       	ldd	r25, Z+3	; 0x03
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	3f ef       	ldi	r19, 0xFF	; 255
    3178:	4f e7       	ldi	r20, 0x7F	; 127
    317a:	57 e4       	ldi	r21, 0x47	; 71
    317c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3180:	18 16       	cp	r1, r24
    3182:	0c f0       	brlt	.+2      	; 0x3186 <main+0x1272>
    3184:	43 c0       	rjmp	.+134    	; 0x320c <main+0x12f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3186:	fe 01       	movw	r30, r28
    3188:	e5 58       	subi	r30, 0x85	; 133
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	60 81       	ld	r22, Z
    318e:	71 81       	ldd	r23, Z+1	; 0x01
    3190:	82 81       	ldd	r24, Z+2	; 0x02
    3192:	93 81       	ldd	r25, Z+3	; 0x03
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	40 e2       	ldi	r20, 0x20	; 32
    319a:	51 e4       	ldi	r21, 0x41	; 65
    319c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	8e 01       	movw	r16, r28
    31a6:	0b 58       	subi	r16, 0x8B	; 139
    31a8:	1f 4f       	sbci	r17, 0xFF	; 255
    31aa:	bc 01       	movw	r22, r24
    31ac:	cd 01       	movw	r24, r26
    31ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	f8 01       	movw	r30, r16
    31b8:	91 83       	std	Z+1, r25	; 0x01
    31ba:	80 83       	st	Z, r24
    31bc:	1f c0       	rjmp	.+62     	; 0x31fc <main+0x12e8>
    31be:	fe 01       	movw	r30, r28
    31c0:	ed 58       	subi	r30, 0x8D	; 141
    31c2:	ff 4f       	sbci	r31, 0xFF	; 255
    31c4:	88 ec       	ldi	r24, 0xC8	; 200
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	91 83       	std	Z+1, r25	; 0x01
    31ca:	80 83       	st	Z, r24
    31cc:	fe 01       	movw	r30, r28
    31ce:	ed 58       	subi	r30, 0x8D	; 141
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	80 81       	ld	r24, Z
    31d4:	91 81       	ldd	r25, Z+1	; 0x01
    31d6:	01 97       	sbiw	r24, 0x01	; 1
    31d8:	f1 f7       	brne	.-4      	; 0x31d6 <main+0x12c2>
    31da:	fe 01       	movw	r30, r28
    31dc:	ed 58       	subi	r30, 0x8D	; 141
    31de:	ff 4f       	sbci	r31, 0xFF	; 255
    31e0:	91 83       	std	Z+1, r25	; 0x01
    31e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e4:	de 01       	movw	r26, r28
    31e6:	ab 58       	subi	r26, 0x8B	; 139
    31e8:	bf 4f       	sbci	r27, 0xFF	; 255
    31ea:	fe 01       	movw	r30, r28
    31ec:	eb 58       	subi	r30, 0x8B	; 139
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	80 81       	ld	r24, Z
    31f2:	91 81       	ldd	r25, Z+1	; 0x01
    31f4:	01 97       	sbiw	r24, 0x01	; 1
    31f6:	11 96       	adiw	r26, 0x01	; 1
    31f8:	9c 93       	st	X, r25
    31fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31fc:	fe 01       	movw	r30, r28
    31fe:	eb 58       	subi	r30, 0x8B	; 139
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	80 81       	ld	r24, Z
    3204:	91 81       	ldd	r25, Z+1	; 0x01
    3206:	00 97       	sbiw	r24, 0x00	; 0
    3208:	d1 f6       	brne	.-76     	; 0x31be <main+0x12aa>
    320a:	28 c0       	rjmp	.+80     	; 0x325c <main+0x1348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    320c:	8e 01       	movw	r16, r28
    320e:	0b 58       	subi	r16, 0x8B	; 139
    3210:	1f 4f       	sbci	r17, 0xFF	; 255
    3212:	fe 01       	movw	r30, r28
    3214:	e9 58       	subi	r30, 0x89	; 137
    3216:	ff 4f       	sbci	r31, 0xFF	; 255
    3218:	60 81       	ld	r22, Z
    321a:	71 81       	ldd	r23, Z+1	; 0x01
    321c:	82 81       	ldd	r24, Z+2	; 0x02
    321e:	93 81       	ldd	r25, Z+3	; 0x03
    3220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	f8 01       	movw	r30, r16
    322a:	91 83       	std	Z+1, r25	; 0x01
    322c:	80 83       	st	Z, r24
    322e:	de 01       	movw	r26, r28
    3230:	af 58       	subi	r26, 0x8F	; 143
    3232:	bf 4f       	sbci	r27, 0xFF	; 255
    3234:	fe 01       	movw	r30, r28
    3236:	eb 58       	subi	r30, 0x8B	; 139
    3238:	ff 4f       	sbci	r31, 0xFF	; 255
    323a:	80 81       	ld	r24, Z
    323c:	91 81       	ldd	r25, Z+1	; 0x01
    323e:	11 96       	adiw	r26, 0x01	; 1
    3240:	9c 93       	st	X, r25
    3242:	8e 93       	st	-X, r24
    3244:	fe 01       	movw	r30, r28
    3246:	ef 58       	subi	r30, 0x8F	; 143
    3248:	ff 4f       	sbci	r31, 0xFF	; 255
    324a:	80 81       	ld	r24, Z
    324c:	91 81       	ldd	r25, Z+1	; 0x01
    324e:	01 97       	sbiw	r24, 0x01	; 1
    3250:	f1 f7       	brne	.-4      	; 0x324e <main+0x133a>
    3252:	fe 01       	movw	r30, r28
    3254:	ef 58       	subi	r30, 0x8F	; 143
    3256:	ff 4f       	sbci	r31, 0xFF	; 255
    3258:	91 83       	std	Z+1, r25	; 0x01
    325a:	80 83       	st	Z, r24
					_delay_ms(100);

					if (key_pressed == SELECT_SET_TEMPERATURE)// key pressed is 1
    325c:	80 91 8c 02 	lds	r24, 0x028C
    3260:	81 33       	cpi	r24, 0x31	; 49
    3262:	31 f4       	brne	.+12     	; 0x3270 <main+0x135c>
					{
						show_menu = TEMPERATURE_MENU;//shown to set temperature menu
    3264:	fe 01       	movw	r30, r28
    3266:	e3 50       	subi	r30, 0x03	; 3
    3268:	ff 4f       	sbci	r31, 0xFF	; 255
    326a:	8a e0       	ldi	r24, 0x0A	; 10
    326c:	80 83       	st	Z, r24
    326e:	d3 c0       	rjmp	.+422    	; 0x3416 <main+0x1502>
					}
					else if (key_pressed == SELECT_AIR_COND_CTRL)// key pressed is 2
    3270:	80 91 8c 02 	lds	r24, 0x028C
    3274:	82 33       	cpi	r24, 0x32	; 50
    3276:	31 f4       	brne	.+12     	; 0x3284 <main+0x1370>
					{
						show_menu = AIRCOND_CTRL_MENU;//shown to air conditioning control menu
    3278:	fe 01       	movw	r30, r28
    327a:	e3 50       	subi	r30, 0x03	; 3
    327c:	ff 4f       	sbci	r31, 0xFF	; 255
    327e:	89 e0       	ldi	r24, 0x09	; 9
    3280:	80 83       	st	Z, r24
    3282:	c9 c0       	rjmp	.+402    	; 0x3416 <main+0x1502>
					}
					else if (key_pressed == SELECT_AIR_COND_RET)// key pressed is 0
    3284:	80 91 8c 02 	lds	r24, 0x028C
    3288:	80 33       	cpi	r24, 0x30	; 48
    328a:	31 f4       	brne	.+12     	; 0x3298 <main+0x1384>
					{
						show_menu = MAIN_MENU;//shown to more menu
    328c:	fe 01       	movw	r30, r28
    328e:	e3 50       	subi	r30, 0x03	; 3
    3290:	ff 4f       	sbci	r31, 0xFF	; 255
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	80 83       	st	Z, r24
    3296:	bf c0       	rjmp	.+382    	; 0x3416 <main+0x1502>
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
    3298:	80 91 8c 02 	lds	r24, 0x028C
    329c:	8f 3f       	cpi	r24, 0xFF	; 255
    329e:	09 f4       	brne	.+2      	; 0x32a2 <main+0x138e>
    32a0:	ba c0       	rjmp	.+372    	; 0x3416 <main+0x1502>
					{
						LCD_clearscreen();
    32a2:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
						LCD_vSend_string("Wrong input");
    32a6:	8c ed       	ldi	r24, 0xDC	; 220
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    32ae:	fe 01       	movw	r30, r28
    32b0:	e3 59       	subi	r30, 0x93	; 147
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	aa ef       	ldi	r26, 0xFA	; 250
    32ba:	b3 e4       	ldi	r27, 0x43	; 67
    32bc:	80 83       	st	Z, r24
    32be:	91 83       	std	Z+1, r25	; 0x01
    32c0:	a2 83       	std	Z+2, r26	; 0x02
    32c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c4:	8e 01       	movw	r16, r28
    32c6:	07 59       	subi	r16, 0x97	; 151
    32c8:	1f 4f       	sbci	r17, 0xFF	; 255
    32ca:	fe 01       	movw	r30, r28
    32cc:	e3 59       	subi	r30, 0x93	; 147
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	60 81       	ld	r22, Z
    32d2:	71 81       	ldd	r23, Z+1	; 0x01
    32d4:	82 81       	ldd	r24, Z+2	; 0x02
    32d6:	93 81       	ldd	r25, Z+3	; 0x03
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	4a ef       	ldi	r20, 0xFA	; 250
    32de:	54 e4       	ldi	r21, 0x44	; 68
    32e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	f8 01       	movw	r30, r16
    32ea:	80 83       	st	Z, r24
    32ec:	91 83       	std	Z+1, r25	; 0x01
    32ee:	a2 83       	std	Z+2, r26	; 0x02
    32f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32f2:	fe 01       	movw	r30, r28
    32f4:	e7 59       	subi	r30, 0x97	; 151
    32f6:	ff 4f       	sbci	r31, 0xFF	; 255
    32f8:	60 81       	ld	r22, Z
    32fa:	71 81       	ldd	r23, Z+1	; 0x01
    32fc:	82 81       	ldd	r24, Z+2	; 0x02
    32fe:	93 81       	ldd	r25, Z+3	; 0x03
    3300:	20 e0       	ldi	r18, 0x00	; 0
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	40 e8       	ldi	r20, 0x80	; 128
    3306:	5f e3       	ldi	r21, 0x3F	; 63
    3308:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    330c:	88 23       	and	r24, r24
    330e:	44 f4       	brge	.+16     	; 0x3320 <main+0x140c>
		__ticks = 1;
    3310:	fe 01       	movw	r30, r28
    3312:	e9 59       	subi	r30, 0x99	; 153
    3314:	ff 4f       	sbci	r31, 0xFF	; 255
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	91 83       	std	Z+1, r25	; 0x01
    331c:	80 83       	st	Z, r24
    331e:	64 c0       	rjmp	.+200    	; 0x33e8 <main+0x14d4>
	else if (__tmp > 65535)
    3320:	fe 01       	movw	r30, r28
    3322:	e7 59       	subi	r30, 0x97	; 151
    3324:	ff 4f       	sbci	r31, 0xFF	; 255
    3326:	60 81       	ld	r22, Z
    3328:	71 81       	ldd	r23, Z+1	; 0x01
    332a:	82 81       	ldd	r24, Z+2	; 0x02
    332c:	93 81       	ldd	r25, Z+3	; 0x03
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	3f ef       	ldi	r19, 0xFF	; 255
    3332:	4f e7       	ldi	r20, 0x7F	; 127
    3334:	57 e4       	ldi	r21, 0x47	; 71
    3336:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    333a:	18 16       	cp	r1, r24
    333c:	0c f0       	brlt	.+2      	; 0x3340 <main+0x142c>
    333e:	43 c0       	rjmp	.+134    	; 0x33c6 <main+0x14b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3340:	fe 01       	movw	r30, r28
    3342:	e3 59       	subi	r30, 0x93	; 147
    3344:	ff 4f       	sbci	r31, 0xFF	; 255
    3346:	60 81       	ld	r22, Z
    3348:	71 81       	ldd	r23, Z+1	; 0x01
    334a:	82 81       	ldd	r24, Z+2	; 0x02
    334c:	93 81       	ldd	r25, Z+3	; 0x03
    334e:	20 e0       	ldi	r18, 0x00	; 0
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	40 e2       	ldi	r20, 0x20	; 32
    3354:	51 e4       	ldi	r21, 0x41	; 65
    3356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	8e 01       	movw	r16, r28
    3360:	09 59       	subi	r16, 0x99	; 153
    3362:	1f 4f       	sbci	r17, 0xFF	; 255
    3364:	bc 01       	movw	r22, r24
    3366:	cd 01       	movw	r24, r26
    3368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	f8 01       	movw	r30, r16
    3372:	91 83       	std	Z+1, r25	; 0x01
    3374:	80 83       	st	Z, r24
    3376:	1f c0       	rjmp	.+62     	; 0x33b6 <main+0x14a2>
    3378:	fe 01       	movw	r30, r28
    337a:	eb 59       	subi	r30, 0x9B	; 155
    337c:	ff 4f       	sbci	r31, 0xFF	; 255
    337e:	88 ec       	ldi	r24, 0xC8	; 200
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	91 83       	std	Z+1, r25	; 0x01
    3384:	80 83       	st	Z, r24
    3386:	fe 01       	movw	r30, r28
    3388:	eb 59       	subi	r30, 0x9B	; 155
    338a:	ff 4f       	sbci	r31, 0xFF	; 255
    338c:	80 81       	ld	r24, Z
    338e:	91 81       	ldd	r25, Z+1	; 0x01
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	f1 f7       	brne	.-4      	; 0x3390 <main+0x147c>
    3394:	fe 01       	movw	r30, r28
    3396:	eb 59       	subi	r30, 0x9B	; 155
    3398:	ff 4f       	sbci	r31, 0xFF	; 255
    339a:	91 83       	std	Z+1, r25	; 0x01
    339c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    339e:	de 01       	movw	r26, r28
    33a0:	a9 59       	subi	r26, 0x99	; 153
    33a2:	bf 4f       	sbci	r27, 0xFF	; 255
    33a4:	fe 01       	movw	r30, r28
    33a6:	e9 59       	subi	r30, 0x99	; 153
    33a8:	ff 4f       	sbci	r31, 0xFF	; 255
    33aa:	80 81       	ld	r24, Z
    33ac:	91 81       	ldd	r25, Z+1	; 0x01
    33ae:	01 97       	sbiw	r24, 0x01	; 1
    33b0:	11 96       	adiw	r26, 0x01	; 1
    33b2:	9c 93       	st	X, r25
    33b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33b6:	fe 01       	movw	r30, r28
    33b8:	e9 59       	subi	r30, 0x99	; 153
    33ba:	ff 4f       	sbci	r31, 0xFF	; 255
    33bc:	80 81       	ld	r24, Z
    33be:	91 81       	ldd	r25, Z+1	; 0x01
    33c0:	00 97       	sbiw	r24, 0x00	; 0
    33c2:	d1 f6       	brne	.-76     	; 0x3378 <main+0x1464>
    33c4:	28 c0       	rjmp	.+80     	; 0x3416 <main+0x1502>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c6:	8e 01       	movw	r16, r28
    33c8:	09 59       	subi	r16, 0x99	; 153
    33ca:	1f 4f       	sbci	r17, 0xFF	; 255
    33cc:	fe 01       	movw	r30, r28
    33ce:	e7 59       	subi	r30, 0x97	; 151
    33d0:	ff 4f       	sbci	r31, 0xFF	; 255
    33d2:	60 81       	ld	r22, Z
    33d4:	71 81       	ldd	r23, Z+1	; 0x01
    33d6:	82 81       	ldd	r24, Z+2	; 0x02
    33d8:	93 81       	ldd	r25, Z+3	; 0x03
    33da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33de:	dc 01       	movw	r26, r24
    33e0:	cb 01       	movw	r24, r22
    33e2:	f8 01       	movw	r30, r16
    33e4:	91 83       	std	Z+1, r25	; 0x01
    33e6:	80 83       	st	Z, r24
    33e8:	de 01       	movw	r26, r28
    33ea:	ad 59       	subi	r26, 0x9D	; 157
    33ec:	bf 4f       	sbci	r27, 0xFF	; 255
    33ee:	fe 01       	movw	r30, r28
    33f0:	e9 59       	subi	r30, 0x99	; 153
    33f2:	ff 4f       	sbci	r31, 0xFF	; 255
    33f4:	80 81       	ld	r24, Z
    33f6:	91 81       	ldd	r25, Z+1	; 0x01
    33f8:	11 96       	adiw	r26, 0x01	; 1
    33fa:	9c 93       	st	X, r25
    33fc:	8e 93       	st	-X, r24
    33fe:	fe 01       	movw	r30, r28
    3400:	ed 59       	subi	r30, 0x9D	; 157
    3402:	ff 4f       	sbci	r31, 0xFF	; 255
    3404:	80 81       	ld	r24, Z
    3406:	91 81       	ldd	r25, Z+1	; 0x01
    3408:	01 97       	sbiw	r24, 0x01	; 1
    340a:	f1 f7       	brne	.-4      	; 0x3408 <main+0x14f4>
    340c:	fe 01       	movw	r30, r28
    340e:	ed 59       	subi	r30, 0x9D	; 157
    3410:	ff 4f       	sbci	r31, 0xFF	; 255
    3412:	91 83       	std	Z+1, r25	; 0x01
    3414:	80 83       	st	Z, r24
						_delay_ms(500);
					}
				} while (( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
    3416:	80 91 8c 02 	lds	r24, 0x028C
    341a:	80 33       	cpi	r24, 0x30	; 48
    341c:	28 f0       	brcs	.+10     	; 0x3428 <main+0x1514>
    341e:	80 91 8c 02 	lds	r24, 0x028C
    3422:	83 33       	cpi	r24, 0x33	; 51
    3424:	08 f4       	brcc	.+2      	; 0x3428 <main+0x1514>
    3426:	9a c4       	rjmp	.+2356   	; 0x3d5c <main+0x1e48>
    3428:	80 91 a4 02 	lds	r24, 0x02A4
    342c:	88 23       	and	r24, r24
    342e:	09 f4       	brne	.+2      	; 0x3432 <main+0x151e>
    3430:	4d ce       	rjmp	.-870    	; 0x30cc <main+0x11b8>
    3432:	94 c4       	rjmp	.+2344   	; 0x3d5c <main+0x1e48>
				break;//The End of air conditioning 

			case ROOM1_MENU:
				vMenuOption(ROOM1_MENU,login_mode);//call the function that show the menu of room 1
    3434:	90 91 a7 02 	lds	r25, 0x02A7
    3438:	83 e0       	ldi	r24, 0x03	; 3
    343a:	69 2f       	mov	r22, r25
    343c:	0e 94 51 29 	call	0x52a2	; 0x52a2 <vMenuOption>
				show_menu = MAIN_MENU;//shown to main menu
    3440:	fe 01       	movw	r30, r28
    3442:	e3 50       	subi	r30, 0x03	; 3
    3444:	ff 4f       	sbci	r31, 0xFF	; 255
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	80 83       	st	Z, r24
    344a:	88 c4       	rjmp	.+2320   	; 0x3d5c <main+0x1e48>
				break;//The End of room1 

			case ROOM2_MENU:
				vMenuOption(ROOM2_MENU,login_mode);//call the function that show the menu of room 2
    344c:	90 91 a7 02 	lds	r25, 0x02A7
    3450:	84 e0       	ldi	r24, 0x04	; 4
    3452:	69 2f       	mov	r22, r25
    3454:	0e 94 51 29 	call	0x52a2	; 0x52a2 <vMenuOption>
				show_menu = MAIN_MENU;//shown to main menu
    3458:	fe 01       	movw	r30, r28
    345a:	e3 50       	subi	r30, 0x03	; 3
    345c:	ff 4f       	sbci	r31, 0xFF	; 255
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	80 83       	st	Z, r24
    3462:	7c c4       	rjmp	.+2296   	; 0x3d5c <main+0x1e48>
				break;//The End of room2 

			case ROOM3_MENU:
				vMenuOption(ROOM3_MENU,login_mode);//call the function that show the menu of room 3
    3464:	90 91 a7 02 	lds	r25, 0x02A7
    3468:	85 e0       	ldi	r24, 0x05	; 5
    346a:	69 2f       	mov	r22, r25
    346c:	0e 94 51 29 	call	0x52a2	; 0x52a2 <vMenuOption>
				show_menu = MAIN_MENU;//shown to main menu
    3470:	fe 01       	movw	r30, r28
    3472:	e3 50       	subi	r30, 0x03	; 3
    3474:	ff 4f       	sbci	r31, 0xFF	; 255
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	80 83       	st	Z, r24
    347a:	70 c4       	rjmp	.+2272   	; 0x3d5c <main+0x1e48>
				break;//The End of room3 

			case ROOM4_MENU:
				vMenuOption(ROOM4_MENU,login_mode);//call the function that show the menu of room 4
    347c:	90 91 a7 02 	lds	r25, 0x02A7
    3480:	86 e0       	ldi	r24, 0x06	; 6
    3482:	69 2f       	mov	r22, r25
    3484:	0e 94 51 29 	call	0x52a2	; 0x52a2 <vMenuOption>
				if (login_mode == GUEST)//in case of guest is logged in
    3488:	80 91 a7 02 	lds	r24, 0x02A7
    348c:	82 30       	cpi	r24, 0x02	; 2
    348e:	09 f0       	breq	.+2      	; 0x3492 <main+0x157e>
    3490:	65 c4       	rjmp	.+2250   	; 0x3d5c <main+0x1e48>
				{
					show_menu = MAIN_MENU;//shown to main menu
    3492:	fe 01       	movw	r30, r28
    3494:	e3 50       	subi	r30, 0x03	; 3
    3496:	ff 4f       	sbci	r31, 0xFF	; 255
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	80 83       	st	Z, r24
    349c:	5f c4       	rjmp	.+2238   	; 0x3d5c <main+0x1e48>
				}
				break;//The End of room4 

			case TV_MENU:
				vMenuOption(TV_MENU,login_mode);//call the function that show the menu of tv
    349e:	90 91 a7 02 	lds	r25, 0x02A7
    34a2:	87 e0       	ldi	r24, 0x07	; 7
    34a4:	69 2f       	mov	r22, r25
    34a6:	0e 94 51 29 	call	0x52a2	; 0x52a2 <vMenuOption>
				show_menu = MAIN_MENU;//shown to more menu
    34aa:	fe 01       	movw	r30, r28
    34ac:	e3 50       	subi	r30, 0x03	; 3
    34ae:	ff 4f       	sbci	r31, 0xFF	; 255
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	80 83       	st	Z, r24
    34b4:	53 c4       	rjmp	.+2214   	; 0x3d5c <main+0x1e48>
				break;//The End of TV 

			case AIRCOND_CTRL_MENU:
				vMenuOption(AIRCOND_CTRL_MENU,login_mode);//call the function that show the menu of Air conditioning control
    34b6:	90 91 a7 02 	lds	r25, 0x02A7
    34ba:	89 e0       	ldi	r24, 0x09	; 9
    34bc:	69 2f       	mov	r22, r25
    34be:	0e 94 51 29 	call	0x52a2	; 0x52a2 <vMenuOption>
				show_menu = AIRCONDITIONING_MENU;//shown to air conditioning menu
    34c2:	fe 01       	movw	r30, r28
    34c4:	e3 50       	subi	r30, 0x03	; 3
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	88 e0       	ldi	r24, 0x08	; 8
    34ca:	80 83       	st	Z, r24
    34cc:	47 c4       	rjmp	.+2190   	; 0x3d5c <main+0x1e48>
				break;//The End of air conditioning control 

			case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
    34ce:	10 92 a6 02 	sts	0x02A6, r1
    34d2:	36 c4       	rjmp	.+2156   	; 0x3d40 <main+0x1e2c>
				while (temperature==0 && timeout_flag == FALSE)//start the loop that asks for the temperature from the user in case of the time is not out
				{
					key_pressed = NOT_PRESSED;
    34d4:	8f ef       	ldi	r24, 0xFF	; 255
    34d6:	80 93 8c 02 	sts	0x028C, r24
					LCD_clearscreen();
    34da:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
					LCD_vSend_string("Set temp.:__ ");//print the format of inserting temperature
    34de:	8f e4       	ldi	r24, 0x4F	; 79
    34e0:	91 e0       	ldi	r25, 0x01	; 1
    34e2:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
					LCD_vSend_char(DEGREES_SYMBOL); // print the symbol of degree
    34e6:	8f ed       	ldi	r24, 0xDF	; 223
    34e8:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_vSend_char>
					LCD_vSend_char('C'); // print the C character
    34ec:	83 e4       	ldi	r24, 0x43	; 67
    34ee:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_vSend_char>
					LCD_movecursor(1,11);//move the cursor to the place to write the entered temperature
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	6b e0       	ldi	r22, 0x0B	; 11
    34f6:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_movecursor>
    34fa:	fe 01       	movw	r30, r28
    34fc:	e1 5a       	subi	r30, 0xA1	; 161
    34fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3500:	80 e0       	ldi	r24, 0x00	; 0
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	a8 e4       	ldi	r26, 0x48	; 72
    3506:	b3 e4       	ldi	r27, 0x43	; 67
    3508:	80 83       	st	Z, r24
    350a:	91 83       	std	Z+1, r25	; 0x01
    350c:	a2 83       	std	Z+2, r26	; 0x02
    350e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3510:	8e 01       	movw	r16, r28
    3512:	05 5a       	subi	r16, 0xA5	; 165
    3514:	1f 4f       	sbci	r17, 0xFF	; 255
    3516:	fe 01       	movw	r30, r28
    3518:	e1 5a       	subi	r30, 0xA1	; 161
    351a:	ff 4f       	sbci	r31, 0xFF	; 255
    351c:	60 81       	ld	r22, Z
    351e:	71 81       	ldd	r23, Z+1	; 0x01
    3520:	82 81       	ldd	r24, Z+2	; 0x02
    3522:	93 81       	ldd	r25, Z+3	; 0x03
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	4a ef       	ldi	r20, 0xFA	; 250
    352a:	54 e4       	ldi	r21, 0x44	; 68
    352c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	f8 01       	movw	r30, r16
    3536:	80 83       	st	Z, r24
    3538:	91 83       	std	Z+1, r25	; 0x01
    353a:	a2 83       	std	Z+2, r26	; 0x02
    353c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    353e:	fe 01       	movw	r30, r28
    3540:	e5 5a       	subi	r30, 0xA5	; 165
    3542:	ff 4f       	sbci	r31, 0xFF	; 255
    3544:	60 81       	ld	r22, Z
    3546:	71 81       	ldd	r23, Z+1	; 0x01
    3548:	82 81       	ldd	r24, Z+2	; 0x02
    354a:	93 81       	ldd	r25, Z+3	; 0x03
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	40 e8       	ldi	r20, 0x80	; 128
    3552:	5f e3       	ldi	r21, 0x3F	; 63
    3554:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3558:	88 23       	and	r24, r24
    355a:	44 f4       	brge	.+16     	; 0x356c <main+0x1658>
		__ticks = 1;
    355c:	fe 01       	movw	r30, r28
    355e:	e7 5a       	subi	r30, 0xA7	; 167
    3560:	ff 4f       	sbci	r31, 0xFF	; 255
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	91 83       	std	Z+1, r25	; 0x01
    3568:	80 83       	st	Z, r24
    356a:	64 c0       	rjmp	.+200    	; 0x3634 <main+0x1720>
	else if (__tmp > 65535)
    356c:	fe 01       	movw	r30, r28
    356e:	e5 5a       	subi	r30, 0xA5	; 165
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	60 81       	ld	r22, Z
    3574:	71 81       	ldd	r23, Z+1	; 0x01
    3576:	82 81       	ldd	r24, Z+2	; 0x02
    3578:	93 81       	ldd	r25, Z+3	; 0x03
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	3f ef       	ldi	r19, 0xFF	; 255
    357e:	4f e7       	ldi	r20, 0x7F	; 127
    3580:	57 e4       	ldi	r21, 0x47	; 71
    3582:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3586:	18 16       	cp	r1, r24
    3588:	0c f0       	brlt	.+2      	; 0x358c <main+0x1678>
    358a:	43 c0       	rjmp	.+134    	; 0x3612 <main+0x16fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    358c:	fe 01       	movw	r30, r28
    358e:	e1 5a       	subi	r30, 0xA1	; 161
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	60 81       	ld	r22, Z
    3594:	71 81       	ldd	r23, Z+1	; 0x01
    3596:	82 81       	ldd	r24, Z+2	; 0x02
    3598:	93 81       	ldd	r25, Z+3	; 0x03
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	30 e0       	ldi	r19, 0x00	; 0
    359e:	40 e2       	ldi	r20, 0x20	; 32
    35a0:	51 e4       	ldi	r21, 0x41	; 65
    35a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	8e 01       	movw	r16, r28
    35ac:	07 5a       	subi	r16, 0xA7	; 167
    35ae:	1f 4f       	sbci	r17, 0xFF	; 255
    35b0:	bc 01       	movw	r22, r24
    35b2:	cd 01       	movw	r24, r26
    35b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	f8 01       	movw	r30, r16
    35be:	91 83       	std	Z+1, r25	; 0x01
    35c0:	80 83       	st	Z, r24
    35c2:	1f c0       	rjmp	.+62     	; 0x3602 <main+0x16ee>
    35c4:	fe 01       	movw	r30, r28
    35c6:	e9 5a       	subi	r30, 0xA9	; 169
    35c8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ca:	88 ec       	ldi	r24, 0xC8	; 200
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	91 83       	std	Z+1, r25	; 0x01
    35d0:	80 83       	st	Z, r24
    35d2:	fe 01       	movw	r30, r28
    35d4:	e9 5a       	subi	r30, 0xA9	; 169
    35d6:	ff 4f       	sbci	r31, 0xFF	; 255
    35d8:	80 81       	ld	r24, Z
    35da:	91 81       	ldd	r25, Z+1	; 0x01
    35dc:	01 97       	sbiw	r24, 0x01	; 1
    35de:	f1 f7       	brne	.-4      	; 0x35dc <main+0x16c8>
    35e0:	fe 01       	movw	r30, r28
    35e2:	e9 5a       	subi	r30, 0xA9	; 169
    35e4:	ff 4f       	sbci	r31, 0xFF	; 255
    35e6:	91 83       	std	Z+1, r25	; 0x01
    35e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ea:	de 01       	movw	r26, r28
    35ec:	a7 5a       	subi	r26, 0xA7	; 167
    35ee:	bf 4f       	sbci	r27, 0xFF	; 255
    35f0:	fe 01       	movw	r30, r28
    35f2:	e7 5a       	subi	r30, 0xA7	; 167
    35f4:	ff 4f       	sbci	r31, 0xFF	; 255
    35f6:	80 81       	ld	r24, Z
    35f8:	91 81       	ldd	r25, Z+1	; 0x01
    35fa:	01 97       	sbiw	r24, 0x01	; 1
    35fc:	11 96       	adiw	r26, 0x01	; 1
    35fe:	9c 93       	st	X, r25
    3600:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3602:	fe 01       	movw	r30, r28
    3604:	e7 5a       	subi	r30, 0xA7	; 167
    3606:	ff 4f       	sbci	r31, 0xFF	; 255
    3608:	80 81       	ld	r24, Z
    360a:	91 81       	ldd	r25, Z+1	; 0x01
    360c:	00 97       	sbiw	r24, 0x00	; 0
    360e:	d1 f6       	brne	.-76     	; 0x35c4 <main+0x16b0>
    3610:	27 c0       	rjmp	.+78     	; 0x3660 <main+0x174c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3612:	8e 01       	movw	r16, r28
    3614:	07 5a       	subi	r16, 0xA7	; 167
    3616:	1f 4f       	sbci	r17, 0xFF	; 255
    3618:	fe 01       	movw	r30, r28
    361a:	e5 5a       	subi	r30, 0xA5	; 165
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	60 81       	ld	r22, Z
    3620:	71 81       	ldd	r23, Z+1	; 0x01
    3622:	82 81       	ldd	r24, Z+2	; 0x02
    3624:	93 81       	ldd	r25, Z+3	; 0x03
    3626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	f8 01       	movw	r30, r16
    3630:	91 83       	std	Z+1, r25	; 0x01
    3632:	80 83       	st	Z, r24
    3634:	de 01       	movw	r26, r28
    3636:	ab 5a       	subi	r26, 0xAB	; 171
    3638:	bf 4f       	sbci	r27, 0xFF	; 255
    363a:	fe 01       	movw	r30, r28
    363c:	e7 5a       	subi	r30, 0xA7	; 167
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	80 81       	ld	r24, Z
    3642:	91 81       	ldd	r25, Z+1	; 0x01
    3644:	8d 93       	st	X+, r24
    3646:	9c 93       	st	X, r25
    3648:	fe 01       	movw	r30, r28
    364a:	eb 5a       	subi	r30, 0xAB	; 171
    364c:	ff 4f       	sbci	r31, 0xFF	; 255
    364e:	80 81       	ld	r24, Z
    3650:	91 81       	ldd	r25, Z+1	; 0x01
    3652:	01 97       	sbiw	r24, 0x01	; 1
    3654:	f1 f7       	brne	.-4      	; 0x3652 <main+0x173e>
    3656:	fe 01       	movw	r30, r28
    3658:	eb 5a       	subi	r30, 0xAB	; 171
    365a:	ff 4f       	sbci	r31, 0xFF	; 255
    365c:	91 83       	std	Z+1, r25	; 0x01
    365e:	80 83       	st	Z, r24
					_delay_ms(200);
					/*******************************************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
    3660:	80 91 a7 02 	lds	r24, 0x02A7
    3664:	0e 94 76 2b 	call	0x56ec	; 0x56ec <u8GetKeyPressed>
    3668:	80 93 8c 02 	sts	0x028C, r24
    366c:	fe 01       	movw	r30, r28
    366e:	ef 5a       	subi	r30, 0xAF	; 175
    3670:	ff 4f       	sbci	r31, 0xFF	; 255
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	aa e7       	ldi	r26, 0x7A	; 122
    3678:	b3 e4       	ldi	r27, 0x43	; 67
    367a:	80 83       	st	Z, r24
    367c:	91 83       	std	Z+1, r25	; 0x01
    367e:	a2 83       	std	Z+2, r26	; 0x02
    3680:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3682:	8e 01       	movw	r16, r28
    3684:	03 5b       	subi	r16, 0xB3	; 179
    3686:	1f 4f       	sbci	r17, 0xFF	; 255
    3688:	fe 01       	movw	r30, r28
    368a:	ef 5a       	subi	r30, 0xAF	; 175
    368c:	ff 4f       	sbci	r31, 0xFF	; 255
    368e:	60 81       	ld	r22, Z
    3690:	71 81       	ldd	r23, Z+1	; 0x01
    3692:	82 81       	ldd	r24, Z+2	; 0x02
    3694:	93 81       	ldd	r25, Z+3	; 0x03
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	4a ef       	ldi	r20, 0xFA	; 250
    369c:	54 e4       	ldi	r21, 0x44	; 68
    369e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a2:	dc 01       	movw	r26, r24
    36a4:	cb 01       	movw	r24, r22
    36a6:	f8 01       	movw	r30, r16
    36a8:	80 83       	st	Z, r24
    36aa:	91 83       	std	Z+1, r25	; 0x01
    36ac:	a2 83       	std	Z+2, r26	; 0x02
    36ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36b0:	fe 01       	movw	r30, r28
    36b2:	e3 5b       	subi	r30, 0xB3	; 179
    36b4:	ff 4f       	sbci	r31, 0xFF	; 255
    36b6:	60 81       	ld	r22, Z
    36b8:	71 81       	ldd	r23, Z+1	; 0x01
    36ba:	82 81       	ldd	r24, Z+2	; 0x02
    36bc:	93 81       	ldd	r25, Z+3	; 0x03
    36be:	20 e0       	ldi	r18, 0x00	; 0
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	40 e8       	ldi	r20, 0x80	; 128
    36c4:	5f e3       	ldi	r21, 0x3F	; 63
    36c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36ca:	88 23       	and	r24, r24
    36cc:	44 f4       	brge	.+16     	; 0x36de <main+0x17ca>
		__ticks = 1;
    36ce:	fe 01       	movw	r30, r28
    36d0:	e5 5b       	subi	r30, 0xB5	; 181
    36d2:	ff 4f       	sbci	r31, 0xFF	; 255
    36d4:	81 e0       	ldi	r24, 0x01	; 1
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	91 83       	std	Z+1, r25	; 0x01
    36da:	80 83       	st	Z, r24
    36dc:	64 c0       	rjmp	.+200    	; 0x37a6 <main+0x1892>
	else if (__tmp > 65535)
    36de:	fe 01       	movw	r30, r28
    36e0:	e3 5b       	subi	r30, 0xB3	; 179
    36e2:	ff 4f       	sbci	r31, 0xFF	; 255
    36e4:	60 81       	ld	r22, Z
    36e6:	71 81       	ldd	r23, Z+1	; 0x01
    36e8:	82 81       	ldd	r24, Z+2	; 0x02
    36ea:	93 81       	ldd	r25, Z+3	; 0x03
    36ec:	20 e0       	ldi	r18, 0x00	; 0
    36ee:	3f ef       	ldi	r19, 0xFF	; 255
    36f0:	4f e7       	ldi	r20, 0x7F	; 127
    36f2:	57 e4       	ldi	r21, 0x47	; 71
    36f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36f8:	18 16       	cp	r1, r24
    36fa:	0c f0       	brlt	.+2      	; 0x36fe <main+0x17ea>
    36fc:	43 c0       	rjmp	.+134    	; 0x3784 <main+0x1870>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36fe:	fe 01       	movw	r30, r28
    3700:	ef 5a       	subi	r30, 0xAF	; 175
    3702:	ff 4f       	sbci	r31, 0xFF	; 255
    3704:	60 81       	ld	r22, Z
    3706:	71 81       	ldd	r23, Z+1	; 0x01
    3708:	82 81       	ldd	r24, Z+2	; 0x02
    370a:	93 81       	ldd	r25, Z+3	; 0x03
    370c:	20 e0       	ldi	r18, 0x00	; 0
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	40 e2       	ldi	r20, 0x20	; 32
    3712:	51 e4       	ldi	r21, 0x41	; 65
    3714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	8e 01       	movw	r16, r28
    371e:	05 5b       	subi	r16, 0xB5	; 181
    3720:	1f 4f       	sbci	r17, 0xFF	; 255
    3722:	bc 01       	movw	r22, r24
    3724:	cd 01       	movw	r24, r26
    3726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    372a:	dc 01       	movw	r26, r24
    372c:	cb 01       	movw	r24, r22
    372e:	f8 01       	movw	r30, r16
    3730:	91 83       	std	Z+1, r25	; 0x01
    3732:	80 83       	st	Z, r24
    3734:	1f c0       	rjmp	.+62     	; 0x3774 <main+0x1860>
    3736:	fe 01       	movw	r30, r28
    3738:	e7 5b       	subi	r30, 0xB7	; 183
    373a:	ff 4f       	sbci	r31, 0xFF	; 255
    373c:	88 ec       	ldi	r24, 0xC8	; 200
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	91 83       	std	Z+1, r25	; 0x01
    3742:	80 83       	st	Z, r24
    3744:	fe 01       	movw	r30, r28
    3746:	e7 5b       	subi	r30, 0xB7	; 183
    3748:	ff 4f       	sbci	r31, 0xFF	; 255
    374a:	80 81       	ld	r24, Z
    374c:	91 81       	ldd	r25, Z+1	; 0x01
    374e:	01 97       	sbiw	r24, 0x01	; 1
    3750:	f1 f7       	brne	.-4      	; 0x374e <main+0x183a>
    3752:	fe 01       	movw	r30, r28
    3754:	e7 5b       	subi	r30, 0xB7	; 183
    3756:	ff 4f       	sbci	r31, 0xFF	; 255
    3758:	91 83       	std	Z+1, r25	; 0x01
    375a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    375c:	de 01       	movw	r26, r28
    375e:	a5 5b       	subi	r26, 0xB5	; 181
    3760:	bf 4f       	sbci	r27, 0xFF	; 255
    3762:	fe 01       	movw	r30, r28
    3764:	e5 5b       	subi	r30, 0xB5	; 181
    3766:	ff 4f       	sbci	r31, 0xFF	; 255
    3768:	80 81       	ld	r24, Z
    376a:	91 81       	ldd	r25, Z+1	; 0x01
    376c:	01 97       	sbiw	r24, 0x01	; 1
    376e:	11 96       	adiw	r26, 0x01	; 1
    3770:	9c 93       	st	X, r25
    3772:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3774:	fe 01       	movw	r30, r28
    3776:	e5 5b       	subi	r30, 0xB5	; 181
    3778:	ff 4f       	sbci	r31, 0xFF	; 255
    377a:	80 81       	ld	r24, Z
    377c:	91 81       	ldd	r25, Z+1	; 0x01
    377e:	00 97       	sbiw	r24, 0x00	; 0
    3780:	d1 f6       	brne	.-76     	; 0x3736 <main+0x1822>
    3782:	28 c0       	rjmp	.+80     	; 0x37d4 <main+0x18c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3784:	8e 01       	movw	r16, r28
    3786:	05 5b       	subi	r16, 0xB5	; 181
    3788:	1f 4f       	sbci	r17, 0xFF	; 255
    378a:	fe 01       	movw	r30, r28
    378c:	e3 5b       	subi	r30, 0xB3	; 179
    378e:	ff 4f       	sbci	r31, 0xFF	; 255
    3790:	60 81       	ld	r22, Z
    3792:	71 81       	ldd	r23, Z+1	; 0x01
    3794:	82 81       	ldd	r24, Z+2	; 0x02
    3796:	93 81       	ldd	r25, Z+3	; 0x03
    3798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    379c:	dc 01       	movw	r26, r24
    379e:	cb 01       	movw	r24, r22
    37a0:	f8 01       	movw	r30, r16
    37a2:	91 83       	std	Z+1, r25	; 0x01
    37a4:	80 83       	st	Z, r24
    37a6:	de 01       	movw	r26, r28
    37a8:	a9 5b       	subi	r26, 0xB9	; 185
    37aa:	bf 4f       	sbci	r27, 0xFF	; 255
    37ac:	fe 01       	movw	r30, r28
    37ae:	e5 5b       	subi	r30, 0xB5	; 181
    37b0:	ff 4f       	sbci	r31, 0xFF	; 255
    37b2:	80 81       	ld	r24, Z
    37b4:	91 81       	ldd	r25, Z+1	; 0x01
    37b6:	11 96       	adiw	r26, 0x01	; 1
    37b8:	9c 93       	st	X, r25
    37ba:	8e 93       	st	-X, r24
    37bc:	fe 01       	movw	r30, r28
    37be:	e9 5b       	subi	r30, 0xB9	; 185
    37c0:	ff 4f       	sbci	r31, 0xFF	; 255
    37c2:	80 81       	ld	r24, Z
    37c4:	91 81       	ldd	r25, Z+1	; 0x01
    37c6:	01 97       	sbiw	r24, 0x01	; 1
    37c8:	f1 f7       	brne	.-4      	; 0x37c6 <main+0x18b2>
    37ca:	fe 01       	movw	r30, r28
    37cc:	e9 5b       	subi	r30, 0xB9	; 185
    37ce:	ff 4f       	sbci	r31, 0xFF	; 255
    37d0:	91 83       	std	Z+1, r25	; 0x01
    37d2:	80 83       	st	Z, r24
					_delay_ms(250);

					if (timeout_flag == TRUE) //in case of the time is out before the user press a key
    37d4:	80 91 a4 02 	lds	r24, 0x02A4
    37d8:	81 30       	cpi	r24, 0x01	; 1
    37da:	09 f4       	brne	.+2      	; 0x37de <main+0x18ca>
    37dc:	ba c2       	rjmp	.+1396   	; 0x3d52 <main+0x1e3e>
					{
						break;//break the loop that ask for temperature
					}
					if (key_pressed <'0' || key_pressed >'9')//show wrong input message if the user entered non numeric value
    37de:	80 91 8c 02 	lds	r24, 0x028C
    37e2:	80 33       	cpi	r24, 0x30	; 48
    37e4:	28 f0       	brcs	.+10     	; 0x37f0 <main+0x18dc>
    37e6:	80 91 8c 02 	lds	r24, 0x028C
    37ea:	8a 33       	cpi	r24, 0x3A	; 58
    37ec:	08 f4       	brcc	.+2      	; 0x37f0 <main+0x18dc>
    37ee:	8c c0       	rjmp	.+280    	; 0x3908 <main+0x19f4>
					{
						LCD_clearscreen();
    37f0:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
						LCD_vSend_string("Wrong input");
    37f4:	8c ed       	ldi	r24, 0xDC	; 220
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    37fc:	fe 01       	movw	r30, r28
    37fe:	ed 5b       	subi	r30, 0xBD	; 189
    3800:	ff 4f       	sbci	r31, 0xFF	; 255
    3802:	80 e0       	ldi	r24, 0x00	; 0
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	aa ef       	ldi	r26, 0xFA	; 250
    3808:	b3 e4       	ldi	r27, 0x43	; 67
    380a:	80 83       	st	Z, r24
    380c:	91 83       	std	Z+1, r25	; 0x01
    380e:	a2 83       	std	Z+2, r26	; 0x02
    3810:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3812:	8e 01       	movw	r16, r28
    3814:	01 5c       	subi	r16, 0xC1	; 193
    3816:	1f 4f       	sbci	r17, 0xFF	; 255
    3818:	fe 01       	movw	r30, r28
    381a:	ed 5b       	subi	r30, 0xBD	; 189
    381c:	ff 4f       	sbci	r31, 0xFF	; 255
    381e:	60 81       	ld	r22, Z
    3820:	71 81       	ldd	r23, Z+1	; 0x01
    3822:	82 81       	ldd	r24, Z+2	; 0x02
    3824:	93 81       	ldd	r25, Z+3	; 0x03
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	4a ef       	ldi	r20, 0xFA	; 250
    382c:	54 e4       	ldi	r21, 0x44	; 68
    382e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3832:	dc 01       	movw	r26, r24
    3834:	cb 01       	movw	r24, r22
    3836:	f8 01       	movw	r30, r16
    3838:	80 83       	st	Z, r24
    383a:	91 83       	std	Z+1, r25	; 0x01
    383c:	a2 83       	std	Z+2, r26	; 0x02
    383e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3840:	fe 01       	movw	r30, r28
    3842:	ff 96       	adiw	r30, 0x3f	; 63
    3844:	60 81       	ld	r22, Z
    3846:	71 81       	ldd	r23, Z+1	; 0x01
    3848:	82 81       	ldd	r24, Z+2	; 0x02
    384a:	93 81       	ldd	r25, Z+3	; 0x03
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	40 e8       	ldi	r20, 0x80	; 128
    3852:	5f e3       	ldi	r21, 0x3F	; 63
    3854:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3858:	88 23       	and	r24, r24
    385a:	2c f4       	brge	.+10     	; 0x3866 <main+0x1952>
		__ticks = 1;
    385c:	81 e0       	ldi	r24, 0x01	; 1
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	9e af       	std	Y+62, r25	; 0x3e
    3862:	8d af       	std	Y+61, r24	; 0x3d
    3864:	46 c0       	rjmp	.+140    	; 0x38f2 <main+0x19de>
	else if (__tmp > 65535)
    3866:	fe 01       	movw	r30, r28
    3868:	ff 96       	adiw	r30, 0x3f	; 63
    386a:	60 81       	ld	r22, Z
    386c:	71 81       	ldd	r23, Z+1	; 0x01
    386e:	82 81       	ldd	r24, Z+2	; 0x02
    3870:	93 81       	ldd	r25, Z+3	; 0x03
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	3f ef       	ldi	r19, 0xFF	; 255
    3876:	4f e7       	ldi	r20, 0x7F	; 127
    3878:	57 e4       	ldi	r21, 0x47	; 71
    387a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    387e:	18 16       	cp	r1, r24
    3880:	64 f5       	brge	.+88     	; 0x38da <main+0x19c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3882:	fe 01       	movw	r30, r28
    3884:	ed 5b       	subi	r30, 0xBD	; 189
    3886:	ff 4f       	sbci	r31, 0xFF	; 255
    3888:	60 81       	ld	r22, Z
    388a:	71 81       	ldd	r23, Z+1	; 0x01
    388c:	82 81       	ldd	r24, Z+2	; 0x02
    388e:	93 81       	ldd	r25, Z+3	; 0x03
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	40 e2       	ldi	r20, 0x20	; 32
    3896:	51 e4       	ldi	r21, 0x41	; 65
    3898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    389c:	dc 01       	movw	r26, r24
    389e:	cb 01       	movw	r24, r22
    38a0:	bc 01       	movw	r22, r24
    38a2:	cd 01       	movw	r24, r26
    38a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a8:	dc 01       	movw	r26, r24
    38aa:	cb 01       	movw	r24, r22
    38ac:	9e af       	std	Y+62, r25	; 0x3e
    38ae:	8d af       	std	Y+61, r24	; 0x3d
    38b0:	0f c0       	rjmp	.+30     	; 0x38d0 <main+0x19bc>
    38b2:	88 ec       	ldi	r24, 0xC8	; 200
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	9c af       	std	Y+60, r25	; 0x3c
    38b8:	8b af       	std	Y+59, r24	; 0x3b
    38ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    38bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    38be:	01 97       	sbiw	r24, 0x01	; 1
    38c0:	f1 f7       	brne	.-4      	; 0x38be <main+0x19aa>
    38c2:	9c af       	std	Y+60, r25	; 0x3c
    38c4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    38c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    38ca:	01 97       	sbiw	r24, 0x01	; 1
    38cc:	9e af       	std	Y+62, r25	; 0x3e
    38ce:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    38d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    38d4:	00 97       	sbiw	r24, 0x00	; 0
    38d6:	69 f7       	brne	.-38     	; 0x38b2 <main+0x199e>
    38d8:	33 c2       	rjmp	.+1126   	; 0x3d40 <main+0x1e2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38da:	fe 01       	movw	r30, r28
    38dc:	ff 96       	adiw	r30, 0x3f	; 63
    38de:	60 81       	ld	r22, Z
    38e0:	71 81       	ldd	r23, Z+1	; 0x01
    38e2:	82 81       	ldd	r24, Z+2	; 0x02
    38e4:	93 81       	ldd	r25, Z+3	; 0x03
    38e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ea:	dc 01       	movw	r26, r24
    38ec:	cb 01       	movw	r24, r22
    38ee:	9e af       	std	Y+62, r25	; 0x3e
    38f0:	8d af       	std	Y+61, r24	; 0x3d
    38f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    38f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    38f6:	9a af       	std	Y+58, r25	; 0x3a
    38f8:	89 af       	std	Y+57, r24	; 0x39
    38fa:	89 ad       	ldd	r24, Y+57	; 0x39
    38fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    38fe:	01 97       	sbiw	r24, 0x01	; 1
    3900:	f1 f7       	brne	.-4      	; 0x38fe <main+0x19ea>
    3902:	9a af       	std	Y+58, r25	; 0x3a
    3904:	89 af       	std	Y+57, r24	; 0x39
    3906:	1c c2       	rjmp	.+1080   	; 0x3d40 <main+0x1e2c>
						_delay_ms(500);
						continue;//return to #while (temperature==0)
					}
					else//if the value is valid
					{
						LCD_vSend_char(key_pressed);//print the value on the lcd
    3908:	80 91 8c 02 	lds	r24, 0x028C
    390c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_vSend_char>
						temp_tens = key_pressed-ASCII_ZERO;//save the entered value
    3910:	80 91 8c 02 	lds	r24, 0x028C
    3914:	80 53       	subi	r24, 0x30	; 48
    3916:	80 93 8b 02 	sts	0x028B, r24
						key_pressed = NOT_PRESSED;
    391a:	8f ef       	ldi	r24, 0xFF	; 255
    391c:	80 93 8c 02 	sts	0x028C, r24
					}
					/*******************************************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
    3920:	80 91 a7 02 	lds	r24, 0x02A7
    3924:	0e 94 76 2b 	call	0x56ec	; 0x56ec <u8GetKeyPressed>
    3928:	80 93 8c 02 	sts	0x028C, r24
    392c:	80 e0       	ldi	r24, 0x00	; 0
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	aa e7       	ldi	r26, 0x7A	; 122
    3932:	b3 e4       	ldi	r27, 0x43	; 67
    3934:	8d ab       	std	Y+53, r24	; 0x35
    3936:	9e ab       	std	Y+54, r25	; 0x36
    3938:	af ab       	std	Y+55, r26	; 0x37
    393a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    393c:	6d a9       	ldd	r22, Y+53	; 0x35
    393e:	7e a9       	ldd	r23, Y+54	; 0x36
    3940:	8f a9       	ldd	r24, Y+55	; 0x37
    3942:	98 ad       	ldd	r25, Y+56	; 0x38
    3944:	20 e0       	ldi	r18, 0x00	; 0
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	4a ef       	ldi	r20, 0xFA	; 250
    394a:	54 e4       	ldi	r21, 0x44	; 68
    394c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	89 ab       	std	Y+49, r24	; 0x31
    3956:	9a ab       	std	Y+50, r25	; 0x32
    3958:	ab ab       	std	Y+51, r26	; 0x33
    395a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    395c:	69 a9       	ldd	r22, Y+49	; 0x31
    395e:	7a a9       	ldd	r23, Y+50	; 0x32
    3960:	8b a9       	ldd	r24, Y+51	; 0x33
    3962:	9c a9       	ldd	r25, Y+52	; 0x34
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	40 e8       	ldi	r20, 0x80	; 128
    396a:	5f e3       	ldi	r21, 0x3F	; 63
    396c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3970:	88 23       	and	r24, r24
    3972:	2c f4       	brge	.+10     	; 0x397e <main+0x1a6a>
		__ticks = 1;
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	98 ab       	std	Y+48, r25	; 0x30
    397a:	8f a7       	std	Y+47, r24	; 0x2f
    397c:	3f c0       	rjmp	.+126    	; 0x39fc <main+0x1ae8>
	else if (__tmp > 65535)
    397e:	69 a9       	ldd	r22, Y+49	; 0x31
    3980:	7a a9       	ldd	r23, Y+50	; 0x32
    3982:	8b a9       	ldd	r24, Y+51	; 0x33
    3984:	9c a9       	ldd	r25, Y+52	; 0x34
    3986:	20 e0       	ldi	r18, 0x00	; 0
    3988:	3f ef       	ldi	r19, 0xFF	; 255
    398a:	4f e7       	ldi	r20, 0x7F	; 127
    398c:	57 e4       	ldi	r21, 0x47	; 71
    398e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3992:	18 16       	cp	r1, r24
    3994:	4c f5       	brge	.+82     	; 0x39e8 <main+0x1ad4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3996:	6d a9       	ldd	r22, Y+53	; 0x35
    3998:	7e a9       	ldd	r23, Y+54	; 0x36
    399a:	8f a9       	ldd	r24, Y+55	; 0x37
    399c:	98 ad       	ldd	r25, Y+56	; 0x38
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	40 e2       	ldi	r20, 0x20	; 32
    39a4:	51 e4       	ldi	r21, 0x41	; 65
    39a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39aa:	dc 01       	movw	r26, r24
    39ac:	cb 01       	movw	r24, r22
    39ae:	bc 01       	movw	r22, r24
    39b0:	cd 01       	movw	r24, r26
    39b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	98 ab       	std	Y+48, r25	; 0x30
    39bc:	8f a7       	std	Y+47, r24	; 0x2f
    39be:	0f c0       	rjmp	.+30     	; 0x39de <main+0x1aca>
    39c0:	88 ec       	ldi	r24, 0xC8	; 200
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	9e a7       	std	Y+46, r25	; 0x2e
    39c6:	8d a7       	std	Y+45, r24	; 0x2d
    39c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    39ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    39cc:	01 97       	sbiw	r24, 0x01	; 1
    39ce:	f1 f7       	brne	.-4      	; 0x39cc <main+0x1ab8>
    39d0:	9e a7       	std	Y+46, r25	; 0x2e
    39d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    39d6:	98 a9       	ldd	r25, Y+48	; 0x30
    39d8:	01 97       	sbiw	r24, 0x01	; 1
    39da:	98 ab       	std	Y+48, r25	; 0x30
    39dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39de:	8f a5       	ldd	r24, Y+47	; 0x2f
    39e0:	98 a9       	ldd	r25, Y+48	; 0x30
    39e2:	00 97       	sbiw	r24, 0x00	; 0
    39e4:	69 f7       	brne	.-38     	; 0x39c0 <main+0x1aac>
    39e6:	14 c0       	rjmp	.+40     	; 0x3a10 <main+0x1afc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39e8:	69 a9       	ldd	r22, Y+49	; 0x31
    39ea:	7a a9       	ldd	r23, Y+50	; 0x32
    39ec:	8b a9       	ldd	r24, Y+51	; 0x33
    39ee:	9c a9       	ldd	r25, Y+52	; 0x34
    39f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	98 ab       	std	Y+48, r25	; 0x30
    39fa:	8f a7       	std	Y+47, r24	; 0x2f
    39fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    39fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3a00:	9c a7       	std	Y+44, r25	; 0x2c
    3a02:	8b a7       	std	Y+43, r24	; 0x2b
    3a04:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a06:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a08:	01 97       	sbiw	r24, 0x01	; 1
    3a0a:	f1 f7       	brne	.-4      	; 0x3a08 <main+0x1af4>
    3a0c:	9c a7       	std	Y+44, r25	; 0x2c
    3a0e:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(250);

					if (timeout_flag == TRUE)//if the user session is timeout
    3a10:	80 91 a4 02 	lds	r24, 0x02A4
    3a14:	81 30       	cpi	r24, 0x01	; 1
    3a16:	09 f4       	brne	.+2      	; 0x3a1a <main+0x1b06>
    3a18:	9c c1       	rjmp	.+824    	; 0x3d52 <main+0x1e3e>
					{
						break;//break the loop that ask for temperature
					}
					if ((key_pressed <'0' || key_pressed >'9'))//show wrong input message if the user entered non numeric value
    3a1a:	80 91 8c 02 	lds	r24, 0x028C
    3a1e:	80 33       	cpi	r24, 0x30	; 48
    3a20:	28 f0       	brcs	.+10     	; 0x3a2c <main+0x1b18>
    3a22:	80 91 8c 02 	lds	r24, 0x028C
    3a26:	8a 33       	cpi	r24, 0x3A	; 58
    3a28:	08 f4       	brcc	.+2      	; 0x3a2c <main+0x1b18>
    3a2a:	79 c0       	rjmp	.+242    	; 0x3b1e <main+0x1c0a>
					{
						LCD_clearscreen();
    3a2c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
						LCD_vSend_string("Wrong input");
    3a30:	8c ed       	ldi	r24, 0xDC	; 220
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	aa ef       	ldi	r26, 0xFA	; 250
    3a3e:	b3 e4       	ldi	r27, 0x43	; 67
    3a40:	8f a3       	std	Y+39, r24	; 0x27
    3a42:	98 a7       	std	Y+40, r25	; 0x28
    3a44:	a9 a7       	std	Y+41, r26	; 0x29
    3a46:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a48:	6f a1       	ldd	r22, Y+39	; 0x27
    3a4a:	78 a5       	ldd	r23, Y+40	; 0x28
    3a4c:	89 a5       	ldd	r24, Y+41	; 0x29
    3a4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a50:	20 e0       	ldi	r18, 0x00	; 0
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	4a ef       	ldi	r20, 0xFA	; 250
    3a56:	54 e4       	ldi	r21, 0x44	; 68
    3a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a5c:	dc 01       	movw	r26, r24
    3a5e:	cb 01       	movw	r24, r22
    3a60:	8b a3       	std	Y+35, r24	; 0x23
    3a62:	9c a3       	std	Y+36, r25	; 0x24
    3a64:	ad a3       	std	Y+37, r26	; 0x25
    3a66:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a68:	6b a1       	ldd	r22, Y+35	; 0x23
    3a6a:	7c a1       	ldd	r23, Y+36	; 0x24
    3a6c:	8d a1       	ldd	r24, Y+37	; 0x25
    3a6e:	9e a1       	ldd	r25, Y+38	; 0x26
    3a70:	20 e0       	ldi	r18, 0x00	; 0
    3a72:	30 e0       	ldi	r19, 0x00	; 0
    3a74:	40 e8       	ldi	r20, 0x80	; 128
    3a76:	5f e3       	ldi	r21, 0x3F	; 63
    3a78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a7c:	88 23       	and	r24, r24
    3a7e:	2c f4       	brge	.+10     	; 0x3a8a <main+0x1b76>
		__ticks = 1;
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	9a a3       	std	Y+34, r25	; 0x22
    3a86:	89 a3       	std	Y+33, r24	; 0x21
    3a88:	3f c0       	rjmp	.+126    	; 0x3b08 <main+0x1bf4>
	else if (__tmp > 65535)
    3a8a:	6b a1       	ldd	r22, Y+35	; 0x23
    3a8c:	7c a1       	ldd	r23, Y+36	; 0x24
    3a8e:	8d a1       	ldd	r24, Y+37	; 0x25
    3a90:	9e a1       	ldd	r25, Y+38	; 0x26
    3a92:	20 e0       	ldi	r18, 0x00	; 0
    3a94:	3f ef       	ldi	r19, 0xFF	; 255
    3a96:	4f e7       	ldi	r20, 0x7F	; 127
    3a98:	57 e4       	ldi	r21, 0x47	; 71
    3a9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a9e:	18 16       	cp	r1, r24
    3aa0:	4c f5       	brge	.+82     	; 0x3af4 <main+0x1be0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aa2:	6f a1       	ldd	r22, Y+39	; 0x27
    3aa4:	78 a5       	ldd	r23, Y+40	; 0x28
    3aa6:	89 a5       	ldd	r24, Y+41	; 0x29
    3aa8:	9a a5       	ldd	r25, Y+42	; 0x2a
    3aaa:	20 e0       	ldi	r18, 0x00	; 0
    3aac:	30 e0       	ldi	r19, 0x00	; 0
    3aae:	40 e2       	ldi	r20, 0x20	; 32
    3ab0:	51 e4       	ldi	r21, 0x41	; 65
    3ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab6:	dc 01       	movw	r26, r24
    3ab8:	cb 01       	movw	r24, r22
    3aba:	bc 01       	movw	r22, r24
    3abc:	cd 01       	movw	r24, r26
    3abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac2:	dc 01       	movw	r26, r24
    3ac4:	cb 01       	movw	r24, r22
    3ac6:	9a a3       	std	Y+34, r25	; 0x22
    3ac8:	89 a3       	std	Y+33, r24	; 0x21
    3aca:	0f c0       	rjmp	.+30     	; 0x3aea <main+0x1bd6>
    3acc:	88 ec       	ldi	r24, 0xC8	; 200
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	98 a3       	std	Y+32, r25	; 0x20
    3ad2:	8f 8f       	std	Y+31, r24	; 0x1f
    3ad4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ad6:	98 a1       	ldd	r25, Y+32	; 0x20
    3ad8:	01 97       	sbiw	r24, 0x01	; 1
    3ada:	f1 f7       	brne	.-4      	; 0x3ad8 <main+0x1bc4>
    3adc:	98 a3       	std	Y+32, r25	; 0x20
    3ade:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ae0:	89 a1       	ldd	r24, Y+33	; 0x21
    3ae2:	9a a1       	ldd	r25, Y+34	; 0x22
    3ae4:	01 97       	sbiw	r24, 0x01	; 1
    3ae6:	9a a3       	std	Y+34, r25	; 0x22
    3ae8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aea:	89 a1       	ldd	r24, Y+33	; 0x21
    3aec:	9a a1       	ldd	r25, Y+34	; 0x22
    3aee:	00 97       	sbiw	r24, 0x00	; 0
    3af0:	69 f7       	brne	.-38     	; 0x3acc <main+0x1bb8>
    3af2:	26 c1       	rjmp	.+588    	; 0x3d40 <main+0x1e2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3af4:	6b a1       	ldd	r22, Y+35	; 0x23
    3af6:	7c a1       	ldd	r23, Y+36	; 0x24
    3af8:	8d a1       	ldd	r24, Y+37	; 0x25
    3afa:	9e a1       	ldd	r25, Y+38	; 0x26
    3afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b00:	dc 01       	movw	r26, r24
    3b02:	cb 01       	movw	r24, r22
    3b04:	9a a3       	std	Y+34, r25	; 0x22
    3b06:	89 a3       	std	Y+33, r24	; 0x21
    3b08:	89 a1       	ldd	r24, Y+33	; 0x21
    3b0a:	9a a1       	ldd	r25, Y+34	; 0x22
    3b0c:	9e 8f       	std	Y+30, r25	; 0x1e
    3b0e:	8d 8f       	std	Y+29, r24	; 0x1d
    3b10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b14:	01 97       	sbiw	r24, 0x01	; 1
    3b16:	f1 f7       	brne	.-4      	; 0x3b14 <main+0x1c00>
    3b18:	9e 8f       	std	Y+30, r25	; 0x1e
    3b1a:	8d 8f       	std	Y+29, r24	; 0x1d
    3b1c:	11 c1       	rjmp	.+546    	; 0x3d40 <main+0x1e2c>
						_delay_ms(500);
						continue;//repeat the loop that ask for the temperature
					}
					else//if the value is valid
					{
						LCD_vSend_char(key_pressed);//print the value on the lcd
    3b1e:	80 91 8c 02 	lds	r24, 0x028C
    3b22:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_vSend_char>
						temp_ones = key_pressed-ASCII_ZERO;//save the entered value
    3b26:	80 91 8c 02 	lds	r24, 0x028C
    3b2a:	80 53       	subi	r24, 0x30	; 48
    3b2c:	80 93 8a 02 	sts	0x028A, r24
						key_pressed = NOT_PRESSED;
    3b30:	8f ef       	ldi	r24, 0xFF	; 255
    3b32:	80 93 8c 02 	sts	0x028C, r24
					}
					temperature = temp_tens*10 + temp_ones;//set the value of the temperature from the given separated values
    3b36:	80 91 8b 02 	lds	r24, 0x028B
    3b3a:	88 2f       	mov	r24, r24
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	9c 01       	movw	r18, r24
    3b40:	22 0f       	add	r18, r18
    3b42:	33 1f       	adc	r19, r19
    3b44:	c9 01       	movw	r24, r18
    3b46:	88 0f       	add	r24, r24
    3b48:	99 1f       	adc	r25, r25
    3b4a:	88 0f       	add	r24, r24
    3b4c:	99 1f       	adc	r25, r25
    3b4e:	82 0f       	add	r24, r18
    3b50:	93 1f       	adc	r25, r19
    3b52:	98 2f       	mov	r25, r24
    3b54:	80 91 8a 02 	lds	r24, 0x028A
    3b58:	89 0f       	add	r24, r25
    3b5a:	80 93 a6 02 	sts	0x02A6, r24
					SPI_ui8TransmitRecive(SET_TEMPERATURE);//Send the code of set temperature
    3b5e:	80 e4       	ldi	r24, 0x40	; 64
    3b60:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <SPI_ui8TransmitRecive>
    3b64:	80 e0       	ldi	r24, 0x00	; 0
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	a8 e4       	ldi	r26, 0x48	; 72
    3b6a:	b3 e4       	ldi	r27, 0x43	; 67
    3b6c:	89 8f       	std	Y+25, r24	; 0x19
    3b6e:	9a 8f       	std	Y+26, r25	; 0x1a
    3b70:	ab 8f       	std	Y+27, r26	; 0x1b
    3b72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b74:	69 8d       	ldd	r22, Y+25	; 0x19
    3b76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b7c:	20 e0       	ldi	r18, 0x00	; 0
    3b7e:	30 e0       	ldi	r19, 0x00	; 0
    3b80:	4a ef       	ldi	r20, 0xFA	; 250
    3b82:	54 e4       	ldi	r21, 0x44	; 68
    3b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b88:	dc 01       	movw	r26, r24
    3b8a:	cb 01       	movw	r24, r22
    3b8c:	8d 8b       	std	Y+21, r24	; 0x15
    3b8e:	9e 8b       	std	Y+22, r25	; 0x16
    3b90:	af 8b       	std	Y+23, r26	; 0x17
    3b92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b94:	6d 89       	ldd	r22, Y+21	; 0x15
    3b96:	7e 89       	ldd	r23, Y+22	; 0x16
    3b98:	8f 89       	ldd	r24, Y+23	; 0x17
    3b9a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b9c:	20 e0       	ldi	r18, 0x00	; 0
    3b9e:	30 e0       	ldi	r19, 0x00	; 0
    3ba0:	40 e8       	ldi	r20, 0x80	; 128
    3ba2:	5f e3       	ldi	r21, 0x3F	; 63
    3ba4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ba8:	88 23       	and	r24, r24
    3baa:	2c f4       	brge	.+10     	; 0x3bb6 <main+0x1ca2>
		__ticks = 1;
    3bac:	81 e0       	ldi	r24, 0x01	; 1
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	9c 8b       	std	Y+20, r25	; 0x14
    3bb2:	8b 8b       	std	Y+19, r24	; 0x13
    3bb4:	3f c0       	rjmp	.+126    	; 0x3c34 <main+0x1d20>
	else if (__tmp > 65535)
    3bb6:	6d 89       	ldd	r22, Y+21	; 0x15
    3bb8:	7e 89       	ldd	r23, Y+22	; 0x16
    3bba:	8f 89       	ldd	r24, Y+23	; 0x17
    3bbc:	98 8d       	ldd	r25, Y+24	; 0x18
    3bbe:	20 e0       	ldi	r18, 0x00	; 0
    3bc0:	3f ef       	ldi	r19, 0xFF	; 255
    3bc2:	4f e7       	ldi	r20, 0x7F	; 127
    3bc4:	57 e4       	ldi	r21, 0x47	; 71
    3bc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bca:	18 16       	cp	r1, r24
    3bcc:	4c f5       	brge	.+82     	; 0x3c20 <main+0x1d0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bce:	69 8d       	ldd	r22, Y+25	; 0x19
    3bd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bd6:	20 e0       	ldi	r18, 0x00	; 0
    3bd8:	30 e0       	ldi	r19, 0x00	; 0
    3bda:	40 e2       	ldi	r20, 0x20	; 32
    3bdc:	51 e4       	ldi	r21, 0x41	; 65
    3bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be2:	dc 01       	movw	r26, r24
    3be4:	cb 01       	movw	r24, r22
    3be6:	bc 01       	movw	r22, r24
    3be8:	cd 01       	movw	r24, r26
    3bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bee:	dc 01       	movw	r26, r24
    3bf0:	cb 01       	movw	r24, r22
    3bf2:	9c 8b       	std	Y+20, r25	; 0x14
    3bf4:	8b 8b       	std	Y+19, r24	; 0x13
    3bf6:	0f c0       	rjmp	.+30     	; 0x3c16 <main+0x1d02>
    3bf8:	88 ec       	ldi	r24, 0xC8	; 200
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	9a 8b       	std	Y+18, r25	; 0x12
    3bfe:	89 8b       	std	Y+17, r24	; 0x11
    3c00:	89 89       	ldd	r24, Y+17	; 0x11
    3c02:	9a 89       	ldd	r25, Y+18	; 0x12
    3c04:	01 97       	sbiw	r24, 0x01	; 1
    3c06:	f1 f7       	brne	.-4      	; 0x3c04 <main+0x1cf0>
    3c08:	9a 8b       	std	Y+18, r25	; 0x12
    3c0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c0c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c0e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c10:	01 97       	sbiw	r24, 0x01	; 1
    3c12:	9c 8b       	std	Y+20, r25	; 0x14
    3c14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c16:	8b 89       	ldd	r24, Y+19	; 0x13
    3c18:	9c 89       	ldd	r25, Y+20	; 0x14
    3c1a:	00 97       	sbiw	r24, 0x00	; 0
    3c1c:	69 f7       	brne	.-38     	; 0x3bf8 <main+0x1ce4>
    3c1e:	14 c0       	rjmp	.+40     	; 0x3c48 <main+0x1d34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c20:	6d 89       	ldd	r22, Y+21	; 0x15
    3c22:	7e 89       	ldd	r23, Y+22	; 0x16
    3c24:	8f 89       	ldd	r24, Y+23	; 0x17
    3c26:	98 8d       	ldd	r25, Y+24	; 0x18
    3c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c2c:	dc 01       	movw	r26, r24
    3c2e:	cb 01       	movw	r24, r22
    3c30:	9c 8b       	std	Y+20, r25	; 0x14
    3c32:	8b 8b       	std	Y+19, r24	; 0x13
    3c34:	8b 89       	ldd	r24, Y+19	; 0x13
    3c36:	9c 89       	ldd	r25, Y+20	; 0x14
    3c38:	98 8b       	std	Y+16, r25	; 0x10
    3c3a:	8f 87       	std	Y+15, r24	; 0x0f
    3c3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c3e:	98 89       	ldd	r25, Y+16	; 0x10
    3c40:	01 97       	sbiw	r24, 0x01	; 1
    3c42:	f1 f7       	brne	.-4      	; 0x3c40 <main+0x1d2c>
    3c44:	98 8b       	std	Y+16, r25	; 0x10
    3c46:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(200);//Halt the system to prevent write collision
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
    3c48:	80 91 a6 02 	lds	r24, 0x02A6
    3c4c:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <SPI_ui8TransmitRecive>
					LCD_clearscreen();
    3c50:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
					LCD_vSend_string("Temperature Sent");//show the message
    3c54:	8d e5       	ldi	r24, 0x5D	; 93
    3c56:	91 e0       	ldi	r25, 0x01	; 1
    3c58:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    3c5c:	80 e0       	ldi	r24, 0x00	; 0
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	aa ef       	ldi	r26, 0xFA	; 250
    3c62:	b3 e4       	ldi	r27, 0x43	; 67
    3c64:	8b 87       	std	Y+11, r24	; 0x0b
    3c66:	9c 87       	std	Y+12, r25	; 0x0c
    3c68:	ad 87       	std	Y+13, r26	; 0x0d
    3c6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c70:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c72:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c74:	20 e0       	ldi	r18, 0x00	; 0
    3c76:	30 e0       	ldi	r19, 0x00	; 0
    3c78:	4a ef       	ldi	r20, 0xFA	; 250
    3c7a:	54 e4       	ldi	r21, 0x44	; 68
    3c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c80:	dc 01       	movw	r26, r24
    3c82:	cb 01       	movw	r24, r22
    3c84:	8f 83       	std	Y+7, r24	; 0x07
    3c86:	98 87       	std	Y+8, r25	; 0x08
    3c88:	a9 87       	std	Y+9, r26	; 0x09
    3c8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c8e:	78 85       	ldd	r23, Y+8	; 0x08
    3c90:	89 85       	ldd	r24, Y+9	; 0x09
    3c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c94:	20 e0       	ldi	r18, 0x00	; 0
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	40 e8       	ldi	r20, 0x80	; 128
    3c9a:	5f e3       	ldi	r21, 0x3F	; 63
    3c9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ca0:	88 23       	and	r24, r24
    3ca2:	2c f4       	brge	.+10     	; 0x3cae <main+0x1d9a>
		__ticks = 1;
    3ca4:	81 e0       	ldi	r24, 0x01	; 1
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	9e 83       	std	Y+6, r25	; 0x06
    3caa:	8d 83       	std	Y+5, r24	; 0x05
    3cac:	3f c0       	rjmp	.+126    	; 0x3d2c <main+0x1e18>
	else if (__tmp > 65535)
    3cae:	6f 81       	ldd	r22, Y+7	; 0x07
    3cb0:	78 85       	ldd	r23, Y+8	; 0x08
    3cb2:	89 85       	ldd	r24, Y+9	; 0x09
    3cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cb6:	20 e0       	ldi	r18, 0x00	; 0
    3cb8:	3f ef       	ldi	r19, 0xFF	; 255
    3cba:	4f e7       	ldi	r20, 0x7F	; 127
    3cbc:	57 e4       	ldi	r21, 0x47	; 71
    3cbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cc2:	18 16       	cp	r1, r24
    3cc4:	4c f5       	brge	.+82     	; 0x3d18 <main+0x1e04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cca:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cce:	20 e0       	ldi	r18, 0x00	; 0
    3cd0:	30 e0       	ldi	r19, 0x00	; 0
    3cd2:	40 e2       	ldi	r20, 0x20	; 32
    3cd4:	51 e4       	ldi	r21, 0x41	; 65
    3cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cda:	dc 01       	movw	r26, r24
    3cdc:	cb 01       	movw	r24, r22
    3cde:	bc 01       	movw	r22, r24
    3ce0:	cd 01       	movw	r24, r26
    3ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ce6:	dc 01       	movw	r26, r24
    3ce8:	cb 01       	movw	r24, r22
    3cea:	9e 83       	std	Y+6, r25	; 0x06
    3cec:	8d 83       	std	Y+5, r24	; 0x05
    3cee:	0f c0       	rjmp	.+30     	; 0x3d0e <main+0x1dfa>
    3cf0:	88 ec       	ldi	r24, 0xC8	; 200
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	9c 83       	std	Y+4, r25	; 0x04
    3cf6:	8b 83       	std	Y+3, r24	; 0x03
    3cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    3cfc:	01 97       	sbiw	r24, 0x01	; 1
    3cfe:	f1 f7       	brne	.-4      	; 0x3cfc <main+0x1de8>
    3d00:	9c 83       	std	Y+4, r25	; 0x04
    3d02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d04:	8d 81       	ldd	r24, Y+5	; 0x05
    3d06:	9e 81       	ldd	r25, Y+6	; 0x06
    3d08:	01 97       	sbiw	r24, 0x01	; 1
    3d0a:	9e 83       	std	Y+6, r25	; 0x06
    3d0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d10:	9e 81       	ldd	r25, Y+6	; 0x06
    3d12:	00 97       	sbiw	r24, 0x00	; 0
    3d14:	69 f7       	brne	.-38     	; 0x3cf0 <main+0x1ddc>
    3d16:	14 c0       	rjmp	.+40     	; 0x3d40 <main+0x1e2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d18:	6f 81       	ldd	r22, Y+7	; 0x07
    3d1a:	78 85       	ldd	r23, Y+8	; 0x08
    3d1c:	89 85       	ldd	r24, Y+9	; 0x09
    3d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d24:	dc 01       	movw	r26, r24
    3d26:	cb 01       	movw	r24, r22
    3d28:	9e 83       	std	Y+6, r25	; 0x06
    3d2a:	8d 83       	std	Y+5, r24	; 0x05
    3d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d30:	9a 83       	std	Y+2, r25	; 0x02
    3d32:	89 83       	std	Y+1, r24	; 0x01
    3d34:	89 81       	ldd	r24, Y+1	; 0x01
    3d36:	9a 81       	ldd	r25, Y+2	; 0x02
    3d38:	01 97       	sbiw	r24, 0x01	; 1
    3d3a:	f1 f7       	brne	.-4      	; 0x3d38 <main+0x1e24>
    3d3c:	9a 83       	std	Y+2, r25	; 0x02
    3d3e:	89 83       	std	Y+1, r24	; 0x01
				show_menu = AIRCONDITIONING_MENU;//shown to air conditioning menu
				break;//The End of air conditioning control 

			case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
				while (temperature==0 && timeout_flag == FALSE)//start the loop that asks for the temperature from the user in case of the time is not out
    3d40:	80 91 a6 02 	lds	r24, 0x02A6
    3d44:	88 23       	and	r24, r24
    3d46:	29 f4       	brne	.+10     	; 0x3d52 <main+0x1e3e>
    3d48:	80 91 a4 02 	lds	r24, 0x02A4
    3d4c:	88 23       	and	r24, r24
    3d4e:	09 f4       	brne	.+2      	; 0x3d52 <main+0x1e3e>
    3d50:	c1 cb       	rjmp	.-2174   	; 0x34d4 <main+0x15c0>
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
					LCD_clearscreen();
					LCD_vSend_string("Temperature Sent");//show the message
					_delay_ms(500);
				}
				show_menu = AIRCONDITIONING_MENU;//shown to air conditioning menu
    3d52:	fe 01       	movw	r30, r28
    3d54:	e3 50       	subi	r30, 0x03	; 3
    3d56:	ff 4f       	sbci	r31, 0xFF	; 255
    3d58:	88 e0       	ldi	r24, 0x08	; 8
    3d5a:	80 83       	st	Z, r24

		/*************************************************************************************************/
		uint8 show_menu = MAIN_MENU;


		while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
    3d5c:	80 91 a4 02 	lds	r24, 0x02A4
    3d60:	81 30       	cpi	r24, 0x01	; 1
    3d62:	11 f0       	breq	.+4      	; 0x3d68 <main+0x1e54>
    3d64:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <main+0x5a8>
    3d68:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <main+0x2a>

00003d6c <__vector_10>:
		}//The End of while that repeats the menu after each successful action till session timeout
	}// The End of the main while(1)
}//The End of main function

ISR(TIMER0_COMP_vect)
{
    3d6c:	1f 92       	push	r1
    3d6e:	0f 92       	push	r0
    3d70:	0f b6       	in	r0, 0x3f	; 63
    3d72:	0f 92       	push	r0
    3d74:	11 24       	eor	r1, r1
    3d76:	8f 93       	push	r24
    3d78:	9f 93       	push	r25
    3d7a:	df 93       	push	r29
    3d7c:	cf 93       	push	r28
    3d7e:	cd b7       	in	r28, 0x3d	; 61
    3d80:	de b7       	in	r29, 0x3e	; 62
	session_counter++;//increase the indicator of session time for every tick
    3d82:	80 91 a2 02 	lds	r24, 0x02A2
    3d86:	90 91 a3 02 	lds	r25, 0x02A3
    3d8a:	01 96       	adiw	r24, 0x01	; 1
    3d8c:	90 93 a3 02 	sts	0x02A3, r25
    3d90:	80 93 a2 02 	sts	0x02A2, r24
}
    3d94:	cf 91       	pop	r28
    3d96:	df 91       	pop	r29
    3d98:	9f 91       	pop	r25
    3d9a:	8f 91       	pop	r24
    3d9c:	0f 90       	pop	r0
    3d9e:	0f be       	out	0x3f, r0	; 63
    3da0:	0f 90       	pop	r0
    3da2:	1f 90       	pop	r1
    3da4:	18 95       	reti

00003da6 <initializeSystem>:

void initializeSystem(void)
{
    3da6:	df 93       	push	r29
    3da8:	cf 93       	push	r28
    3daa:	cd b7       	in	r28, 0x3d	; 61
    3dac:	de b7       	in	r29, 0x3e	; 62
	// Initialize hardware
	/*****************  INITIALIZE  ***********************/
	LED_vInit(ADMIN_LED_PORT,ADMIN_LED_PIN);//initializes the led of admin
    3dae:	83 e4       	ldi	r24, 0x43	; 67
    3db0:	60 e0       	ldi	r22, 0x00	; 0
    3db2:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LED_vInit>
	LED_vInit(GUEST_LED_PORT,GUEST_LED_PIN);//initializes the led of guest
    3db6:	83 e4       	ldi	r24, 0x43	; 67
    3db8:	61 e0       	ldi	r22, 0x01	; 1
    3dba:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LED_vInit>
	LED_vInit(BLOCK_LED_PORT,BLOCK_LED_PIN);//initializes the led of block
    3dbe:	83 e4       	ldi	r24, 0x43	; 67
    3dc0:	62 e0       	ldi	r22, 0x02	; 2
    3dc2:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LED_vInit>
	LCD_vInit();//initializes the LCD screen
    3dc6:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_vInit>
	keypad_vInit();//initializes the keypad
    3dca:	0e 94 55 0e 	call	0x1caa	; 0x1caa <keypad_vInit>
	SPI_vInitMaster();//initializes the communication protocol of SPI
    3dce:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <SPI_vInitMaster>
	/******************************************************/
	// You may need to configure hardware peripherals and load passwords here
}
    3dd2:	cf 91       	pop	r28
    3dd4:	df 91       	pop	r29
    3dd6:	08 95       	ret

00003dd8 <printWelcomeScreen>:
void printWelcomeScreen(void)
{
    3dd8:	df 93       	push	r29
    3dda:	cf 93       	push	r28
    3ddc:	cd b7       	in	r28, 0x3d	; 61
    3dde:	de b7       	in	r29, 0x3e	; 62
    3de0:	2e 97       	sbiw	r28, 0x0e	; 14
    3de2:	0f b6       	in	r0, 0x3f	; 63
    3de4:	f8 94       	cli
    3de6:	de bf       	out	0x3e, r29	; 62
    3de8:	0f be       	out	0x3f, r0	; 63
    3dea:	cd bf       	out	0x3d, r28	; 61
	/* Printing Welcome screen */
	LCD_vSend_string("Welcome to smart");
    3dec:	8e e6       	ldi	r24, 0x6E	; 110
    3dee:	91 e0       	ldi	r25, 0x01	; 1
    3df0:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
	LCD_movecursor(2,1);
    3df4:	82 e0       	ldi	r24, 0x02	; 2
    3df6:	61 e0       	ldi	r22, 0x01	; 1
    3df8:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_movecursor>
	LCD_vSend_string("home system");
    3dfc:	8f e7       	ldi	r24, 0x7F	; 127
    3dfe:	91 e0       	ldi	r25, 0x01	; 1
    3e00:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    3e04:	80 e0       	ldi	r24, 0x00	; 0
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	aa e7       	ldi	r26, 0x7A	; 122
    3e0a:	b4 e4       	ldi	r27, 0x44	; 68
    3e0c:	8b 87       	std	Y+11, r24	; 0x0b
    3e0e:	9c 87       	std	Y+12, r25	; 0x0c
    3e10:	ad 87       	std	Y+13, r26	; 0x0d
    3e12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e14:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e16:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	4a ef       	ldi	r20, 0xFA	; 250
    3e22:	54 e4       	ldi	r21, 0x44	; 68
    3e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	8f 83       	std	Y+7, r24	; 0x07
    3e2e:	98 87       	std	Y+8, r25	; 0x08
    3e30:	a9 87       	std	Y+9, r26	; 0x09
    3e32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e34:	6f 81       	ldd	r22, Y+7	; 0x07
    3e36:	78 85       	ldd	r23, Y+8	; 0x08
    3e38:	89 85       	ldd	r24, Y+9	; 0x09
    3e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e3c:	20 e0       	ldi	r18, 0x00	; 0
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	40 e8       	ldi	r20, 0x80	; 128
    3e42:	5f e3       	ldi	r21, 0x3F	; 63
    3e44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e48:	88 23       	and	r24, r24
    3e4a:	2c f4       	brge	.+10     	; 0x3e56 <printWelcomeScreen+0x7e>
		__ticks = 1;
    3e4c:	81 e0       	ldi	r24, 0x01	; 1
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	9e 83       	std	Y+6, r25	; 0x06
    3e52:	8d 83       	std	Y+5, r24	; 0x05
    3e54:	3f c0       	rjmp	.+126    	; 0x3ed4 <printWelcomeScreen+0xfc>
	else if (__tmp > 65535)
    3e56:	6f 81       	ldd	r22, Y+7	; 0x07
    3e58:	78 85       	ldd	r23, Y+8	; 0x08
    3e5a:	89 85       	ldd	r24, Y+9	; 0x09
    3e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e5e:	20 e0       	ldi	r18, 0x00	; 0
    3e60:	3f ef       	ldi	r19, 0xFF	; 255
    3e62:	4f e7       	ldi	r20, 0x7F	; 127
    3e64:	57 e4       	ldi	r21, 0x47	; 71
    3e66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e6a:	18 16       	cp	r1, r24
    3e6c:	4c f5       	brge	.+82     	; 0x3ec0 <printWelcomeScreen+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e70:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e72:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e74:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e76:	20 e0       	ldi	r18, 0x00	; 0
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	40 e2       	ldi	r20, 0x20	; 32
    3e7c:	51 e4       	ldi	r21, 0x41	; 65
    3e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e82:	dc 01       	movw	r26, r24
    3e84:	cb 01       	movw	r24, r22
    3e86:	bc 01       	movw	r22, r24
    3e88:	cd 01       	movw	r24, r26
    3e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e8e:	dc 01       	movw	r26, r24
    3e90:	cb 01       	movw	r24, r22
    3e92:	9e 83       	std	Y+6, r25	; 0x06
    3e94:	8d 83       	std	Y+5, r24	; 0x05
    3e96:	0f c0       	rjmp	.+30     	; 0x3eb6 <printWelcomeScreen+0xde>
    3e98:	88 ec       	ldi	r24, 0xC8	; 200
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	9c 83       	std	Y+4, r25	; 0x04
    3e9e:	8b 83       	std	Y+3, r24	; 0x03
    3ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ea4:	01 97       	sbiw	r24, 0x01	; 1
    3ea6:	f1 f7       	brne	.-4      	; 0x3ea4 <printWelcomeScreen+0xcc>
    3ea8:	9c 83       	std	Y+4, r25	; 0x04
    3eaa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eac:	8d 81       	ldd	r24, Y+5	; 0x05
    3eae:	9e 81       	ldd	r25, Y+6	; 0x06
    3eb0:	01 97       	sbiw	r24, 0x01	; 1
    3eb2:	9e 83       	std	Y+6, r25	; 0x06
    3eb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3eba:	00 97       	sbiw	r24, 0x00	; 0
    3ebc:	69 f7       	brne	.-38     	; 0x3e98 <printWelcomeScreen+0xc0>
    3ebe:	14 c0       	rjmp	.+40     	; 0x3ee8 <printWelcomeScreen+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ec2:	78 85       	ldd	r23, Y+8	; 0x08
    3ec4:	89 85       	ldd	r24, Y+9	; 0x09
    3ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ecc:	dc 01       	movw	r26, r24
    3ece:	cb 01       	movw	r24, r22
    3ed0:	9e 83       	std	Y+6, r25	; 0x06
    3ed2:	8d 83       	std	Y+5, r24	; 0x05
    3ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ed8:	9a 83       	std	Y+2, r25	; 0x02
    3eda:	89 83       	std	Y+1, r24	; 0x01
    3edc:	89 81       	ldd	r24, Y+1	; 0x01
    3ede:	9a 81       	ldd	r25, Y+2	; 0x02
    3ee0:	01 97       	sbiw	r24, 0x01	; 1
    3ee2:	f1 f7       	brne	.-4      	; 0x3ee0 <printWelcomeScreen+0x108>
    3ee4:	9a 83       	std	Y+2, r25	; 0x02
    3ee6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_clearscreen();//remove all and move the cursor to the first column of the first row
    3ee8:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
}
    3eec:	2e 96       	adiw	r28, 0x0e	; 14
    3eee:	0f b6       	in	r0, 0x3f	; 63
    3ef0:	f8 94       	cli
    3ef2:	de bf       	out	0x3e, r29	; 62
    3ef4:	0f be       	out	0x3f, r0	; 63
    3ef6:	cd bf       	out	0x3d, r28	; 61
    3ef8:	cf 91       	pop	r28
    3efa:	df 91       	pop	r29
    3efc:	08 95       	ret

00003efe <setAdminPassword>:
void setAdminPassword(void)
{
    3efe:	df 93       	push	r29
    3f00:	cf 93       	push	r28
    3f02:	cd b7       	in	r28, 0x3d	; 61
    3f04:	de b7       	in	r29, 0x3e	; 62
    3f06:	aa 97       	sbiw	r28, 0x2a	; 42
    3f08:	0f b6       	in	r0, 0x3f	; 63
    3f0a:	f8 94       	cli
    3f0c:	de bf       	out	0x3e, r29	; 62
    3f0e:	0f be       	out	0x3f, r0	; 63
    3f10:	cd bf       	out	0x3d, r28	; 61
	LCD_clearscreen();
    3f12:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
	LCD_vSend_string("Set Admin pass");
    3f16:	8b e8       	ldi	r24, 0x8B	; 139
    3f18:	91 e0       	ldi	r25, 0x01	; 1
    3f1a:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
	LCD_movecursor(2,1);
    3f1e:	82 e0       	ldi	r24, 0x02	; 2
    3f20:	61 e0       	ldi	r22, 0x01	; 1
    3f22:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_movecursor>
	LCD_vSend_string("Admin pass:");
    3f26:	8a e9       	ldi	r24, 0x9A	; 154
    3f28:	91 e0       	ldi	r25, 0x01	; 1
    3f2a:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
	key_pressed = NOT_PRESSED;
    3f2e:	8f ef       	ldi	r24, 0xFF	; 255
    3f30:	80 93 8c 02 	sts	0x028C, r24
	pass_counter=0;
    3f34:	10 92 aa 02 	sts	0x02AA, r1

	for ( pass_counter = 0; pass_counter < PASS_SIZE; pass_counter++)
    3f38:	10 92 aa 02 	sts	0x02AA, r1
    3f3c:	0e c0       	rjmp	.+28     	; 0x3f5a <setAdminPassword+0x5c>
	{
		Adminpass[pass_counter]= NOT_STORED;
    3f3e:	80 91 aa 02 	lds	r24, 0x02AA
    3f42:	88 2f       	mov	r24, r24
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	fc 01       	movw	r30, r24
    3f48:	e5 55       	subi	r30, 0x55	; 85
    3f4a:	fd 4f       	sbci	r31, 0xFD	; 253
    3f4c:	8f ef       	ldi	r24, 0xFF	; 255
    3f4e:	80 83       	st	Z, r24
	LCD_movecursor(2,1);
	LCD_vSend_string("Admin pass:");
	key_pressed = NOT_PRESSED;
	pass_counter=0;

	for ( pass_counter = 0; pass_counter < PASS_SIZE; pass_counter++)
    3f50:	80 91 aa 02 	lds	r24, 0x02AA
    3f54:	8f 5f       	subi	r24, 0xFF	; 255
    3f56:	80 93 aa 02 	sts	0x02AA, r24
    3f5a:	80 91 aa 02 	lds	r24, 0x02AA
    3f5e:	84 30       	cpi	r24, 0x04	; 4
    3f60:	70 f3       	brcs	.-36     	; 0x3f3e <setAdminPassword+0x40>
	{
		Adminpass[pass_counter]= NOT_STORED;
	}
	pass_counter=0;
    3f62:	10 92 aa 02 	sts	0x02AA, r1
    3f66:	0f c1       	rjmp	.+542    	; 0x4186 <setAdminPassword+0x288>
	while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
	{

		key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
    3f68:	8f ef       	ldi	r24, 0xFF	; 255
    3f6a:	80 93 8c 02 	sts	0x028C, r24
    3f6e:	04 c0       	rjmp	.+8      	; 0x3f78 <setAdminPassword+0x7a>
		while (key_pressed == NOT_PRESSED)//repeat till the user press any key
		{
			key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
    3f70:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <keypad_u8check_press>
    3f74:	80 93 8c 02 	sts	0x028C, r24
	pass_counter=0;
	while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
	{

		key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
		while (key_pressed == NOT_PRESSED)//repeat till the user press any key
    3f78:	80 91 8c 02 	lds	r24, 0x028C
    3f7c:	8f 3f       	cpi	r24, 0xFF	; 255
    3f7e:	c1 f3       	breq	.-16     	; 0x3f70 <setAdminPassword+0x72>
		{
			key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
		}

		Adminpass[pass_counter]= key_pressed-ASCII_ZERO; //add the entered character to the pass array
    3f80:	80 91 aa 02 	lds	r24, 0x02AA
    3f84:	28 2f       	mov	r18, r24
    3f86:	30 e0       	ldi	r19, 0x00	; 0
    3f88:	80 91 8c 02 	lds	r24, 0x028C
    3f8c:	80 53       	subi	r24, 0x30	; 48
    3f8e:	f9 01       	movw	r30, r18
    3f90:	e5 55       	subi	r30, 0x55	; 85
    3f92:	fd 4f       	sbci	r31, 0xFD	; 253
    3f94:	80 83       	st	Z, r24
		LCD_vSend_char(key_pressed);//print the entered character
    3f96:	80 91 8c 02 	lds	r24, 0x028C
    3f9a:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_vSend_char>
    3f9e:	80 e0       	ldi	r24, 0x00	; 0
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	a6 e9       	ldi	r26, 0x96	; 150
    3fa4:	b3 e4       	ldi	r27, 0x43	; 67
    3fa6:	8f a3       	std	Y+39, r24	; 0x27
    3fa8:	98 a7       	std	Y+40, r25	; 0x28
    3faa:	a9 a7       	std	Y+41, r26	; 0x29
    3fac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fae:	6f a1       	ldd	r22, Y+39	; 0x27
    3fb0:	78 a5       	ldd	r23, Y+40	; 0x28
    3fb2:	89 a5       	ldd	r24, Y+41	; 0x29
    3fb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fb6:	20 e0       	ldi	r18, 0x00	; 0
    3fb8:	30 e0       	ldi	r19, 0x00	; 0
    3fba:	4a ef       	ldi	r20, 0xFA	; 250
    3fbc:	54 e4       	ldi	r21, 0x44	; 68
    3fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fc2:	dc 01       	movw	r26, r24
    3fc4:	cb 01       	movw	r24, r22
    3fc6:	8b a3       	std	Y+35, r24	; 0x23
    3fc8:	9c a3       	std	Y+36, r25	; 0x24
    3fca:	ad a3       	std	Y+37, r26	; 0x25
    3fcc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3fce:	6b a1       	ldd	r22, Y+35	; 0x23
    3fd0:	7c a1       	ldd	r23, Y+36	; 0x24
    3fd2:	8d a1       	ldd	r24, Y+37	; 0x25
    3fd4:	9e a1       	ldd	r25, Y+38	; 0x26
    3fd6:	20 e0       	ldi	r18, 0x00	; 0
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	40 e8       	ldi	r20, 0x80	; 128
    3fdc:	5f e3       	ldi	r21, 0x3F	; 63
    3fde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fe2:	88 23       	and	r24, r24
    3fe4:	2c f4       	brge	.+10     	; 0x3ff0 <setAdminPassword+0xf2>
		__ticks = 1;
    3fe6:	81 e0       	ldi	r24, 0x01	; 1
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	9a a3       	std	Y+34, r25	; 0x22
    3fec:	89 a3       	std	Y+33, r24	; 0x21
    3fee:	3f c0       	rjmp	.+126    	; 0x406e <setAdminPassword+0x170>
	else if (__tmp > 65535)
    3ff0:	6b a1       	ldd	r22, Y+35	; 0x23
    3ff2:	7c a1       	ldd	r23, Y+36	; 0x24
    3ff4:	8d a1       	ldd	r24, Y+37	; 0x25
    3ff6:	9e a1       	ldd	r25, Y+38	; 0x26
    3ff8:	20 e0       	ldi	r18, 0x00	; 0
    3ffa:	3f ef       	ldi	r19, 0xFF	; 255
    3ffc:	4f e7       	ldi	r20, 0x7F	; 127
    3ffe:	57 e4       	ldi	r21, 0x47	; 71
    4000:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4004:	18 16       	cp	r1, r24
    4006:	4c f5       	brge	.+82     	; 0x405a <setAdminPassword+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4008:	6f a1       	ldd	r22, Y+39	; 0x27
    400a:	78 a5       	ldd	r23, Y+40	; 0x28
    400c:	89 a5       	ldd	r24, Y+41	; 0x29
    400e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4010:	20 e0       	ldi	r18, 0x00	; 0
    4012:	30 e0       	ldi	r19, 0x00	; 0
    4014:	40 e2       	ldi	r20, 0x20	; 32
    4016:	51 e4       	ldi	r21, 0x41	; 65
    4018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    401c:	dc 01       	movw	r26, r24
    401e:	cb 01       	movw	r24, r22
    4020:	bc 01       	movw	r22, r24
    4022:	cd 01       	movw	r24, r26
    4024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4028:	dc 01       	movw	r26, r24
    402a:	cb 01       	movw	r24, r22
    402c:	9a a3       	std	Y+34, r25	; 0x22
    402e:	89 a3       	std	Y+33, r24	; 0x21
    4030:	0f c0       	rjmp	.+30     	; 0x4050 <setAdminPassword+0x152>
    4032:	88 ec       	ldi	r24, 0xC8	; 200
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	98 a3       	std	Y+32, r25	; 0x20
    4038:	8f 8f       	std	Y+31, r24	; 0x1f
    403a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    403c:	98 a1       	ldd	r25, Y+32	; 0x20
    403e:	01 97       	sbiw	r24, 0x01	; 1
    4040:	f1 f7       	brne	.-4      	; 0x403e <setAdminPassword+0x140>
    4042:	98 a3       	std	Y+32, r25	; 0x20
    4044:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4046:	89 a1       	ldd	r24, Y+33	; 0x21
    4048:	9a a1       	ldd	r25, Y+34	; 0x22
    404a:	01 97       	sbiw	r24, 0x01	; 1
    404c:	9a a3       	std	Y+34, r25	; 0x22
    404e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4050:	89 a1       	ldd	r24, Y+33	; 0x21
    4052:	9a a1       	ldd	r25, Y+34	; 0x22
    4054:	00 97       	sbiw	r24, 0x00	; 0
    4056:	69 f7       	brne	.-38     	; 0x4032 <setAdminPassword+0x134>
    4058:	14 c0       	rjmp	.+40     	; 0x4082 <setAdminPassword+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    405a:	6b a1       	ldd	r22, Y+35	; 0x23
    405c:	7c a1       	ldd	r23, Y+36	; 0x24
    405e:	8d a1       	ldd	r24, Y+37	; 0x25
    4060:	9e a1       	ldd	r25, Y+38	; 0x26
    4062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4066:	dc 01       	movw	r26, r24
    4068:	cb 01       	movw	r24, r22
    406a:	9a a3       	std	Y+34, r25	; 0x22
    406c:	89 a3       	std	Y+33, r24	; 0x21
    406e:	89 a1       	ldd	r24, Y+33	; 0x21
    4070:	9a a1       	ldd	r25, Y+34	; 0x22
    4072:	9e 8f       	std	Y+30, r25	; 0x1e
    4074:	8d 8f       	std	Y+29, r24	; 0x1d
    4076:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4078:	9e 8d       	ldd	r25, Y+30	; 0x1e
    407a:	01 97       	sbiw	r24, 0x01	; 1
    407c:	f1 f7       	brne	.-4      	; 0x407a <setAdminPassword+0x17c>
    407e:	9e 8f       	std	Y+30, r25	; 0x1e
    4080:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(CHARACTER_PREVIEW_TIME);
		LCD_movecursor(2,12+pass_counter);
    4082:	80 91 aa 02 	lds	r24, 0x02AA
    4086:	98 2f       	mov	r25, r24
    4088:	94 5f       	subi	r25, 0xF4	; 244
    408a:	82 e0       	ldi	r24, 0x02	; 2
    408c:	69 2f       	mov	r22, r25
    408e:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_movecursor>
		LCD_vSend_char(PASSWORD_SYMBOL);
    4092:	8a e2       	ldi	r24, 0x2A	; 42
    4094:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_vSend_char>
    4098:	80 e0       	ldi	r24, 0x00	; 0
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	a8 ec       	ldi	r26, 0xC8	; 200
    409e:	b2 e4       	ldi	r27, 0x42	; 66
    40a0:	89 8f       	std	Y+25, r24	; 0x19
    40a2:	9a 8f       	std	Y+26, r25	; 0x1a
    40a4:	ab 8f       	std	Y+27, r26	; 0x1b
    40a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40a8:	69 8d       	ldd	r22, Y+25	; 0x19
    40aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40b0:	20 e0       	ldi	r18, 0x00	; 0
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	4a ef       	ldi	r20, 0xFA	; 250
    40b6:	54 e4       	ldi	r21, 0x44	; 68
    40b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40bc:	dc 01       	movw	r26, r24
    40be:	cb 01       	movw	r24, r22
    40c0:	8d 8b       	std	Y+21, r24	; 0x15
    40c2:	9e 8b       	std	Y+22, r25	; 0x16
    40c4:	af 8b       	std	Y+23, r26	; 0x17
    40c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    40c8:	6d 89       	ldd	r22, Y+21	; 0x15
    40ca:	7e 89       	ldd	r23, Y+22	; 0x16
    40cc:	8f 89       	ldd	r24, Y+23	; 0x17
    40ce:	98 8d       	ldd	r25, Y+24	; 0x18
    40d0:	20 e0       	ldi	r18, 0x00	; 0
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	40 e8       	ldi	r20, 0x80	; 128
    40d6:	5f e3       	ldi	r21, 0x3F	; 63
    40d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40dc:	88 23       	and	r24, r24
    40de:	2c f4       	brge	.+10     	; 0x40ea <setAdminPassword+0x1ec>
		__ticks = 1;
    40e0:	81 e0       	ldi	r24, 0x01	; 1
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	9c 8b       	std	Y+20, r25	; 0x14
    40e6:	8b 8b       	std	Y+19, r24	; 0x13
    40e8:	3f c0       	rjmp	.+126    	; 0x4168 <setAdminPassword+0x26a>
	else if (__tmp > 65535)
    40ea:	6d 89       	ldd	r22, Y+21	; 0x15
    40ec:	7e 89       	ldd	r23, Y+22	; 0x16
    40ee:	8f 89       	ldd	r24, Y+23	; 0x17
    40f0:	98 8d       	ldd	r25, Y+24	; 0x18
    40f2:	20 e0       	ldi	r18, 0x00	; 0
    40f4:	3f ef       	ldi	r19, 0xFF	; 255
    40f6:	4f e7       	ldi	r20, 0x7F	; 127
    40f8:	57 e4       	ldi	r21, 0x47	; 71
    40fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40fe:	18 16       	cp	r1, r24
    4100:	4c f5       	brge	.+82     	; 0x4154 <setAdminPassword+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4102:	69 8d       	ldd	r22, Y+25	; 0x19
    4104:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4106:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4108:	9c 8d       	ldd	r25, Y+28	; 0x1c
    410a:	20 e0       	ldi	r18, 0x00	; 0
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	40 e2       	ldi	r20, 0x20	; 32
    4110:	51 e4       	ldi	r21, 0x41	; 65
    4112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4116:	dc 01       	movw	r26, r24
    4118:	cb 01       	movw	r24, r22
    411a:	bc 01       	movw	r22, r24
    411c:	cd 01       	movw	r24, r26
    411e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4122:	dc 01       	movw	r26, r24
    4124:	cb 01       	movw	r24, r22
    4126:	9c 8b       	std	Y+20, r25	; 0x14
    4128:	8b 8b       	std	Y+19, r24	; 0x13
    412a:	0f c0       	rjmp	.+30     	; 0x414a <setAdminPassword+0x24c>
    412c:	88 ec       	ldi	r24, 0xC8	; 200
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	9a 8b       	std	Y+18, r25	; 0x12
    4132:	89 8b       	std	Y+17, r24	; 0x11
    4134:	89 89       	ldd	r24, Y+17	; 0x11
    4136:	9a 89       	ldd	r25, Y+18	; 0x12
    4138:	01 97       	sbiw	r24, 0x01	; 1
    413a:	f1 f7       	brne	.-4      	; 0x4138 <setAdminPassword+0x23a>
    413c:	9a 8b       	std	Y+18, r25	; 0x12
    413e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4140:	8b 89       	ldd	r24, Y+19	; 0x13
    4142:	9c 89       	ldd	r25, Y+20	; 0x14
    4144:	01 97       	sbiw	r24, 0x01	; 1
    4146:	9c 8b       	std	Y+20, r25	; 0x14
    4148:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    414a:	8b 89       	ldd	r24, Y+19	; 0x13
    414c:	9c 89       	ldd	r25, Y+20	; 0x14
    414e:	00 97       	sbiw	r24, 0x00	; 0
    4150:	69 f7       	brne	.-38     	; 0x412c <setAdminPassword+0x22e>
    4152:	14 c0       	rjmp	.+40     	; 0x417c <setAdminPassword+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4154:	6d 89       	ldd	r22, Y+21	; 0x15
    4156:	7e 89       	ldd	r23, Y+22	; 0x16
    4158:	8f 89       	ldd	r24, Y+23	; 0x17
    415a:	98 8d       	ldd	r25, Y+24	; 0x18
    415c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4160:	dc 01       	movw	r26, r24
    4162:	cb 01       	movw	r24, r22
    4164:	9c 8b       	std	Y+20, r25	; 0x14
    4166:	8b 8b       	std	Y+19, r24	; 0x13
    4168:	8b 89       	ldd	r24, Y+19	; 0x13
    416a:	9c 89       	ldd	r25, Y+20	; 0x14
    416c:	98 8b       	std	Y+16, r25	; 0x10
    416e:	8f 87       	std	Y+15, r24	; 0x0f
    4170:	8f 85       	ldd	r24, Y+15	; 0x0f
    4172:	98 89       	ldd	r25, Y+16	; 0x10
    4174:	01 97       	sbiw	r24, 0x01	; 1
    4176:	f1 f7       	brne	.-4      	; 0x4174 <setAdminPassword+0x276>
    4178:	98 8b       	std	Y+16, r25	; 0x10
    417a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		pass_counter++;
    417c:	80 91 aa 02 	lds	r24, 0x02AA
    4180:	8f 5f       	subi	r24, 0xFF	; 255
    4182:	80 93 aa 02 	sts	0x02AA, r24
	for ( pass_counter = 0; pass_counter < PASS_SIZE; pass_counter++)
	{
		Adminpass[pass_counter]= NOT_STORED;
	}
	pass_counter=0;
	while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
    4186:	80 91 aa 02 	lds	r24, 0x02AA
    418a:	84 30       	cpi	r24, 0x04	; 4
    418c:	08 f4       	brcc	.+2      	; 0x4190 <setAdminPassword+0x292>
    418e:	ec ce       	rjmp	.-552    	; 0x3f68 <setAdminPassword+0x6a>
		LCD_vSend_char(PASSWORD_SYMBOL);
		_delay_ms(100);
		pass_counter++;
	}

	LCD_clearscreen();
    4190:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
	LCD_vSend_string("Pass Saved");
    4194:	86 ea       	ldi	r24, 0xA6	; 166
    4196:	91 e0       	ldi	r25, 0x01	; 1
    4198:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    419c:	80 e0       	ldi	r24, 0x00	; 0
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	aa ef       	ldi	r26, 0xFA	; 250
    41a2:	b3 e4       	ldi	r27, 0x43	; 67
    41a4:	8b 87       	std	Y+11, r24	; 0x0b
    41a6:	9c 87       	std	Y+12, r25	; 0x0c
    41a8:	ad 87       	std	Y+13, r26	; 0x0d
    41aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    41ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    41b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    41b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    41b4:	20 e0       	ldi	r18, 0x00	; 0
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	4a ef       	ldi	r20, 0xFA	; 250
    41ba:	54 e4       	ldi	r21, 0x44	; 68
    41bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41c0:	dc 01       	movw	r26, r24
    41c2:	cb 01       	movw	r24, r22
    41c4:	8f 83       	std	Y+7, r24	; 0x07
    41c6:	98 87       	std	Y+8, r25	; 0x08
    41c8:	a9 87       	std	Y+9, r26	; 0x09
    41ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41cc:	6f 81       	ldd	r22, Y+7	; 0x07
    41ce:	78 85       	ldd	r23, Y+8	; 0x08
    41d0:	89 85       	ldd	r24, Y+9	; 0x09
    41d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    41d4:	20 e0       	ldi	r18, 0x00	; 0
    41d6:	30 e0       	ldi	r19, 0x00	; 0
    41d8:	40 e8       	ldi	r20, 0x80	; 128
    41da:	5f e3       	ldi	r21, 0x3F	; 63
    41dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41e0:	88 23       	and	r24, r24
    41e2:	2c f4       	brge	.+10     	; 0x41ee <setAdminPassword+0x2f0>
		__ticks = 1;
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	9e 83       	std	Y+6, r25	; 0x06
    41ea:	8d 83       	std	Y+5, r24	; 0x05
    41ec:	3f c0       	rjmp	.+126    	; 0x426c <setAdminPassword+0x36e>
	else if (__tmp > 65535)
    41ee:	6f 81       	ldd	r22, Y+7	; 0x07
    41f0:	78 85       	ldd	r23, Y+8	; 0x08
    41f2:	89 85       	ldd	r24, Y+9	; 0x09
    41f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    41f6:	20 e0       	ldi	r18, 0x00	; 0
    41f8:	3f ef       	ldi	r19, 0xFF	; 255
    41fa:	4f e7       	ldi	r20, 0x7F	; 127
    41fc:	57 e4       	ldi	r21, 0x47	; 71
    41fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4202:	18 16       	cp	r1, r24
    4204:	4c f5       	brge	.+82     	; 0x4258 <setAdminPassword+0x35a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4206:	6b 85       	ldd	r22, Y+11	; 0x0b
    4208:	7c 85       	ldd	r23, Y+12	; 0x0c
    420a:	8d 85       	ldd	r24, Y+13	; 0x0d
    420c:	9e 85       	ldd	r25, Y+14	; 0x0e
    420e:	20 e0       	ldi	r18, 0x00	; 0
    4210:	30 e0       	ldi	r19, 0x00	; 0
    4212:	40 e2       	ldi	r20, 0x20	; 32
    4214:	51 e4       	ldi	r21, 0x41	; 65
    4216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    421a:	dc 01       	movw	r26, r24
    421c:	cb 01       	movw	r24, r22
    421e:	bc 01       	movw	r22, r24
    4220:	cd 01       	movw	r24, r26
    4222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4226:	dc 01       	movw	r26, r24
    4228:	cb 01       	movw	r24, r22
    422a:	9e 83       	std	Y+6, r25	; 0x06
    422c:	8d 83       	std	Y+5, r24	; 0x05
    422e:	0f c0       	rjmp	.+30     	; 0x424e <setAdminPassword+0x350>
    4230:	88 ec       	ldi	r24, 0xC8	; 200
    4232:	90 e0       	ldi	r25, 0x00	; 0
    4234:	9c 83       	std	Y+4, r25	; 0x04
    4236:	8b 83       	std	Y+3, r24	; 0x03
    4238:	8b 81       	ldd	r24, Y+3	; 0x03
    423a:	9c 81       	ldd	r25, Y+4	; 0x04
    423c:	01 97       	sbiw	r24, 0x01	; 1
    423e:	f1 f7       	brne	.-4      	; 0x423c <setAdminPassword+0x33e>
    4240:	9c 83       	std	Y+4, r25	; 0x04
    4242:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4244:	8d 81       	ldd	r24, Y+5	; 0x05
    4246:	9e 81       	ldd	r25, Y+6	; 0x06
    4248:	01 97       	sbiw	r24, 0x01	; 1
    424a:	9e 83       	std	Y+6, r25	; 0x06
    424c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    424e:	8d 81       	ldd	r24, Y+5	; 0x05
    4250:	9e 81       	ldd	r25, Y+6	; 0x06
    4252:	00 97       	sbiw	r24, 0x00	; 0
    4254:	69 f7       	brne	.-38     	; 0x4230 <setAdminPassword+0x332>
    4256:	14 c0       	rjmp	.+40     	; 0x4280 <setAdminPassword+0x382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4258:	6f 81       	ldd	r22, Y+7	; 0x07
    425a:	78 85       	ldd	r23, Y+8	; 0x08
    425c:	89 85       	ldd	r24, Y+9	; 0x09
    425e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4264:	dc 01       	movw	r26, r24
    4266:	cb 01       	movw	r24, r22
    4268:	9e 83       	std	Y+6, r25	; 0x06
    426a:	8d 83       	std	Y+5, r24	; 0x05
    426c:	8d 81       	ldd	r24, Y+5	; 0x05
    426e:	9e 81       	ldd	r25, Y+6	; 0x06
    4270:	9a 83       	std	Y+2, r25	; 0x02
    4272:	89 83       	std	Y+1, r24	; 0x01
    4274:	89 81       	ldd	r24, Y+1	; 0x01
    4276:	9a 81       	ldd	r25, Y+2	; 0x02
    4278:	01 97       	sbiw	r24, 0x01	; 1
    427a:	f1 f7       	brne	.-4      	; 0x4278 <setAdminPassword+0x37a>
    427c:	9a 83       	std	Y+2, r25	; 0x02
    427e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_clearscreen();
    4280:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
	LOGIN_BLOCKED=FALSE;
    4284:	10 92 a5 02 	sts	0x02A5, r1
}
    4288:	aa 96       	adiw	r28, 0x2a	; 42
    428a:	0f b6       	in	r0, 0x3f	; 63
    428c:	f8 94       	cli
    428e:	de bf       	out	0x3e, r29	; 62
    4290:	0f be       	out	0x3f, r0	; 63
    4292:	cd bf       	out	0x3d, r28	; 61
    4294:	cf 91       	pop	r28
    4296:	df 91       	pop	r29
    4298:	08 95       	ret

0000429a <setGestPassword>:
void setGestPassword(void)
{
    429a:	df 93       	push	r29
    429c:	cf 93       	push	r28
    429e:	cd b7       	in	r28, 0x3d	; 61
    42a0:	de b7       	in	r29, 0x3e	; 62
    42a2:	aa 97       	sbiw	r28, 0x2a	; 42
    42a4:	0f b6       	in	r0, 0x3f	; 63
    42a6:	f8 94       	cli
    42a8:	de bf       	out	0x3e, r29	; 62
    42aa:	0f be       	out	0x3f, r0	; 63
    42ac:	cd bf       	out	0x3d, r28	; 61
	LCD_clearscreen();
    42ae:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
	LCD_vSend_string("Set Guest Pass");
    42b2:	81 eb       	ldi	r24, 0xB1	; 177
    42b4:	91 e0       	ldi	r25, 0x01	; 1
    42b6:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
	LCD_movecursor(2,1);
    42ba:	82 e0       	ldi	r24, 0x02	; 2
    42bc:	61 e0       	ldi	r22, 0x01	; 1
    42be:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_movecursor>
	LCD_vSend_string("Guest Pass:");
    42c2:	80 ec       	ldi	r24, 0xC0	; 192
    42c4:	91 e0       	ldi	r25, 0x01	; 1
    42c6:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>

	key_pressed = NOT_PRESSED;
    42ca:	8f ef       	ldi	r24, 0xFF	; 255
    42cc:	80 93 8c 02 	sts	0x028C, r24
	pass_counter=0;
    42d0:	10 92 aa 02 	sts	0x02AA, r1

	for ( pass_counter = 0; pass_counter < PASS_SIZE; pass_counter++)
    42d4:	10 92 aa 02 	sts	0x02AA, r1
    42d8:	0e c0       	rjmp	.+28     	; 0x42f6 <setGestPassword+0x5c>
	{
		Gestpass[pass_counter]= NOT_STORED;
    42da:	80 91 aa 02 	lds	r24, 0x02AA
    42de:	88 2f       	mov	r24, r24
    42e0:	90 e0       	ldi	r25, 0x00	; 0
    42e2:	fc 01       	movw	r30, r24
    42e4:	e3 57       	subi	r30, 0x73	; 115
    42e6:	fd 4f       	sbci	r31, 0xFD	; 253
    42e8:	8f ef       	ldi	r24, 0xFF	; 255
    42ea:	80 83       	st	Z, r24
	LCD_vSend_string("Guest Pass:");

	key_pressed = NOT_PRESSED;
	pass_counter=0;

	for ( pass_counter = 0; pass_counter < PASS_SIZE; pass_counter++)
    42ec:	80 91 aa 02 	lds	r24, 0x02AA
    42f0:	8f 5f       	subi	r24, 0xFF	; 255
    42f2:	80 93 aa 02 	sts	0x02AA, r24
    42f6:	80 91 aa 02 	lds	r24, 0x02AA
    42fa:	84 30       	cpi	r24, 0x04	; 4
    42fc:	70 f3       	brcs	.-36     	; 0x42da <setGestPassword+0x40>
	{
		Gestpass[pass_counter]= NOT_STORED;
	}
	pass_counter=0;
    42fe:	10 92 aa 02 	sts	0x02AA, r1
    4302:	0f c1       	rjmp	.+542    	; 0x4522 <setGestPassword+0x288>
	while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
	{

		key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
    4304:	8f ef       	ldi	r24, 0xFF	; 255
    4306:	80 93 8c 02 	sts	0x028C, r24
    430a:	04 c0       	rjmp	.+8      	; 0x4314 <setGestPassword+0x7a>
		while (key_pressed == NOT_PRESSED)//repeat till the user press any key
		{
			key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
    430c:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <keypad_u8check_press>
    4310:	80 93 8c 02 	sts	0x028C, r24
	pass_counter=0;
	while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
	{

		key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
		while (key_pressed == NOT_PRESSED)//repeat till the user press any key
    4314:	80 91 8c 02 	lds	r24, 0x028C
    4318:	8f 3f       	cpi	r24, 0xFF	; 255
    431a:	c1 f3       	breq	.-16     	; 0x430c <setGestPassword+0x72>
		{
			key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
		}

		Gestpass[pass_counter]= key_pressed-ASCII_ZERO; //add the entered character to the pass array
    431c:	80 91 aa 02 	lds	r24, 0x02AA
    4320:	28 2f       	mov	r18, r24
    4322:	30 e0       	ldi	r19, 0x00	; 0
    4324:	80 91 8c 02 	lds	r24, 0x028C
    4328:	80 53       	subi	r24, 0x30	; 48
    432a:	f9 01       	movw	r30, r18
    432c:	e3 57       	subi	r30, 0x73	; 115
    432e:	fd 4f       	sbci	r31, 0xFD	; 253
    4330:	80 83       	st	Z, r24
		LCD_vSend_char(key_pressed);//print the entered character
    4332:	80 91 8c 02 	lds	r24, 0x028C
    4336:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_vSend_char>
    433a:	80 e0       	ldi	r24, 0x00	; 0
    433c:	90 e0       	ldi	r25, 0x00	; 0
    433e:	a6 e9       	ldi	r26, 0x96	; 150
    4340:	b3 e4       	ldi	r27, 0x43	; 67
    4342:	8f a3       	std	Y+39, r24	; 0x27
    4344:	98 a7       	std	Y+40, r25	; 0x28
    4346:	a9 a7       	std	Y+41, r26	; 0x29
    4348:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    434a:	6f a1       	ldd	r22, Y+39	; 0x27
    434c:	78 a5       	ldd	r23, Y+40	; 0x28
    434e:	89 a5       	ldd	r24, Y+41	; 0x29
    4350:	9a a5       	ldd	r25, Y+42	; 0x2a
    4352:	20 e0       	ldi	r18, 0x00	; 0
    4354:	30 e0       	ldi	r19, 0x00	; 0
    4356:	4a ef       	ldi	r20, 0xFA	; 250
    4358:	54 e4       	ldi	r21, 0x44	; 68
    435a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    435e:	dc 01       	movw	r26, r24
    4360:	cb 01       	movw	r24, r22
    4362:	8b a3       	std	Y+35, r24	; 0x23
    4364:	9c a3       	std	Y+36, r25	; 0x24
    4366:	ad a3       	std	Y+37, r26	; 0x25
    4368:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    436a:	6b a1       	ldd	r22, Y+35	; 0x23
    436c:	7c a1       	ldd	r23, Y+36	; 0x24
    436e:	8d a1       	ldd	r24, Y+37	; 0x25
    4370:	9e a1       	ldd	r25, Y+38	; 0x26
    4372:	20 e0       	ldi	r18, 0x00	; 0
    4374:	30 e0       	ldi	r19, 0x00	; 0
    4376:	40 e8       	ldi	r20, 0x80	; 128
    4378:	5f e3       	ldi	r21, 0x3F	; 63
    437a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    437e:	88 23       	and	r24, r24
    4380:	2c f4       	brge	.+10     	; 0x438c <setGestPassword+0xf2>
		__ticks = 1;
    4382:	81 e0       	ldi	r24, 0x01	; 1
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	9a a3       	std	Y+34, r25	; 0x22
    4388:	89 a3       	std	Y+33, r24	; 0x21
    438a:	3f c0       	rjmp	.+126    	; 0x440a <setGestPassword+0x170>
	else if (__tmp > 65535)
    438c:	6b a1       	ldd	r22, Y+35	; 0x23
    438e:	7c a1       	ldd	r23, Y+36	; 0x24
    4390:	8d a1       	ldd	r24, Y+37	; 0x25
    4392:	9e a1       	ldd	r25, Y+38	; 0x26
    4394:	20 e0       	ldi	r18, 0x00	; 0
    4396:	3f ef       	ldi	r19, 0xFF	; 255
    4398:	4f e7       	ldi	r20, 0x7F	; 127
    439a:	57 e4       	ldi	r21, 0x47	; 71
    439c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43a0:	18 16       	cp	r1, r24
    43a2:	4c f5       	brge	.+82     	; 0x43f6 <setGestPassword+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43a4:	6f a1       	ldd	r22, Y+39	; 0x27
    43a6:	78 a5       	ldd	r23, Y+40	; 0x28
    43a8:	89 a5       	ldd	r24, Y+41	; 0x29
    43aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    43ac:	20 e0       	ldi	r18, 0x00	; 0
    43ae:	30 e0       	ldi	r19, 0x00	; 0
    43b0:	40 e2       	ldi	r20, 0x20	; 32
    43b2:	51 e4       	ldi	r21, 0x41	; 65
    43b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b8:	dc 01       	movw	r26, r24
    43ba:	cb 01       	movw	r24, r22
    43bc:	bc 01       	movw	r22, r24
    43be:	cd 01       	movw	r24, r26
    43c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43c4:	dc 01       	movw	r26, r24
    43c6:	cb 01       	movw	r24, r22
    43c8:	9a a3       	std	Y+34, r25	; 0x22
    43ca:	89 a3       	std	Y+33, r24	; 0x21
    43cc:	0f c0       	rjmp	.+30     	; 0x43ec <setGestPassword+0x152>
    43ce:	88 ec       	ldi	r24, 0xC8	; 200
    43d0:	90 e0       	ldi	r25, 0x00	; 0
    43d2:	98 a3       	std	Y+32, r25	; 0x20
    43d4:	8f 8f       	std	Y+31, r24	; 0x1f
    43d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    43d8:	98 a1       	ldd	r25, Y+32	; 0x20
    43da:	01 97       	sbiw	r24, 0x01	; 1
    43dc:	f1 f7       	brne	.-4      	; 0x43da <setGestPassword+0x140>
    43de:	98 a3       	std	Y+32, r25	; 0x20
    43e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43e2:	89 a1       	ldd	r24, Y+33	; 0x21
    43e4:	9a a1       	ldd	r25, Y+34	; 0x22
    43e6:	01 97       	sbiw	r24, 0x01	; 1
    43e8:	9a a3       	std	Y+34, r25	; 0x22
    43ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ec:	89 a1       	ldd	r24, Y+33	; 0x21
    43ee:	9a a1       	ldd	r25, Y+34	; 0x22
    43f0:	00 97       	sbiw	r24, 0x00	; 0
    43f2:	69 f7       	brne	.-38     	; 0x43ce <setGestPassword+0x134>
    43f4:	14 c0       	rjmp	.+40     	; 0x441e <setGestPassword+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43f6:	6b a1       	ldd	r22, Y+35	; 0x23
    43f8:	7c a1       	ldd	r23, Y+36	; 0x24
    43fa:	8d a1       	ldd	r24, Y+37	; 0x25
    43fc:	9e a1       	ldd	r25, Y+38	; 0x26
    43fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4402:	dc 01       	movw	r26, r24
    4404:	cb 01       	movw	r24, r22
    4406:	9a a3       	std	Y+34, r25	; 0x22
    4408:	89 a3       	std	Y+33, r24	; 0x21
    440a:	89 a1       	ldd	r24, Y+33	; 0x21
    440c:	9a a1       	ldd	r25, Y+34	; 0x22
    440e:	9e 8f       	std	Y+30, r25	; 0x1e
    4410:	8d 8f       	std	Y+29, r24	; 0x1d
    4412:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4414:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4416:	01 97       	sbiw	r24, 0x01	; 1
    4418:	f1 f7       	brne	.-4      	; 0x4416 <setGestPassword+0x17c>
    441a:	9e 8f       	std	Y+30, r25	; 0x1e
    441c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(CHARACTER_PREVIEW_TIME);
		LCD_movecursor(2,12+pass_counter);
    441e:	80 91 aa 02 	lds	r24, 0x02AA
    4422:	98 2f       	mov	r25, r24
    4424:	94 5f       	subi	r25, 0xF4	; 244
    4426:	82 e0       	ldi	r24, 0x02	; 2
    4428:	69 2f       	mov	r22, r25
    442a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_movecursor>
		LCD_vSend_char(PASSWORD_SYMBOL);
    442e:	8a e2       	ldi	r24, 0x2A	; 42
    4430:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_vSend_char>
    4434:	80 e0       	ldi	r24, 0x00	; 0
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	a8 ec       	ldi	r26, 0xC8	; 200
    443a:	b2 e4       	ldi	r27, 0x42	; 66
    443c:	89 8f       	std	Y+25, r24	; 0x19
    443e:	9a 8f       	std	Y+26, r25	; 0x1a
    4440:	ab 8f       	std	Y+27, r26	; 0x1b
    4442:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4444:	69 8d       	ldd	r22, Y+25	; 0x19
    4446:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4448:	8b 8d       	ldd	r24, Y+27	; 0x1b
    444a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    444c:	20 e0       	ldi	r18, 0x00	; 0
    444e:	30 e0       	ldi	r19, 0x00	; 0
    4450:	4a ef       	ldi	r20, 0xFA	; 250
    4452:	54 e4       	ldi	r21, 0x44	; 68
    4454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4458:	dc 01       	movw	r26, r24
    445a:	cb 01       	movw	r24, r22
    445c:	8d 8b       	std	Y+21, r24	; 0x15
    445e:	9e 8b       	std	Y+22, r25	; 0x16
    4460:	af 8b       	std	Y+23, r26	; 0x17
    4462:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4464:	6d 89       	ldd	r22, Y+21	; 0x15
    4466:	7e 89       	ldd	r23, Y+22	; 0x16
    4468:	8f 89       	ldd	r24, Y+23	; 0x17
    446a:	98 8d       	ldd	r25, Y+24	; 0x18
    446c:	20 e0       	ldi	r18, 0x00	; 0
    446e:	30 e0       	ldi	r19, 0x00	; 0
    4470:	40 e8       	ldi	r20, 0x80	; 128
    4472:	5f e3       	ldi	r21, 0x3F	; 63
    4474:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4478:	88 23       	and	r24, r24
    447a:	2c f4       	brge	.+10     	; 0x4486 <setGestPassword+0x1ec>
		__ticks = 1;
    447c:	81 e0       	ldi	r24, 0x01	; 1
    447e:	90 e0       	ldi	r25, 0x00	; 0
    4480:	9c 8b       	std	Y+20, r25	; 0x14
    4482:	8b 8b       	std	Y+19, r24	; 0x13
    4484:	3f c0       	rjmp	.+126    	; 0x4504 <setGestPassword+0x26a>
	else if (__tmp > 65535)
    4486:	6d 89       	ldd	r22, Y+21	; 0x15
    4488:	7e 89       	ldd	r23, Y+22	; 0x16
    448a:	8f 89       	ldd	r24, Y+23	; 0x17
    448c:	98 8d       	ldd	r25, Y+24	; 0x18
    448e:	20 e0       	ldi	r18, 0x00	; 0
    4490:	3f ef       	ldi	r19, 0xFF	; 255
    4492:	4f e7       	ldi	r20, 0x7F	; 127
    4494:	57 e4       	ldi	r21, 0x47	; 71
    4496:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    449a:	18 16       	cp	r1, r24
    449c:	4c f5       	brge	.+82     	; 0x44f0 <setGestPassword+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    449e:	69 8d       	ldd	r22, Y+25	; 0x19
    44a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44a6:	20 e0       	ldi	r18, 0x00	; 0
    44a8:	30 e0       	ldi	r19, 0x00	; 0
    44aa:	40 e2       	ldi	r20, 0x20	; 32
    44ac:	51 e4       	ldi	r21, 0x41	; 65
    44ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44b2:	dc 01       	movw	r26, r24
    44b4:	cb 01       	movw	r24, r22
    44b6:	bc 01       	movw	r22, r24
    44b8:	cd 01       	movw	r24, r26
    44ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44be:	dc 01       	movw	r26, r24
    44c0:	cb 01       	movw	r24, r22
    44c2:	9c 8b       	std	Y+20, r25	; 0x14
    44c4:	8b 8b       	std	Y+19, r24	; 0x13
    44c6:	0f c0       	rjmp	.+30     	; 0x44e6 <setGestPassword+0x24c>
    44c8:	88 ec       	ldi	r24, 0xC8	; 200
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	9a 8b       	std	Y+18, r25	; 0x12
    44ce:	89 8b       	std	Y+17, r24	; 0x11
    44d0:	89 89       	ldd	r24, Y+17	; 0x11
    44d2:	9a 89       	ldd	r25, Y+18	; 0x12
    44d4:	01 97       	sbiw	r24, 0x01	; 1
    44d6:	f1 f7       	brne	.-4      	; 0x44d4 <setGestPassword+0x23a>
    44d8:	9a 8b       	std	Y+18, r25	; 0x12
    44da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44dc:	8b 89       	ldd	r24, Y+19	; 0x13
    44de:	9c 89       	ldd	r25, Y+20	; 0x14
    44e0:	01 97       	sbiw	r24, 0x01	; 1
    44e2:	9c 8b       	std	Y+20, r25	; 0x14
    44e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44e6:	8b 89       	ldd	r24, Y+19	; 0x13
    44e8:	9c 89       	ldd	r25, Y+20	; 0x14
    44ea:	00 97       	sbiw	r24, 0x00	; 0
    44ec:	69 f7       	brne	.-38     	; 0x44c8 <setGestPassword+0x22e>
    44ee:	14 c0       	rjmp	.+40     	; 0x4518 <setGestPassword+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44f0:	6d 89       	ldd	r22, Y+21	; 0x15
    44f2:	7e 89       	ldd	r23, Y+22	; 0x16
    44f4:	8f 89       	ldd	r24, Y+23	; 0x17
    44f6:	98 8d       	ldd	r25, Y+24	; 0x18
    44f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44fc:	dc 01       	movw	r26, r24
    44fe:	cb 01       	movw	r24, r22
    4500:	9c 8b       	std	Y+20, r25	; 0x14
    4502:	8b 8b       	std	Y+19, r24	; 0x13
    4504:	8b 89       	ldd	r24, Y+19	; 0x13
    4506:	9c 89       	ldd	r25, Y+20	; 0x14
    4508:	98 8b       	std	Y+16, r25	; 0x10
    450a:	8f 87       	std	Y+15, r24	; 0x0f
    450c:	8f 85       	ldd	r24, Y+15	; 0x0f
    450e:	98 89       	ldd	r25, Y+16	; 0x10
    4510:	01 97       	sbiw	r24, 0x01	; 1
    4512:	f1 f7       	brne	.-4      	; 0x4510 <setGestPassword+0x276>
    4514:	98 8b       	std	Y+16, r25	; 0x10
    4516:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		pass_counter++;
    4518:	80 91 aa 02 	lds	r24, 0x02AA
    451c:	8f 5f       	subi	r24, 0xFF	; 255
    451e:	80 93 aa 02 	sts	0x02AA, r24
	for ( pass_counter = 0; pass_counter < PASS_SIZE; pass_counter++)
	{
		Gestpass[pass_counter]= NOT_STORED;
	}
	pass_counter=0;
	while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
    4522:	80 91 aa 02 	lds	r24, 0x02AA
    4526:	84 30       	cpi	r24, 0x04	; 4
    4528:	08 f4       	brcc	.+2      	; 0x452c <setGestPassword+0x292>
    452a:	ec ce       	rjmp	.-552    	; 0x4304 <setGestPassword+0x6a>
		LCD_vSend_char(PASSWORD_SYMBOL);
		_delay_ms(100);
		pass_counter++;
	}

	LCD_clearscreen();
    452c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
	LCD_vSend_string("Pass Saved");
    4530:	86 ea       	ldi	r24, 0xA6	; 166
    4532:	91 e0       	ldi	r25, 0x01	; 1
    4534:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    4538:	80 e0       	ldi	r24, 0x00	; 0
    453a:	90 e0       	ldi	r25, 0x00	; 0
    453c:	aa ef       	ldi	r26, 0xFA	; 250
    453e:	b3 e4       	ldi	r27, 0x43	; 67
    4540:	8b 87       	std	Y+11, r24	; 0x0b
    4542:	9c 87       	std	Y+12, r25	; 0x0c
    4544:	ad 87       	std	Y+13, r26	; 0x0d
    4546:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4548:	6b 85       	ldd	r22, Y+11	; 0x0b
    454a:	7c 85       	ldd	r23, Y+12	; 0x0c
    454c:	8d 85       	ldd	r24, Y+13	; 0x0d
    454e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4550:	20 e0       	ldi	r18, 0x00	; 0
    4552:	30 e0       	ldi	r19, 0x00	; 0
    4554:	4a ef       	ldi	r20, 0xFA	; 250
    4556:	54 e4       	ldi	r21, 0x44	; 68
    4558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    455c:	dc 01       	movw	r26, r24
    455e:	cb 01       	movw	r24, r22
    4560:	8f 83       	std	Y+7, r24	; 0x07
    4562:	98 87       	std	Y+8, r25	; 0x08
    4564:	a9 87       	std	Y+9, r26	; 0x09
    4566:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4568:	6f 81       	ldd	r22, Y+7	; 0x07
    456a:	78 85       	ldd	r23, Y+8	; 0x08
    456c:	89 85       	ldd	r24, Y+9	; 0x09
    456e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4570:	20 e0       	ldi	r18, 0x00	; 0
    4572:	30 e0       	ldi	r19, 0x00	; 0
    4574:	40 e8       	ldi	r20, 0x80	; 128
    4576:	5f e3       	ldi	r21, 0x3F	; 63
    4578:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    457c:	88 23       	and	r24, r24
    457e:	2c f4       	brge	.+10     	; 0x458a <setGestPassword+0x2f0>
		__ticks = 1;
    4580:	81 e0       	ldi	r24, 0x01	; 1
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	9e 83       	std	Y+6, r25	; 0x06
    4586:	8d 83       	std	Y+5, r24	; 0x05
    4588:	3f c0       	rjmp	.+126    	; 0x4608 <setGestPassword+0x36e>
	else if (__tmp > 65535)
    458a:	6f 81       	ldd	r22, Y+7	; 0x07
    458c:	78 85       	ldd	r23, Y+8	; 0x08
    458e:	89 85       	ldd	r24, Y+9	; 0x09
    4590:	9a 85       	ldd	r25, Y+10	; 0x0a
    4592:	20 e0       	ldi	r18, 0x00	; 0
    4594:	3f ef       	ldi	r19, 0xFF	; 255
    4596:	4f e7       	ldi	r20, 0x7F	; 127
    4598:	57 e4       	ldi	r21, 0x47	; 71
    459a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    459e:	18 16       	cp	r1, r24
    45a0:	4c f5       	brge	.+82     	; 0x45f4 <setGestPassword+0x35a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    45a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    45a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    45a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    45aa:	20 e0       	ldi	r18, 0x00	; 0
    45ac:	30 e0       	ldi	r19, 0x00	; 0
    45ae:	40 e2       	ldi	r20, 0x20	; 32
    45b0:	51 e4       	ldi	r21, 0x41	; 65
    45b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45b6:	dc 01       	movw	r26, r24
    45b8:	cb 01       	movw	r24, r22
    45ba:	bc 01       	movw	r22, r24
    45bc:	cd 01       	movw	r24, r26
    45be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45c2:	dc 01       	movw	r26, r24
    45c4:	cb 01       	movw	r24, r22
    45c6:	9e 83       	std	Y+6, r25	; 0x06
    45c8:	8d 83       	std	Y+5, r24	; 0x05
    45ca:	0f c0       	rjmp	.+30     	; 0x45ea <setGestPassword+0x350>
    45cc:	88 ec       	ldi	r24, 0xC8	; 200
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	9c 83       	std	Y+4, r25	; 0x04
    45d2:	8b 83       	std	Y+3, r24	; 0x03
    45d4:	8b 81       	ldd	r24, Y+3	; 0x03
    45d6:	9c 81       	ldd	r25, Y+4	; 0x04
    45d8:	01 97       	sbiw	r24, 0x01	; 1
    45da:	f1 f7       	brne	.-4      	; 0x45d8 <setGestPassword+0x33e>
    45dc:	9c 83       	std	Y+4, r25	; 0x04
    45de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45e0:	8d 81       	ldd	r24, Y+5	; 0x05
    45e2:	9e 81       	ldd	r25, Y+6	; 0x06
    45e4:	01 97       	sbiw	r24, 0x01	; 1
    45e6:	9e 83       	std	Y+6, r25	; 0x06
    45e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ea:	8d 81       	ldd	r24, Y+5	; 0x05
    45ec:	9e 81       	ldd	r25, Y+6	; 0x06
    45ee:	00 97       	sbiw	r24, 0x00	; 0
    45f0:	69 f7       	brne	.-38     	; 0x45cc <setGestPassword+0x332>
    45f2:	14 c0       	rjmp	.+40     	; 0x461c <setGestPassword+0x382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45f4:	6f 81       	ldd	r22, Y+7	; 0x07
    45f6:	78 85       	ldd	r23, Y+8	; 0x08
    45f8:	89 85       	ldd	r24, Y+9	; 0x09
    45fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    45fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4600:	dc 01       	movw	r26, r24
    4602:	cb 01       	movw	r24, r22
    4604:	9e 83       	std	Y+6, r25	; 0x06
    4606:	8d 83       	std	Y+5, r24	; 0x05
    4608:	8d 81       	ldd	r24, Y+5	; 0x05
    460a:	9e 81       	ldd	r25, Y+6	; 0x06
    460c:	9a 83       	std	Y+2, r25	; 0x02
    460e:	89 83       	std	Y+1, r24	; 0x01
    4610:	89 81       	ldd	r24, Y+1	; 0x01
    4612:	9a 81       	ldd	r25, Y+2	; 0x02
    4614:	01 97       	sbiw	r24, 0x01	; 1
    4616:	f1 f7       	brne	.-4      	; 0x4614 <setGestPassword+0x37a>
    4618:	9a 83       	std	Y+2, r25	; 0x02
    461a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_clearscreen();
    461c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
	LOGIN_BLOCKED=FALSE;
    4620:	10 92 a5 02 	sts	0x02A5, r1
}
    4624:	aa 96       	adiw	r28, 0x2a	; 42
    4626:	0f b6       	in	r0, 0x3f	; 63
    4628:	f8 94       	cli
    462a:	de bf       	out	0x3e, r29	; 62
    462c:	0f be       	out	0x3f, r0	; 63
    462e:	cd bf       	out	0x3d, r28	; 61
    4630:	cf 91       	pop	r28
    4632:	df 91       	pop	r29
    4634:	08 95       	ret

00004636 <AdiminLogin>:
void AdiminLogin(void)
{
    4636:	0f 93       	push	r16
    4638:	1f 93       	push	r17
    463a:	df 93       	push	r29
    463c:	cf 93       	push	r28
    463e:	cd b7       	in	r28, 0x3d	; 61
    4640:	de b7       	in	r29, 0x3e	; 62
    4642:	c6 54       	subi	r28, 0x46	; 70
    4644:	d0 40       	sbci	r29, 0x00	; 0
    4646:	0f b6       	in	r0, 0x3f	; 63
    4648:	f8 94       	cli
    464a:	de bf       	out	0x3e, r29	; 62
    464c:	0f be       	out	0x3f, r0	; 63
    464e:	cd bf       	out	0x3d, r28	; 61
    4650:	df c2       	rjmp	.+1470   	; 0x4c10 <AdiminLogin+0x5da>
	while(login_mode!=ADMIN)
	{
		key_pressed = NOT_PRESSED;
    4652:	8f ef       	ldi	r24, 0xFF	; 255
    4654:	80 93 8c 02 	sts	0x028C, r24
		LCD_clearscreen();
    4658:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
		LCD_vSend_string("Admin mode");
    465c:	8c ec       	ldi	r24, 0xCC	; 204
    465e:	91 e0       	ldi	r25, 0x01	; 1
    4660:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
		LCD_movecursor(2,1);
    4664:	82 e0       	ldi	r24, 0x02	; 2
    4666:	61 e0       	ldi	r22, 0x01	; 1
    4668:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_movecursor>
		LCD_vSend_string("Enter Pass:");
    466c:	87 ed       	ldi	r24, 0xD7	; 215
    466e:	91 e0       	ldi	r25, 0x01	; 1
    4670:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    4674:	fe 01       	movw	r30, r28
    4676:	ed 5b       	subi	r30, 0xBD	; 189
    4678:	ff 4f       	sbci	r31, 0xFF	; 255
    467a:	80 e0       	ldi	r24, 0x00	; 0
    467c:	90 e0       	ldi	r25, 0x00	; 0
    467e:	a8 e4       	ldi	r26, 0x48	; 72
    4680:	b3 e4       	ldi	r27, 0x43	; 67
    4682:	80 83       	st	Z, r24
    4684:	91 83       	std	Z+1, r25	; 0x01
    4686:	a2 83       	std	Z+2, r26	; 0x02
    4688:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    468a:	8e 01       	movw	r16, r28
    468c:	01 5c       	subi	r16, 0xC1	; 193
    468e:	1f 4f       	sbci	r17, 0xFF	; 255
    4690:	fe 01       	movw	r30, r28
    4692:	ed 5b       	subi	r30, 0xBD	; 189
    4694:	ff 4f       	sbci	r31, 0xFF	; 255
    4696:	60 81       	ld	r22, Z
    4698:	71 81       	ldd	r23, Z+1	; 0x01
    469a:	82 81       	ldd	r24, Z+2	; 0x02
    469c:	93 81       	ldd	r25, Z+3	; 0x03
    469e:	20 e0       	ldi	r18, 0x00	; 0
    46a0:	30 e0       	ldi	r19, 0x00	; 0
    46a2:	4a ef       	ldi	r20, 0xFA	; 250
    46a4:	54 e4       	ldi	r21, 0x44	; 68
    46a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46aa:	dc 01       	movw	r26, r24
    46ac:	cb 01       	movw	r24, r22
    46ae:	f8 01       	movw	r30, r16
    46b0:	80 83       	st	Z, r24
    46b2:	91 83       	std	Z+1, r25	; 0x01
    46b4:	a2 83       	std	Z+2, r26	; 0x02
    46b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    46b8:	fe 01       	movw	r30, r28
    46ba:	ff 96       	adiw	r30, 0x3f	; 63
    46bc:	60 81       	ld	r22, Z
    46be:	71 81       	ldd	r23, Z+1	; 0x01
    46c0:	82 81       	ldd	r24, Z+2	; 0x02
    46c2:	93 81       	ldd	r25, Z+3	; 0x03
    46c4:	20 e0       	ldi	r18, 0x00	; 0
    46c6:	30 e0       	ldi	r19, 0x00	; 0
    46c8:	40 e8       	ldi	r20, 0x80	; 128
    46ca:	5f e3       	ldi	r21, 0x3F	; 63
    46cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46d0:	88 23       	and	r24, r24
    46d2:	2c f4       	brge	.+10     	; 0x46de <AdiminLogin+0xa8>
		__ticks = 1;
    46d4:	81 e0       	ldi	r24, 0x01	; 1
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	9e af       	std	Y+62, r25	; 0x3e
    46da:	8d af       	std	Y+61, r24	; 0x3d
    46dc:	46 c0       	rjmp	.+140    	; 0x476a <AdiminLogin+0x134>
	else if (__tmp > 65535)
    46de:	fe 01       	movw	r30, r28
    46e0:	ff 96       	adiw	r30, 0x3f	; 63
    46e2:	60 81       	ld	r22, Z
    46e4:	71 81       	ldd	r23, Z+1	; 0x01
    46e6:	82 81       	ldd	r24, Z+2	; 0x02
    46e8:	93 81       	ldd	r25, Z+3	; 0x03
    46ea:	20 e0       	ldi	r18, 0x00	; 0
    46ec:	3f ef       	ldi	r19, 0xFF	; 255
    46ee:	4f e7       	ldi	r20, 0x7F	; 127
    46f0:	57 e4       	ldi	r21, 0x47	; 71
    46f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46f6:	18 16       	cp	r1, r24
    46f8:	64 f5       	brge	.+88     	; 0x4752 <AdiminLogin+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46fa:	fe 01       	movw	r30, r28
    46fc:	ed 5b       	subi	r30, 0xBD	; 189
    46fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4700:	60 81       	ld	r22, Z
    4702:	71 81       	ldd	r23, Z+1	; 0x01
    4704:	82 81       	ldd	r24, Z+2	; 0x02
    4706:	93 81       	ldd	r25, Z+3	; 0x03
    4708:	20 e0       	ldi	r18, 0x00	; 0
    470a:	30 e0       	ldi	r19, 0x00	; 0
    470c:	40 e2       	ldi	r20, 0x20	; 32
    470e:	51 e4       	ldi	r21, 0x41	; 65
    4710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4714:	dc 01       	movw	r26, r24
    4716:	cb 01       	movw	r24, r22
    4718:	bc 01       	movw	r22, r24
    471a:	cd 01       	movw	r24, r26
    471c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4720:	dc 01       	movw	r26, r24
    4722:	cb 01       	movw	r24, r22
    4724:	9e af       	std	Y+62, r25	; 0x3e
    4726:	8d af       	std	Y+61, r24	; 0x3d
    4728:	0f c0       	rjmp	.+30     	; 0x4748 <AdiminLogin+0x112>
    472a:	88 ec       	ldi	r24, 0xC8	; 200
    472c:	90 e0       	ldi	r25, 0x00	; 0
    472e:	9c af       	std	Y+60, r25	; 0x3c
    4730:	8b af       	std	Y+59, r24	; 0x3b
    4732:	8b ad       	ldd	r24, Y+59	; 0x3b
    4734:	9c ad       	ldd	r25, Y+60	; 0x3c
    4736:	01 97       	sbiw	r24, 0x01	; 1
    4738:	f1 f7       	brne	.-4      	; 0x4736 <AdiminLogin+0x100>
    473a:	9c af       	std	Y+60, r25	; 0x3c
    473c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    473e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4740:	9e ad       	ldd	r25, Y+62	; 0x3e
    4742:	01 97       	sbiw	r24, 0x01	; 1
    4744:	9e af       	std	Y+62, r25	; 0x3e
    4746:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4748:	8d ad       	ldd	r24, Y+61	; 0x3d
    474a:	9e ad       	ldd	r25, Y+62	; 0x3e
    474c:	00 97       	sbiw	r24, 0x00	; 0
    474e:	69 f7       	brne	.-38     	; 0x472a <AdiminLogin+0xf4>
    4750:	16 c0       	rjmp	.+44     	; 0x477e <AdiminLogin+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4752:	fe 01       	movw	r30, r28
    4754:	ff 96       	adiw	r30, 0x3f	; 63
    4756:	60 81       	ld	r22, Z
    4758:	71 81       	ldd	r23, Z+1	; 0x01
    475a:	82 81       	ldd	r24, Z+2	; 0x02
    475c:	93 81       	ldd	r25, Z+3	; 0x03
    475e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4762:	dc 01       	movw	r26, r24
    4764:	cb 01       	movw	r24, r22
    4766:	9e af       	std	Y+62, r25	; 0x3e
    4768:	8d af       	std	Y+61, r24	; 0x3d
    476a:	8d ad       	ldd	r24, Y+61	; 0x3d
    476c:	9e ad       	ldd	r25, Y+62	; 0x3e
    476e:	9a af       	std	Y+58, r25	; 0x3a
    4770:	89 af       	std	Y+57, r24	; 0x39
    4772:	89 ad       	ldd	r24, Y+57	; 0x39
    4774:	9a ad       	ldd	r25, Y+58	; 0x3a
    4776:	01 97       	sbiw	r24, 0x01	; 1
    4778:	f1 f7       	brne	.-4      	; 0x4776 <AdiminLogin+0x140>
    477a:	9a af       	std	Y+58, r25	; 0x3a
    477c:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(200);
		pass_counter=0;
    477e:	10 92 aa 02 	sts	0x02AA, r1
    4782:	0e c1       	rjmp	.+540    	; 0x49a0 <AdiminLogin+0x36a>
		while(pass_counter<PASS_SIZE)
		{
			while (key_pressed == NOT_PRESSED)
			{
				key_pressed = keypad_u8check_press();
    4784:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <keypad_u8check_press>
    4788:	80 93 8c 02 	sts	0x028C, r24
		LCD_vSend_string("Enter Pass:");
		_delay_ms(200);
		pass_counter=0;
		while(pass_counter<PASS_SIZE)
		{
			while (key_pressed == NOT_PRESSED)
    478c:	80 91 8c 02 	lds	r24, 0x028C
    4790:	8f 3f       	cpi	r24, 0xFF	; 255
    4792:	c1 f3       	breq	.-16     	; 0x4784 <AdiminLogin+0x14e>
			{
				key_pressed = keypad_u8check_press();
			}
			pass[pass_counter]=key_pressed-ASCII_ZERO;
    4794:	80 91 aa 02 	lds	r24, 0x02AA
    4798:	28 2f       	mov	r18, r24
    479a:	30 e0       	ldi	r19, 0x00	; 0
    479c:	80 91 8c 02 	lds	r24, 0x028C
    47a0:	80 53       	subi	r24, 0x30	; 48
    47a2:	f9 01       	movw	r30, r18
    47a4:	e1 55       	subi	r30, 0x51	; 81
    47a6:	fd 4f       	sbci	r31, 0xFD	; 253
    47a8:	80 83       	st	Z, r24
			LCD_vSend_char(key_pressed);
    47aa:	80 91 8c 02 	lds	r24, 0x028C
    47ae:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_vSend_char>
    47b2:	80 e0       	ldi	r24, 0x00	; 0
    47b4:	90 e0       	ldi	r25, 0x00	; 0
    47b6:	a6 e9       	ldi	r26, 0x96	; 150
    47b8:	b3 e4       	ldi	r27, 0x43	; 67
    47ba:	8d ab       	std	Y+53, r24	; 0x35
    47bc:	9e ab       	std	Y+54, r25	; 0x36
    47be:	af ab       	std	Y+55, r26	; 0x37
    47c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47c2:	6d a9       	ldd	r22, Y+53	; 0x35
    47c4:	7e a9       	ldd	r23, Y+54	; 0x36
    47c6:	8f a9       	ldd	r24, Y+55	; 0x37
    47c8:	98 ad       	ldd	r25, Y+56	; 0x38
    47ca:	20 e0       	ldi	r18, 0x00	; 0
    47cc:	30 e0       	ldi	r19, 0x00	; 0
    47ce:	4a ef       	ldi	r20, 0xFA	; 250
    47d0:	54 e4       	ldi	r21, 0x44	; 68
    47d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47d6:	dc 01       	movw	r26, r24
    47d8:	cb 01       	movw	r24, r22
    47da:	89 ab       	std	Y+49, r24	; 0x31
    47dc:	9a ab       	std	Y+50, r25	; 0x32
    47de:	ab ab       	std	Y+51, r26	; 0x33
    47e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    47e2:	69 a9       	ldd	r22, Y+49	; 0x31
    47e4:	7a a9       	ldd	r23, Y+50	; 0x32
    47e6:	8b a9       	ldd	r24, Y+51	; 0x33
    47e8:	9c a9       	ldd	r25, Y+52	; 0x34
    47ea:	20 e0       	ldi	r18, 0x00	; 0
    47ec:	30 e0       	ldi	r19, 0x00	; 0
    47ee:	40 e8       	ldi	r20, 0x80	; 128
    47f0:	5f e3       	ldi	r21, 0x3F	; 63
    47f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47f6:	88 23       	and	r24, r24
    47f8:	2c f4       	brge	.+10     	; 0x4804 <AdiminLogin+0x1ce>
		__ticks = 1;
    47fa:	81 e0       	ldi	r24, 0x01	; 1
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	98 ab       	std	Y+48, r25	; 0x30
    4800:	8f a7       	std	Y+47, r24	; 0x2f
    4802:	3f c0       	rjmp	.+126    	; 0x4882 <AdiminLogin+0x24c>
	else if (__tmp > 65535)
    4804:	69 a9       	ldd	r22, Y+49	; 0x31
    4806:	7a a9       	ldd	r23, Y+50	; 0x32
    4808:	8b a9       	ldd	r24, Y+51	; 0x33
    480a:	9c a9       	ldd	r25, Y+52	; 0x34
    480c:	20 e0       	ldi	r18, 0x00	; 0
    480e:	3f ef       	ldi	r19, 0xFF	; 255
    4810:	4f e7       	ldi	r20, 0x7F	; 127
    4812:	57 e4       	ldi	r21, 0x47	; 71
    4814:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4818:	18 16       	cp	r1, r24
    481a:	4c f5       	brge	.+82     	; 0x486e <AdiminLogin+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    481c:	6d a9       	ldd	r22, Y+53	; 0x35
    481e:	7e a9       	ldd	r23, Y+54	; 0x36
    4820:	8f a9       	ldd	r24, Y+55	; 0x37
    4822:	98 ad       	ldd	r25, Y+56	; 0x38
    4824:	20 e0       	ldi	r18, 0x00	; 0
    4826:	30 e0       	ldi	r19, 0x00	; 0
    4828:	40 e2       	ldi	r20, 0x20	; 32
    482a:	51 e4       	ldi	r21, 0x41	; 65
    482c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4830:	dc 01       	movw	r26, r24
    4832:	cb 01       	movw	r24, r22
    4834:	bc 01       	movw	r22, r24
    4836:	cd 01       	movw	r24, r26
    4838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    483c:	dc 01       	movw	r26, r24
    483e:	cb 01       	movw	r24, r22
    4840:	98 ab       	std	Y+48, r25	; 0x30
    4842:	8f a7       	std	Y+47, r24	; 0x2f
    4844:	0f c0       	rjmp	.+30     	; 0x4864 <AdiminLogin+0x22e>
    4846:	88 ec       	ldi	r24, 0xC8	; 200
    4848:	90 e0       	ldi	r25, 0x00	; 0
    484a:	9e a7       	std	Y+46, r25	; 0x2e
    484c:	8d a7       	std	Y+45, r24	; 0x2d
    484e:	8d a5       	ldd	r24, Y+45	; 0x2d
    4850:	9e a5       	ldd	r25, Y+46	; 0x2e
    4852:	01 97       	sbiw	r24, 0x01	; 1
    4854:	f1 f7       	brne	.-4      	; 0x4852 <AdiminLogin+0x21c>
    4856:	9e a7       	std	Y+46, r25	; 0x2e
    4858:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    485a:	8f a5       	ldd	r24, Y+47	; 0x2f
    485c:	98 a9       	ldd	r25, Y+48	; 0x30
    485e:	01 97       	sbiw	r24, 0x01	; 1
    4860:	98 ab       	std	Y+48, r25	; 0x30
    4862:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4864:	8f a5       	ldd	r24, Y+47	; 0x2f
    4866:	98 a9       	ldd	r25, Y+48	; 0x30
    4868:	00 97       	sbiw	r24, 0x00	; 0
    486a:	69 f7       	brne	.-38     	; 0x4846 <AdiminLogin+0x210>
    486c:	14 c0       	rjmp	.+40     	; 0x4896 <AdiminLogin+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    486e:	69 a9       	ldd	r22, Y+49	; 0x31
    4870:	7a a9       	ldd	r23, Y+50	; 0x32
    4872:	8b a9       	ldd	r24, Y+51	; 0x33
    4874:	9c a9       	ldd	r25, Y+52	; 0x34
    4876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    487a:	dc 01       	movw	r26, r24
    487c:	cb 01       	movw	r24, r22
    487e:	98 ab       	std	Y+48, r25	; 0x30
    4880:	8f a7       	std	Y+47, r24	; 0x2f
    4882:	8f a5       	ldd	r24, Y+47	; 0x2f
    4884:	98 a9       	ldd	r25, Y+48	; 0x30
    4886:	9c a7       	std	Y+44, r25	; 0x2c
    4888:	8b a7       	std	Y+43, r24	; 0x2b
    488a:	8b a5       	ldd	r24, Y+43	; 0x2b
    488c:	9c a5       	ldd	r25, Y+44	; 0x2c
    488e:	01 97       	sbiw	r24, 0x01	; 1
    4890:	f1 f7       	brne	.-4      	; 0x488e <AdiminLogin+0x258>
    4892:	9c a7       	std	Y+44, r25	; 0x2c
    4894:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(CHARACTER_PREVIEW_TIME);
			LCD_movecursor(2,12+pass_counter);
    4896:	80 91 aa 02 	lds	r24, 0x02AA
    489a:	98 2f       	mov	r25, r24
    489c:	94 5f       	subi	r25, 0xF4	; 244
    489e:	82 e0       	ldi	r24, 0x02	; 2
    48a0:	69 2f       	mov	r22, r25
    48a2:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_movecursor>
			LCD_vSend_char(PASSWORD_SYMBOL);
    48a6:	8a e2       	ldi	r24, 0x2A	; 42
    48a8:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_vSend_char>
    48ac:	80 e0       	ldi	r24, 0x00	; 0
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	a8 ec       	ldi	r26, 0xC8	; 200
    48b2:	b2 e4       	ldi	r27, 0x42	; 66
    48b4:	8f a3       	std	Y+39, r24	; 0x27
    48b6:	98 a7       	std	Y+40, r25	; 0x28
    48b8:	a9 a7       	std	Y+41, r26	; 0x29
    48ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48bc:	6f a1       	ldd	r22, Y+39	; 0x27
    48be:	78 a5       	ldd	r23, Y+40	; 0x28
    48c0:	89 a5       	ldd	r24, Y+41	; 0x29
    48c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    48c4:	20 e0       	ldi	r18, 0x00	; 0
    48c6:	30 e0       	ldi	r19, 0x00	; 0
    48c8:	4a ef       	ldi	r20, 0xFA	; 250
    48ca:	54 e4       	ldi	r21, 0x44	; 68
    48cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48d0:	dc 01       	movw	r26, r24
    48d2:	cb 01       	movw	r24, r22
    48d4:	8b a3       	std	Y+35, r24	; 0x23
    48d6:	9c a3       	std	Y+36, r25	; 0x24
    48d8:	ad a3       	std	Y+37, r26	; 0x25
    48da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    48dc:	6b a1       	ldd	r22, Y+35	; 0x23
    48de:	7c a1       	ldd	r23, Y+36	; 0x24
    48e0:	8d a1       	ldd	r24, Y+37	; 0x25
    48e2:	9e a1       	ldd	r25, Y+38	; 0x26
    48e4:	20 e0       	ldi	r18, 0x00	; 0
    48e6:	30 e0       	ldi	r19, 0x00	; 0
    48e8:	40 e8       	ldi	r20, 0x80	; 128
    48ea:	5f e3       	ldi	r21, 0x3F	; 63
    48ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48f0:	88 23       	and	r24, r24
    48f2:	2c f4       	brge	.+10     	; 0x48fe <AdiminLogin+0x2c8>
		__ticks = 1;
    48f4:	81 e0       	ldi	r24, 0x01	; 1
    48f6:	90 e0       	ldi	r25, 0x00	; 0
    48f8:	9a a3       	std	Y+34, r25	; 0x22
    48fa:	89 a3       	std	Y+33, r24	; 0x21
    48fc:	3f c0       	rjmp	.+126    	; 0x497c <AdiminLogin+0x346>
	else if (__tmp > 65535)
    48fe:	6b a1       	ldd	r22, Y+35	; 0x23
    4900:	7c a1       	ldd	r23, Y+36	; 0x24
    4902:	8d a1       	ldd	r24, Y+37	; 0x25
    4904:	9e a1       	ldd	r25, Y+38	; 0x26
    4906:	20 e0       	ldi	r18, 0x00	; 0
    4908:	3f ef       	ldi	r19, 0xFF	; 255
    490a:	4f e7       	ldi	r20, 0x7F	; 127
    490c:	57 e4       	ldi	r21, 0x47	; 71
    490e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4912:	18 16       	cp	r1, r24
    4914:	4c f5       	brge	.+82     	; 0x4968 <AdiminLogin+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4916:	6f a1       	ldd	r22, Y+39	; 0x27
    4918:	78 a5       	ldd	r23, Y+40	; 0x28
    491a:	89 a5       	ldd	r24, Y+41	; 0x29
    491c:	9a a5       	ldd	r25, Y+42	; 0x2a
    491e:	20 e0       	ldi	r18, 0x00	; 0
    4920:	30 e0       	ldi	r19, 0x00	; 0
    4922:	40 e2       	ldi	r20, 0x20	; 32
    4924:	51 e4       	ldi	r21, 0x41	; 65
    4926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    492a:	dc 01       	movw	r26, r24
    492c:	cb 01       	movw	r24, r22
    492e:	bc 01       	movw	r22, r24
    4930:	cd 01       	movw	r24, r26
    4932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4936:	dc 01       	movw	r26, r24
    4938:	cb 01       	movw	r24, r22
    493a:	9a a3       	std	Y+34, r25	; 0x22
    493c:	89 a3       	std	Y+33, r24	; 0x21
    493e:	0f c0       	rjmp	.+30     	; 0x495e <AdiminLogin+0x328>
    4940:	88 ec       	ldi	r24, 0xC8	; 200
    4942:	90 e0       	ldi	r25, 0x00	; 0
    4944:	98 a3       	std	Y+32, r25	; 0x20
    4946:	8f 8f       	std	Y+31, r24	; 0x1f
    4948:	8f 8d       	ldd	r24, Y+31	; 0x1f
    494a:	98 a1       	ldd	r25, Y+32	; 0x20
    494c:	01 97       	sbiw	r24, 0x01	; 1
    494e:	f1 f7       	brne	.-4      	; 0x494c <AdiminLogin+0x316>
    4950:	98 a3       	std	Y+32, r25	; 0x20
    4952:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4954:	89 a1       	ldd	r24, Y+33	; 0x21
    4956:	9a a1       	ldd	r25, Y+34	; 0x22
    4958:	01 97       	sbiw	r24, 0x01	; 1
    495a:	9a a3       	std	Y+34, r25	; 0x22
    495c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    495e:	89 a1       	ldd	r24, Y+33	; 0x21
    4960:	9a a1       	ldd	r25, Y+34	; 0x22
    4962:	00 97       	sbiw	r24, 0x00	; 0
    4964:	69 f7       	brne	.-38     	; 0x4940 <AdiminLogin+0x30a>
    4966:	14 c0       	rjmp	.+40     	; 0x4990 <AdiminLogin+0x35a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4968:	6b a1       	ldd	r22, Y+35	; 0x23
    496a:	7c a1       	ldd	r23, Y+36	; 0x24
    496c:	8d a1       	ldd	r24, Y+37	; 0x25
    496e:	9e a1       	ldd	r25, Y+38	; 0x26
    4970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4974:	dc 01       	movw	r26, r24
    4976:	cb 01       	movw	r24, r22
    4978:	9a a3       	std	Y+34, r25	; 0x22
    497a:	89 a3       	std	Y+33, r24	; 0x21
    497c:	89 a1       	ldd	r24, Y+33	; 0x21
    497e:	9a a1       	ldd	r25, Y+34	; 0x22
    4980:	9e 8f       	std	Y+30, r25	; 0x1e
    4982:	8d 8f       	std	Y+29, r24	; 0x1d
    4984:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4986:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4988:	01 97       	sbiw	r24, 0x01	; 1
    498a:	f1 f7       	brne	.-4      	; 0x4988 <AdiminLogin+0x352>
    498c:	9e 8f       	std	Y+30, r25	; 0x1e
    498e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(100);
			pass_counter++;
    4990:	80 91 aa 02 	lds	r24, 0x02AA
    4994:	8f 5f       	subi	r24, 0xFF	; 255
    4996:	80 93 aa 02 	sts	0x02AA, r24
			key_pressed = NOT_PRESSED;
    499a:	8f ef       	ldi	r24, 0xFF	; 255
    499c:	80 93 8c 02 	sts	0x028C, r24
		LCD_vSend_string("Admin mode");
		LCD_movecursor(2,1);
		LCD_vSend_string("Enter Pass:");
		_delay_ms(200);
		pass_counter=0;
		while(pass_counter<PASS_SIZE)
    49a0:	80 91 aa 02 	lds	r24, 0x02AA
    49a4:	84 30       	cpi	r24, 0x04	; 4
    49a6:	08 f4       	brcc	.+2      	; 0x49aa <AdiminLogin+0x374>
    49a8:	f1 ce       	rjmp	.-542    	; 0x478c <AdiminLogin+0x156>
			_delay_ms(100);
			pass_counter++;
			key_pressed = NOT_PRESSED;
		}
		/*compare passwords*/
		if ((ui8ComparePass(pass,Adminpass,PASS_SIZE)) == TRUE)//in case of right password
    49aa:	8f ea       	ldi	r24, 0xAF	; 175
    49ac:	92 e0       	ldi	r25, 0x02	; 2
    49ae:	2b ea       	ldi	r18, 0xAB	; 171
    49b0:	32 e0       	ldi	r19, 0x02	; 2
    49b2:	b9 01       	movw	r22, r18
    49b4:	44 e0       	ldi	r20, 0x04	; 4
    49b6:	0e 94 17 29 	call	0x522e	; 0x522e <ui8ComparePass>
    49ba:	81 30       	cpi	r24, 0x01	; 1
    49bc:	09 f0       	breq	.+2      	; 0x49c0 <AdiminLogin+0x38a>
    49be:	8e c0       	rjmp	.+284    	; 0x4adc <AdiminLogin+0x4a6>
		{
			login_mode = ADMIN;//set the login mode to admin mode
    49c0:	81 e0       	ldi	r24, 0x01	; 1
    49c2:	80 93 a7 02 	sts	0x02A7, r24
			pass_tries_count=0;//clear the counter of wrong tries
    49c6:	10 92 a9 02 	sts	0x02A9, r1
			LCD_clearscreen();
    49ca:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
			LCD_vSend_string("Right pass");
    49ce:	83 ee       	ldi	r24, 0xE3	; 227
    49d0:	91 e0       	ldi	r25, 0x01	; 1
    49d2:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
			LCD_movecursor(2,1);
    49d6:	82 e0       	ldi	r24, 0x02	; 2
    49d8:	61 e0       	ldi	r22, 0x01	; 1
    49da:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_movecursor>
			LCD_vSend_string("Admin mode");
    49de:	8c ec       	ldi	r24, 0xCC	; 204
    49e0:	91 e0       	ldi	r25, 0x01	; 1
    49e2:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    49e6:	80 e0       	ldi	r24, 0x00	; 0
    49e8:	90 e0       	ldi	r25, 0x00	; 0
    49ea:	aa ef       	ldi	r26, 0xFA	; 250
    49ec:	b3 e4       	ldi	r27, 0x43	; 67
    49ee:	89 8f       	std	Y+25, r24	; 0x19
    49f0:	9a 8f       	std	Y+26, r25	; 0x1a
    49f2:	ab 8f       	std	Y+27, r26	; 0x1b
    49f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49f6:	69 8d       	ldd	r22, Y+25	; 0x19
    49f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    49fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49fe:	20 e0       	ldi	r18, 0x00	; 0
    4a00:	30 e0       	ldi	r19, 0x00	; 0
    4a02:	4a ef       	ldi	r20, 0xFA	; 250
    4a04:	54 e4       	ldi	r21, 0x44	; 68
    4a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a0a:	dc 01       	movw	r26, r24
    4a0c:	cb 01       	movw	r24, r22
    4a0e:	8d 8b       	std	Y+21, r24	; 0x15
    4a10:	9e 8b       	std	Y+22, r25	; 0x16
    4a12:	af 8b       	std	Y+23, r26	; 0x17
    4a14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4a16:	6d 89       	ldd	r22, Y+21	; 0x15
    4a18:	7e 89       	ldd	r23, Y+22	; 0x16
    4a1a:	8f 89       	ldd	r24, Y+23	; 0x17
    4a1c:	98 8d       	ldd	r25, Y+24	; 0x18
    4a1e:	20 e0       	ldi	r18, 0x00	; 0
    4a20:	30 e0       	ldi	r19, 0x00	; 0
    4a22:	40 e8       	ldi	r20, 0x80	; 128
    4a24:	5f e3       	ldi	r21, 0x3F	; 63
    4a26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a2a:	88 23       	and	r24, r24
    4a2c:	2c f4       	brge	.+10     	; 0x4a38 <AdiminLogin+0x402>
		__ticks = 1;
    4a2e:	81 e0       	ldi	r24, 0x01	; 1
    4a30:	90 e0       	ldi	r25, 0x00	; 0
    4a32:	9c 8b       	std	Y+20, r25	; 0x14
    4a34:	8b 8b       	std	Y+19, r24	; 0x13
    4a36:	3f c0       	rjmp	.+126    	; 0x4ab6 <AdiminLogin+0x480>
	else if (__tmp > 65535)
    4a38:	6d 89       	ldd	r22, Y+21	; 0x15
    4a3a:	7e 89       	ldd	r23, Y+22	; 0x16
    4a3c:	8f 89       	ldd	r24, Y+23	; 0x17
    4a3e:	98 8d       	ldd	r25, Y+24	; 0x18
    4a40:	20 e0       	ldi	r18, 0x00	; 0
    4a42:	3f ef       	ldi	r19, 0xFF	; 255
    4a44:	4f e7       	ldi	r20, 0x7F	; 127
    4a46:	57 e4       	ldi	r21, 0x47	; 71
    4a48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a4c:	18 16       	cp	r1, r24
    4a4e:	4c f5       	brge	.+82     	; 0x4aa2 <AdiminLogin+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a50:	69 8d       	ldd	r22, Y+25	; 0x19
    4a52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a58:	20 e0       	ldi	r18, 0x00	; 0
    4a5a:	30 e0       	ldi	r19, 0x00	; 0
    4a5c:	40 e2       	ldi	r20, 0x20	; 32
    4a5e:	51 e4       	ldi	r21, 0x41	; 65
    4a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a64:	dc 01       	movw	r26, r24
    4a66:	cb 01       	movw	r24, r22
    4a68:	bc 01       	movw	r22, r24
    4a6a:	cd 01       	movw	r24, r26
    4a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a70:	dc 01       	movw	r26, r24
    4a72:	cb 01       	movw	r24, r22
    4a74:	9c 8b       	std	Y+20, r25	; 0x14
    4a76:	8b 8b       	std	Y+19, r24	; 0x13
    4a78:	0f c0       	rjmp	.+30     	; 0x4a98 <AdiminLogin+0x462>
    4a7a:	88 ec       	ldi	r24, 0xC8	; 200
    4a7c:	90 e0       	ldi	r25, 0x00	; 0
    4a7e:	9a 8b       	std	Y+18, r25	; 0x12
    4a80:	89 8b       	std	Y+17, r24	; 0x11
    4a82:	89 89       	ldd	r24, Y+17	; 0x11
    4a84:	9a 89       	ldd	r25, Y+18	; 0x12
    4a86:	01 97       	sbiw	r24, 0x01	; 1
    4a88:	f1 f7       	brne	.-4      	; 0x4a86 <AdiminLogin+0x450>
    4a8a:	9a 8b       	std	Y+18, r25	; 0x12
    4a8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a8e:	8b 89       	ldd	r24, Y+19	; 0x13
    4a90:	9c 89       	ldd	r25, Y+20	; 0x14
    4a92:	01 97       	sbiw	r24, 0x01	; 1
    4a94:	9c 8b       	std	Y+20, r25	; 0x14
    4a96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a98:	8b 89       	ldd	r24, Y+19	; 0x13
    4a9a:	9c 89       	ldd	r25, Y+20	; 0x14
    4a9c:	00 97       	sbiw	r24, 0x00	; 0
    4a9e:	69 f7       	brne	.-38     	; 0x4a7a <AdiminLogin+0x444>
    4aa0:	14 c0       	rjmp	.+40     	; 0x4aca <AdiminLogin+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4aa2:	6d 89       	ldd	r22, Y+21	; 0x15
    4aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    4aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    4aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    4aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aae:	dc 01       	movw	r26, r24
    4ab0:	cb 01       	movw	r24, r22
    4ab2:	9c 8b       	std	Y+20, r25	; 0x14
    4ab4:	8b 8b       	std	Y+19, r24	; 0x13
    4ab6:	8b 89       	ldd	r24, Y+19	; 0x13
    4ab8:	9c 89       	ldd	r25, Y+20	; 0x14
    4aba:	98 8b       	std	Y+16, r25	; 0x10
    4abc:	8f 87       	std	Y+15, r24	; 0x0f
    4abe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ac0:	98 89       	ldd	r25, Y+16	; 0x10
    4ac2:	01 97       	sbiw	r24, 0x01	; 1
    4ac4:	f1 f7       	brne	.-4      	; 0x4ac2 <AdiminLogin+0x48c>
    4ac6:	98 8b       	std	Y+16, r25	; 0x10
    4ac8:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			LED_vTurnOn(ADMIN_LED_PORT,ADMIN_LED_PIN);//turn on the led of admin
    4aca:	83 e4       	ldi	r24, 0x43	; 67
    4acc:	60 e0       	ldi	r22, 0x00	; 0
    4ace:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <LED_vTurnOn>
			timer0_initializeCTC();
    4ad2:	0e 94 a5 2b 	call	0x574a	; 0x574a <timer0_initializeCTC>
			LCD_clearscreen();
    4ad6:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
    4ada:	9a c0       	rjmp	.+308    	; 0x4c10 <AdiminLogin+0x5da>
		}
		else//in case of wrong password
		{
			pass_tries_count++;
    4adc:	80 91 a9 02 	lds	r24, 0x02A9
    4ae0:	8f 5f       	subi	r24, 0xFF	; 255
    4ae2:	80 93 a9 02 	sts	0x02A9, r24
			login_mode = NO_MODE;
    4ae6:	10 92 a7 02 	sts	0x02A7, r1
			LCD_clearscreen();
    4aea:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
			LCD_vSend_string("Wrong Pass");
    4aee:	8e ee       	ldi	r24, 0xEE	; 238
    4af0:	91 e0       	ldi	r25, 0x01	; 1
    4af2:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
			LCD_movecursor(2,1);
    4af6:	82 e0       	ldi	r24, 0x02	; 2
    4af8:	61 e0       	ldi	r22, 0x01	; 1
    4afa:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_movecursor>
			LCD_vSend_string("Tries left:");
    4afe:	89 ef       	ldi	r24, 0xF9	; 249
    4b00:	91 e0       	ldi	r25, 0x01	; 1
    4b02:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
			LCD_vSend_char(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);
    4b06:	90 91 a9 02 	lds	r25, 0x02A9
    4b0a:	83 e3       	ldi	r24, 0x33	; 51
    4b0c:	89 1b       	sub	r24, r25
    4b0e:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_vSend_char>
    4b12:	80 e0       	ldi	r24, 0x00	; 0
    4b14:	90 e0       	ldi	r25, 0x00	; 0
    4b16:	aa e7       	ldi	r26, 0x7A	; 122
    4b18:	b4 e4       	ldi	r27, 0x44	; 68
    4b1a:	8b 87       	std	Y+11, r24	; 0x0b
    4b1c:	9c 87       	std	Y+12, r25	; 0x0c
    4b1e:	ad 87       	std	Y+13, r26	; 0x0d
    4b20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b22:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b24:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b26:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b28:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b2a:	20 e0       	ldi	r18, 0x00	; 0
    4b2c:	30 e0       	ldi	r19, 0x00	; 0
    4b2e:	4a ef       	ldi	r20, 0xFA	; 250
    4b30:	54 e4       	ldi	r21, 0x44	; 68
    4b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b36:	dc 01       	movw	r26, r24
    4b38:	cb 01       	movw	r24, r22
    4b3a:	8f 83       	std	Y+7, r24	; 0x07
    4b3c:	98 87       	std	Y+8, r25	; 0x08
    4b3e:	a9 87       	std	Y+9, r26	; 0x09
    4b40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b42:	6f 81       	ldd	r22, Y+7	; 0x07
    4b44:	78 85       	ldd	r23, Y+8	; 0x08
    4b46:	89 85       	ldd	r24, Y+9	; 0x09
    4b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b4a:	20 e0       	ldi	r18, 0x00	; 0
    4b4c:	30 e0       	ldi	r19, 0x00	; 0
    4b4e:	40 e8       	ldi	r20, 0x80	; 128
    4b50:	5f e3       	ldi	r21, 0x3F	; 63
    4b52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b56:	88 23       	and	r24, r24
    4b58:	2c f4       	brge	.+10     	; 0x4b64 <AdiminLogin+0x52e>
		__ticks = 1;
    4b5a:	81 e0       	ldi	r24, 0x01	; 1
    4b5c:	90 e0       	ldi	r25, 0x00	; 0
    4b5e:	9e 83       	std	Y+6, r25	; 0x06
    4b60:	8d 83       	std	Y+5, r24	; 0x05
    4b62:	3f c0       	rjmp	.+126    	; 0x4be2 <AdiminLogin+0x5ac>
	else if (__tmp > 65535)
    4b64:	6f 81       	ldd	r22, Y+7	; 0x07
    4b66:	78 85       	ldd	r23, Y+8	; 0x08
    4b68:	89 85       	ldd	r24, Y+9	; 0x09
    4b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b6c:	20 e0       	ldi	r18, 0x00	; 0
    4b6e:	3f ef       	ldi	r19, 0xFF	; 255
    4b70:	4f e7       	ldi	r20, 0x7F	; 127
    4b72:	57 e4       	ldi	r21, 0x47	; 71
    4b74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b78:	18 16       	cp	r1, r24
    4b7a:	4c f5       	brge	.+82     	; 0x4bce <AdiminLogin+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b80:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b82:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b84:	20 e0       	ldi	r18, 0x00	; 0
    4b86:	30 e0       	ldi	r19, 0x00	; 0
    4b88:	40 e2       	ldi	r20, 0x20	; 32
    4b8a:	51 e4       	ldi	r21, 0x41	; 65
    4b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b90:	dc 01       	movw	r26, r24
    4b92:	cb 01       	movw	r24, r22
    4b94:	bc 01       	movw	r22, r24
    4b96:	cd 01       	movw	r24, r26
    4b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b9c:	dc 01       	movw	r26, r24
    4b9e:	cb 01       	movw	r24, r22
    4ba0:	9e 83       	std	Y+6, r25	; 0x06
    4ba2:	8d 83       	std	Y+5, r24	; 0x05
    4ba4:	0f c0       	rjmp	.+30     	; 0x4bc4 <AdiminLogin+0x58e>
    4ba6:	88 ec       	ldi	r24, 0xC8	; 200
    4ba8:	90 e0       	ldi	r25, 0x00	; 0
    4baa:	9c 83       	std	Y+4, r25	; 0x04
    4bac:	8b 83       	std	Y+3, r24	; 0x03
    4bae:	8b 81       	ldd	r24, Y+3	; 0x03
    4bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    4bb2:	01 97       	sbiw	r24, 0x01	; 1
    4bb4:	f1 f7       	brne	.-4      	; 0x4bb2 <AdiminLogin+0x57c>
    4bb6:	9c 83       	std	Y+4, r25	; 0x04
    4bb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bba:	8d 81       	ldd	r24, Y+5	; 0x05
    4bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    4bbe:	01 97       	sbiw	r24, 0x01	; 1
    4bc0:	9e 83       	std	Y+6, r25	; 0x06
    4bc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    4bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    4bc8:	00 97       	sbiw	r24, 0x00	; 0
    4bca:	69 f7       	brne	.-38     	; 0x4ba6 <AdiminLogin+0x570>
    4bcc:	14 c0       	rjmp	.+40     	; 0x4bf6 <AdiminLogin+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bce:	6f 81       	ldd	r22, Y+7	; 0x07
    4bd0:	78 85       	ldd	r23, Y+8	; 0x08
    4bd2:	89 85       	ldd	r24, Y+9	; 0x09
    4bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bda:	dc 01       	movw	r26, r24
    4bdc:	cb 01       	movw	r24, r22
    4bde:	9e 83       	std	Y+6, r25	; 0x06
    4be0:	8d 83       	std	Y+5, r24	; 0x05
    4be2:	8d 81       	ldd	r24, Y+5	; 0x05
    4be4:	9e 81       	ldd	r25, Y+6	; 0x06
    4be6:	9a 83       	std	Y+2, r25	; 0x02
    4be8:	89 83       	std	Y+1, r24	; 0x01
    4bea:	89 81       	ldd	r24, Y+1	; 0x01
    4bec:	9a 81       	ldd	r25, Y+2	; 0x02
    4bee:	01 97       	sbiw	r24, 0x01	; 1
    4bf0:	f1 f7       	brne	.-4      	; 0x4bee <AdiminLogin+0x5b8>
    4bf2:	9a 83       	std	Y+2, r25	; 0x02
    4bf4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			LCD_clearscreen();
    4bf6:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
			if (pass_tries_count>=TRIES_ALLOWED)
    4bfa:	80 91 a9 02 	lds	r24, 0x02A9
    4bfe:	83 30       	cpi	r24, 0x03	; 3
    4c00:	38 f0       	brcs	.+14     	; 0x4c10 <AdiminLogin+0x5da>
			{
				LOGIN_BLOCKED =TRUE;
    4c02:	81 e0       	ldi	r24, 0x01	; 1
    4c04:	80 93 a5 02 	sts	0x02A5, r24
				block_mode_flag = TRUE;
    4c08:	81 e0       	ldi	r24, 0x01	; 1
    4c0a:	80 93 a8 02 	sts	0x02A8, r24
    4c0e:	05 c0       	rjmp	.+10     	; 0x4c1a <AdiminLogin+0x5e4>
	LCD_clearscreen();
	LOGIN_BLOCKED=FALSE;
}
void AdiminLogin(void)
{
	while(login_mode!=ADMIN)
    4c10:	80 91 a7 02 	lds	r24, 0x02A7
    4c14:	81 30       	cpi	r24, 0x01	; 1
    4c16:	09 f0       	breq	.+2      	; 0x4c1a <AdiminLogin+0x5e4>
    4c18:	1c cd       	rjmp	.-1480   	; 0x4652 <AdiminLogin+0x1c>
				block_mode_flag = TRUE;
				break;//break the loop of admin login #while(login_mode!=ADMIN)
			}
		}
	}
}
    4c1a:	ca 5b       	subi	r28, 0xBA	; 186
    4c1c:	df 4f       	sbci	r29, 0xFF	; 255
    4c1e:	0f b6       	in	r0, 0x3f	; 63
    4c20:	f8 94       	cli
    4c22:	de bf       	out	0x3e, r29	; 62
    4c24:	0f be       	out	0x3f, r0	; 63
    4c26:	cd bf       	out	0x3d, r28	; 61
    4c28:	cf 91       	pop	r28
    4c2a:	df 91       	pop	r29
    4c2c:	1f 91       	pop	r17
    4c2e:	0f 91       	pop	r16
    4c30:	08 95       	ret

00004c32 <GistLogin>:
void GistLogin(void)
{
    4c32:	0f 93       	push	r16
    4c34:	1f 93       	push	r17
    4c36:	df 93       	push	r29
    4c38:	cf 93       	push	r28
    4c3a:	cd b7       	in	r28, 0x3d	; 61
    4c3c:	de b7       	in	r29, 0x3e	; 62
    4c3e:	c6 54       	subi	r28, 0x46	; 70
    4c40:	d0 40       	sbci	r29, 0x00	; 0
    4c42:	0f b6       	in	r0, 0x3f	; 63
    4c44:	f8 94       	cli
    4c46:	de bf       	out	0x3e, r29	; 62
    4c48:	0f be       	out	0x3f, r0	; 63
    4c4a:	cd bf       	out	0x3d, r28	; 61
    4c4c:	df c2       	rjmp	.+1470   	; 0x520c <GistLogin+0x5da>
	while(login_mode != GUEST)
	{
		key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
    4c4e:	8f ef       	ldi	r24, 0xFF	; 255
    4c50:	80 93 8c 02 	sts	0x028C, r24
		LCD_clearscreen();
    4c54:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
		LCD_vSend_string("Guest mode");
    4c58:	85 e0       	ldi	r24, 0x05	; 5
    4c5a:	92 e0       	ldi	r25, 0x02	; 2
    4c5c:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
		LCD_movecursor(2,1);
    4c60:	82 e0       	ldi	r24, 0x02	; 2
    4c62:	61 e0       	ldi	r22, 0x01	; 1
    4c64:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_movecursor>
		LCD_vSend_string("Enter pass:");
    4c68:	80 e1       	ldi	r24, 0x10	; 16
    4c6a:	92 e0       	ldi	r25, 0x02	; 2
    4c6c:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    4c70:	fe 01       	movw	r30, r28
    4c72:	ed 5b       	subi	r30, 0xBD	; 189
    4c74:	ff 4f       	sbci	r31, 0xFF	; 255
    4c76:	80 e0       	ldi	r24, 0x00	; 0
    4c78:	90 e0       	ldi	r25, 0x00	; 0
    4c7a:	a8 e4       	ldi	r26, 0x48	; 72
    4c7c:	b3 e4       	ldi	r27, 0x43	; 67
    4c7e:	80 83       	st	Z, r24
    4c80:	91 83       	std	Z+1, r25	; 0x01
    4c82:	a2 83       	std	Z+2, r26	; 0x02
    4c84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c86:	8e 01       	movw	r16, r28
    4c88:	01 5c       	subi	r16, 0xC1	; 193
    4c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c8c:	fe 01       	movw	r30, r28
    4c8e:	ed 5b       	subi	r30, 0xBD	; 189
    4c90:	ff 4f       	sbci	r31, 0xFF	; 255
    4c92:	60 81       	ld	r22, Z
    4c94:	71 81       	ldd	r23, Z+1	; 0x01
    4c96:	82 81       	ldd	r24, Z+2	; 0x02
    4c98:	93 81       	ldd	r25, Z+3	; 0x03
    4c9a:	20 e0       	ldi	r18, 0x00	; 0
    4c9c:	30 e0       	ldi	r19, 0x00	; 0
    4c9e:	4a ef       	ldi	r20, 0xFA	; 250
    4ca0:	54 e4       	ldi	r21, 0x44	; 68
    4ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ca6:	dc 01       	movw	r26, r24
    4ca8:	cb 01       	movw	r24, r22
    4caa:	f8 01       	movw	r30, r16
    4cac:	80 83       	st	Z, r24
    4cae:	91 83       	std	Z+1, r25	; 0x01
    4cb0:	a2 83       	std	Z+2, r26	; 0x02
    4cb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4cb4:	fe 01       	movw	r30, r28
    4cb6:	ff 96       	adiw	r30, 0x3f	; 63
    4cb8:	60 81       	ld	r22, Z
    4cba:	71 81       	ldd	r23, Z+1	; 0x01
    4cbc:	82 81       	ldd	r24, Z+2	; 0x02
    4cbe:	93 81       	ldd	r25, Z+3	; 0x03
    4cc0:	20 e0       	ldi	r18, 0x00	; 0
    4cc2:	30 e0       	ldi	r19, 0x00	; 0
    4cc4:	40 e8       	ldi	r20, 0x80	; 128
    4cc6:	5f e3       	ldi	r21, 0x3F	; 63
    4cc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ccc:	88 23       	and	r24, r24
    4cce:	2c f4       	brge	.+10     	; 0x4cda <GistLogin+0xa8>
		__ticks = 1;
    4cd0:	81 e0       	ldi	r24, 0x01	; 1
    4cd2:	90 e0       	ldi	r25, 0x00	; 0
    4cd4:	9e af       	std	Y+62, r25	; 0x3e
    4cd6:	8d af       	std	Y+61, r24	; 0x3d
    4cd8:	46 c0       	rjmp	.+140    	; 0x4d66 <GistLogin+0x134>
	else if (__tmp > 65535)
    4cda:	fe 01       	movw	r30, r28
    4cdc:	ff 96       	adiw	r30, 0x3f	; 63
    4cde:	60 81       	ld	r22, Z
    4ce0:	71 81       	ldd	r23, Z+1	; 0x01
    4ce2:	82 81       	ldd	r24, Z+2	; 0x02
    4ce4:	93 81       	ldd	r25, Z+3	; 0x03
    4ce6:	20 e0       	ldi	r18, 0x00	; 0
    4ce8:	3f ef       	ldi	r19, 0xFF	; 255
    4cea:	4f e7       	ldi	r20, 0x7F	; 127
    4cec:	57 e4       	ldi	r21, 0x47	; 71
    4cee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cf2:	18 16       	cp	r1, r24
    4cf4:	64 f5       	brge	.+88     	; 0x4d4e <GistLogin+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cf6:	fe 01       	movw	r30, r28
    4cf8:	ed 5b       	subi	r30, 0xBD	; 189
    4cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    4cfc:	60 81       	ld	r22, Z
    4cfe:	71 81       	ldd	r23, Z+1	; 0x01
    4d00:	82 81       	ldd	r24, Z+2	; 0x02
    4d02:	93 81       	ldd	r25, Z+3	; 0x03
    4d04:	20 e0       	ldi	r18, 0x00	; 0
    4d06:	30 e0       	ldi	r19, 0x00	; 0
    4d08:	40 e2       	ldi	r20, 0x20	; 32
    4d0a:	51 e4       	ldi	r21, 0x41	; 65
    4d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d10:	dc 01       	movw	r26, r24
    4d12:	cb 01       	movw	r24, r22
    4d14:	bc 01       	movw	r22, r24
    4d16:	cd 01       	movw	r24, r26
    4d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d1c:	dc 01       	movw	r26, r24
    4d1e:	cb 01       	movw	r24, r22
    4d20:	9e af       	std	Y+62, r25	; 0x3e
    4d22:	8d af       	std	Y+61, r24	; 0x3d
    4d24:	0f c0       	rjmp	.+30     	; 0x4d44 <GistLogin+0x112>
    4d26:	88 ec       	ldi	r24, 0xC8	; 200
    4d28:	90 e0       	ldi	r25, 0x00	; 0
    4d2a:	9c af       	std	Y+60, r25	; 0x3c
    4d2c:	8b af       	std	Y+59, r24	; 0x3b
    4d2e:	8b ad       	ldd	r24, Y+59	; 0x3b
    4d30:	9c ad       	ldd	r25, Y+60	; 0x3c
    4d32:	01 97       	sbiw	r24, 0x01	; 1
    4d34:	f1 f7       	brne	.-4      	; 0x4d32 <GistLogin+0x100>
    4d36:	9c af       	std	Y+60, r25	; 0x3c
    4d38:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d3a:	8d ad       	ldd	r24, Y+61	; 0x3d
    4d3c:	9e ad       	ldd	r25, Y+62	; 0x3e
    4d3e:	01 97       	sbiw	r24, 0x01	; 1
    4d40:	9e af       	std	Y+62, r25	; 0x3e
    4d42:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d44:	8d ad       	ldd	r24, Y+61	; 0x3d
    4d46:	9e ad       	ldd	r25, Y+62	; 0x3e
    4d48:	00 97       	sbiw	r24, 0x00	; 0
    4d4a:	69 f7       	brne	.-38     	; 0x4d26 <GistLogin+0xf4>
    4d4c:	16 c0       	rjmp	.+44     	; 0x4d7a <GistLogin+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d4e:	fe 01       	movw	r30, r28
    4d50:	ff 96       	adiw	r30, 0x3f	; 63
    4d52:	60 81       	ld	r22, Z
    4d54:	71 81       	ldd	r23, Z+1	; 0x01
    4d56:	82 81       	ldd	r24, Z+2	; 0x02
    4d58:	93 81       	ldd	r25, Z+3	; 0x03
    4d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d5e:	dc 01       	movw	r26, r24
    4d60:	cb 01       	movw	r24, r22
    4d62:	9e af       	std	Y+62, r25	; 0x3e
    4d64:	8d af       	std	Y+61, r24	; 0x3d
    4d66:	8d ad       	ldd	r24, Y+61	; 0x3d
    4d68:	9e ad       	ldd	r25, Y+62	; 0x3e
    4d6a:	9a af       	std	Y+58, r25	; 0x3a
    4d6c:	89 af       	std	Y+57, r24	; 0x39
    4d6e:	89 ad       	ldd	r24, Y+57	; 0x39
    4d70:	9a ad       	ldd	r25, Y+58	; 0x3a
    4d72:	01 97       	sbiw	r24, 0x01	; 1
    4d74:	f1 f7       	brne	.-4      	; 0x4d72 <GistLogin+0x140>
    4d76:	9a af       	std	Y+58, r25	; 0x3a
    4d78:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(200);
		pass_counter=0;
    4d7a:	10 92 aa 02 	sts	0x02AA, r1
    4d7e:	0e c1       	rjmp	.+540    	; 0x4f9c <GistLogin+0x36a>
		while(pass_counter<PASS_SIZE)
		{
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
    4d80:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <keypad_u8check_press>
    4d84:	80 93 8c 02 	sts	0x028C, r24
		LCD_vSend_string("Enter pass:");
		_delay_ms(200);
		pass_counter=0;
		while(pass_counter<PASS_SIZE)
		{
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
    4d88:	80 91 8c 02 	lds	r24, 0x028C
    4d8c:	8f 3f       	cpi	r24, 0xFF	; 255
    4d8e:	c1 f3       	breq	.-16     	; 0x4d80 <GistLogin+0x14e>
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
			}
			pass[pass_counter]=key_pressed-ASCII_ZERO;//add the pressed key to the password string
    4d90:	80 91 aa 02 	lds	r24, 0x02AA
    4d94:	28 2f       	mov	r18, r24
    4d96:	30 e0       	ldi	r19, 0x00	; 0
    4d98:	80 91 8c 02 	lds	r24, 0x028C
    4d9c:	80 53       	subi	r24, 0x30	; 48
    4d9e:	f9 01       	movw	r30, r18
    4da0:	e1 55       	subi	r30, 0x51	; 81
    4da2:	fd 4f       	sbci	r31, 0xFD	; 253
    4da4:	80 83       	st	Z, r24
			LCD_vSend_char(key_pressed);//print the entered character
    4da6:	80 91 8c 02 	lds	r24, 0x028C
    4daa:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_vSend_char>
    4dae:	80 e0       	ldi	r24, 0x00	; 0
    4db0:	90 e0       	ldi	r25, 0x00	; 0
    4db2:	a6 e9       	ldi	r26, 0x96	; 150
    4db4:	b3 e4       	ldi	r27, 0x43	; 67
    4db6:	8d ab       	std	Y+53, r24	; 0x35
    4db8:	9e ab       	std	Y+54, r25	; 0x36
    4dba:	af ab       	std	Y+55, r26	; 0x37
    4dbc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dbe:	6d a9       	ldd	r22, Y+53	; 0x35
    4dc0:	7e a9       	ldd	r23, Y+54	; 0x36
    4dc2:	8f a9       	ldd	r24, Y+55	; 0x37
    4dc4:	98 ad       	ldd	r25, Y+56	; 0x38
    4dc6:	20 e0       	ldi	r18, 0x00	; 0
    4dc8:	30 e0       	ldi	r19, 0x00	; 0
    4dca:	4a ef       	ldi	r20, 0xFA	; 250
    4dcc:	54 e4       	ldi	r21, 0x44	; 68
    4dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dd2:	dc 01       	movw	r26, r24
    4dd4:	cb 01       	movw	r24, r22
    4dd6:	89 ab       	std	Y+49, r24	; 0x31
    4dd8:	9a ab       	std	Y+50, r25	; 0x32
    4dda:	ab ab       	std	Y+51, r26	; 0x33
    4ddc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4dde:	69 a9       	ldd	r22, Y+49	; 0x31
    4de0:	7a a9       	ldd	r23, Y+50	; 0x32
    4de2:	8b a9       	ldd	r24, Y+51	; 0x33
    4de4:	9c a9       	ldd	r25, Y+52	; 0x34
    4de6:	20 e0       	ldi	r18, 0x00	; 0
    4de8:	30 e0       	ldi	r19, 0x00	; 0
    4dea:	40 e8       	ldi	r20, 0x80	; 128
    4dec:	5f e3       	ldi	r21, 0x3F	; 63
    4dee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4df2:	88 23       	and	r24, r24
    4df4:	2c f4       	brge	.+10     	; 0x4e00 <GistLogin+0x1ce>
		__ticks = 1;
    4df6:	81 e0       	ldi	r24, 0x01	; 1
    4df8:	90 e0       	ldi	r25, 0x00	; 0
    4dfa:	98 ab       	std	Y+48, r25	; 0x30
    4dfc:	8f a7       	std	Y+47, r24	; 0x2f
    4dfe:	3f c0       	rjmp	.+126    	; 0x4e7e <GistLogin+0x24c>
	else if (__tmp > 65535)
    4e00:	69 a9       	ldd	r22, Y+49	; 0x31
    4e02:	7a a9       	ldd	r23, Y+50	; 0x32
    4e04:	8b a9       	ldd	r24, Y+51	; 0x33
    4e06:	9c a9       	ldd	r25, Y+52	; 0x34
    4e08:	20 e0       	ldi	r18, 0x00	; 0
    4e0a:	3f ef       	ldi	r19, 0xFF	; 255
    4e0c:	4f e7       	ldi	r20, 0x7F	; 127
    4e0e:	57 e4       	ldi	r21, 0x47	; 71
    4e10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e14:	18 16       	cp	r1, r24
    4e16:	4c f5       	brge	.+82     	; 0x4e6a <GistLogin+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e18:	6d a9       	ldd	r22, Y+53	; 0x35
    4e1a:	7e a9       	ldd	r23, Y+54	; 0x36
    4e1c:	8f a9       	ldd	r24, Y+55	; 0x37
    4e1e:	98 ad       	ldd	r25, Y+56	; 0x38
    4e20:	20 e0       	ldi	r18, 0x00	; 0
    4e22:	30 e0       	ldi	r19, 0x00	; 0
    4e24:	40 e2       	ldi	r20, 0x20	; 32
    4e26:	51 e4       	ldi	r21, 0x41	; 65
    4e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e2c:	dc 01       	movw	r26, r24
    4e2e:	cb 01       	movw	r24, r22
    4e30:	bc 01       	movw	r22, r24
    4e32:	cd 01       	movw	r24, r26
    4e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e38:	dc 01       	movw	r26, r24
    4e3a:	cb 01       	movw	r24, r22
    4e3c:	98 ab       	std	Y+48, r25	; 0x30
    4e3e:	8f a7       	std	Y+47, r24	; 0x2f
    4e40:	0f c0       	rjmp	.+30     	; 0x4e60 <GistLogin+0x22e>
    4e42:	88 ec       	ldi	r24, 0xC8	; 200
    4e44:	90 e0       	ldi	r25, 0x00	; 0
    4e46:	9e a7       	std	Y+46, r25	; 0x2e
    4e48:	8d a7       	std	Y+45, r24	; 0x2d
    4e4a:	8d a5       	ldd	r24, Y+45	; 0x2d
    4e4c:	9e a5       	ldd	r25, Y+46	; 0x2e
    4e4e:	01 97       	sbiw	r24, 0x01	; 1
    4e50:	f1 f7       	brne	.-4      	; 0x4e4e <GistLogin+0x21c>
    4e52:	9e a7       	std	Y+46, r25	; 0x2e
    4e54:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e56:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e58:	98 a9       	ldd	r25, Y+48	; 0x30
    4e5a:	01 97       	sbiw	r24, 0x01	; 1
    4e5c:	98 ab       	std	Y+48, r25	; 0x30
    4e5e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e60:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e62:	98 a9       	ldd	r25, Y+48	; 0x30
    4e64:	00 97       	sbiw	r24, 0x00	; 0
    4e66:	69 f7       	brne	.-38     	; 0x4e42 <GistLogin+0x210>
    4e68:	14 c0       	rjmp	.+40     	; 0x4e92 <GistLogin+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e6a:	69 a9       	ldd	r22, Y+49	; 0x31
    4e6c:	7a a9       	ldd	r23, Y+50	; 0x32
    4e6e:	8b a9       	ldd	r24, Y+51	; 0x33
    4e70:	9c a9       	ldd	r25, Y+52	; 0x34
    4e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e76:	dc 01       	movw	r26, r24
    4e78:	cb 01       	movw	r24, r22
    4e7a:	98 ab       	std	Y+48, r25	; 0x30
    4e7c:	8f a7       	std	Y+47, r24	; 0x2f
    4e7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e80:	98 a9       	ldd	r25, Y+48	; 0x30
    4e82:	9c a7       	std	Y+44, r25	; 0x2c
    4e84:	8b a7       	std	Y+43, r24	; 0x2b
    4e86:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e88:	9c a5       	ldd	r25, Y+44	; 0x2c
    4e8a:	01 97       	sbiw	r24, 0x01	; 1
    4e8c:	f1 f7       	brne	.-4      	; 0x4e8a <GistLogin+0x258>
    4e8e:	9c a7       	std	Y+44, r25	; 0x2c
    4e90:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(CHARACTER_PREVIEW_TIME);
			LCD_movecursor(2,12+pass_counter);//return the cursor to the location of the previous character to replace it with the password sign
    4e92:	80 91 aa 02 	lds	r24, 0x02AA
    4e96:	98 2f       	mov	r25, r24
    4e98:	94 5f       	subi	r25, 0xF4	; 244
    4e9a:	82 e0       	ldi	r24, 0x02	; 2
    4e9c:	69 2f       	mov	r22, r25
    4e9e:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_movecursor>
			LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
    4ea2:	8a e2       	ldi	r24, 0x2A	; 42
    4ea4:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_vSend_char>
    4ea8:	80 e0       	ldi	r24, 0x00	; 0
    4eaa:	90 e0       	ldi	r25, 0x00	; 0
    4eac:	a8 ec       	ldi	r26, 0xC8	; 200
    4eae:	b2 e4       	ldi	r27, 0x42	; 66
    4eb0:	8f a3       	std	Y+39, r24	; 0x27
    4eb2:	98 a7       	std	Y+40, r25	; 0x28
    4eb4:	a9 a7       	std	Y+41, r26	; 0x29
    4eb6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4eb8:	6f a1       	ldd	r22, Y+39	; 0x27
    4eba:	78 a5       	ldd	r23, Y+40	; 0x28
    4ebc:	89 a5       	ldd	r24, Y+41	; 0x29
    4ebe:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ec0:	20 e0       	ldi	r18, 0x00	; 0
    4ec2:	30 e0       	ldi	r19, 0x00	; 0
    4ec4:	4a ef       	ldi	r20, 0xFA	; 250
    4ec6:	54 e4       	ldi	r21, 0x44	; 68
    4ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ecc:	dc 01       	movw	r26, r24
    4ece:	cb 01       	movw	r24, r22
    4ed0:	8b a3       	std	Y+35, r24	; 0x23
    4ed2:	9c a3       	std	Y+36, r25	; 0x24
    4ed4:	ad a3       	std	Y+37, r26	; 0x25
    4ed6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4ed8:	6b a1       	ldd	r22, Y+35	; 0x23
    4eda:	7c a1       	ldd	r23, Y+36	; 0x24
    4edc:	8d a1       	ldd	r24, Y+37	; 0x25
    4ede:	9e a1       	ldd	r25, Y+38	; 0x26
    4ee0:	20 e0       	ldi	r18, 0x00	; 0
    4ee2:	30 e0       	ldi	r19, 0x00	; 0
    4ee4:	40 e8       	ldi	r20, 0x80	; 128
    4ee6:	5f e3       	ldi	r21, 0x3F	; 63
    4ee8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4eec:	88 23       	and	r24, r24
    4eee:	2c f4       	brge	.+10     	; 0x4efa <GistLogin+0x2c8>
		__ticks = 1;
    4ef0:	81 e0       	ldi	r24, 0x01	; 1
    4ef2:	90 e0       	ldi	r25, 0x00	; 0
    4ef4:	9a a3       	std	Y+34, r25	; 0x22
    4ef6:	89 a3       	std	Y+33, r24	; 0x21
    4ef8:	3f c0       	rjmp	.+126    	; 0x4f78 <GistLogin+0x346>
	else if (__tmp > 65535)
    4efa:	6b a1       	ldd	r22, Y+35	; 0x23
    4efc:	7c a1       	ldd	r23, Y+36	; 0x24
    4efe:	8d a1       	ldd	r24, Y+37	; 0x25
    4f00:	9e a1       	ldd	r25, Y+38	; 0x26
    4f02:	20 e0       	ldi	r18, 0x00	; 0
    4f04:	3f ef       	ldi	r19, 0xFF	; 255
    4f06:	4f e7       	ldi	r20, 0x7F	; 127
    4f08:	57 e4       	ldi	r21, 0x47	; 71
    4f0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f0e:	18 16       	cp	r1, r24
    4f10:	4c f5       	brge	.+82     	; 0x4f64 <GistLogin+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f12:	6f a1       	ldd	r22, Y+39	; 0x27
    4f14:	78 a5       	ldd	r23, Y+40	; 0x28
    4f16:	89 a5       	ldd	r24, Y+41	; 0x29
    4f18:	9a a5       	ldd	r25, Y+42	; 0x2a
    4f1a:	20 e0       	ldi	r18, 0x00	; 0
    4f1c:	30 e0       	ldi	r19, 0x00	; 0
    4f1e:	40 e2       	ldi	r20, 0x20	; 32
    4f20:	51 e4       	ldi	r21, 0x41	; 65
    4f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f26:	dc 01       	movw	r26, r24
    4f28:	cb 01       	movw	r24, r22
    4f2a:	bc 01       	movw	r22, r24
    4f2c:	cd 01       	movw	r24, r26
    4f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f32:	dc 01       	movw	r26, r24
    4f34:	cb 01       	movw	r24, r22
    4f36:	9a a3       	std	Y+34, r25	; 0x22
    4f38:	89 a3       	std	Y+33, r24	; 0x21
    4f3a:	0f c0       	rjmp	.+30     	; 0x4f5a <GistLogin+0x328>
    4f3c:	88 ec       	ldi	r24, 0xC8	; 200
    4f3e:	90 e0       	ldi	r25, 0x00	; 0
    4f40:	98 a3       	std	Y+32, r25	; 0x20
    4f42:	8f 8f       	std	Y+31, r24	; 0x1f
    4f44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4f46:	98 a1       	ldd	r25, Y+32	; 0x20
    4f48:	01 97       	sbiw	r24, 0x01	; 1
    4f4a:	f1 f7       	brne	.-4      	; 0x4f48 <GistLogin+0x316>
    4f4c:	98 a3       	std	Y+32, r25	; 0x20
    4f4e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f50:	89 a1       	ldd	r24, Y+33	; 0x21
    4f52:	9a a1       	ldd	r25, Y+34	; 0x22
    4f54:	01 97       	sbiw	r24, 0x01	; 1
    4f56:	9a a3       	std	Y+34, r25	; 0x22
    4f58:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f5a:	89 a1       	ldd	r24, Y+33	; 0x21
    4f5c:	9a a1       	ldd	r25, Y+34	; 0x22
    4f5e:	00 97       	sbiw	r24, 0x00	; 0
    4f60:	69 f7       	brne	.-38     	; 0x4f3c <GistLogin+0x30a>
    4f62:	14 c0       	rjmp	.+40     	; 0x4f8c <GistLogin+0x35a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f64:	6b a1       	ldd	r22, Y+35	; 0x23
    4f66:	7c a1       	ldd	r23, Y+36	; 0x24
    4f68:	8d a1       	ldd	r24, Y+37	; 0x25
    4f6a:	9e a1       	ldd	r25, Y+38	; 0x26
    4f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f70:	dc 01       	movw	r26, r24
    4f72:	cb 01       	movw	r24, r22
    4f74:	9a a3       	std	Y+34, r25	; 0x22
    4f76:	89 a3       	std	Y+33, r24	; 0x21
    4f78:	89 a1       	ldd	r24, Y+33	; 0x21
    4f7a:	9a a1       	ldd	r25, Y+34	; 0x22
    4f7c:	9e 8f       	std	Y+30, r25	; 0x1e
    4f7e:	8d 8f       	std	Y+29, r24	; 0x1d
    4f80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f84:	01 97       	sbiw	r24, 0x01	; 1
    4f86:	f1 f7       	brne	.-4      	; 0x4f84 <GistLogin+0x352>
    4f88:	9e 8f       	std	Y+30, r25	; 0x1e
    4f8a:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(100);
			pass_counter++;//increase the password counter that count the characters of the pass
    4f8c:	80 91 aa 02 	lds	r24, 0x02AA
    4f90:	8f 5f       	subi	r24, 0xFF	; 255
    4f92:	80 93 aa 02 	sts	0x02AA, r24
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
    4f96:	8f ef       	ldi	r24, 0xFF	; 255
    4f98:	80 93 8c 02 	sts	0x028C, r24
		LCD_vSend_string("Guest mode");
		LCD_movecursor(2,1);
		LCD_vSend_string("Enter pass:");
		_delay_ms(200);
		pass_counter=0;
		while(pass_counter<PASS_SIZE)
    4f9c:	80 91 aa 02 	lds	r24, 0x02AA
    4fa0:	84 30       	cpi	r24, 0x04	; 4
    4fa2:	08 f4       	brcc	.+2      	; 0x4fa6 <GistLogin+0x374>
    4fa4:	f1 ce       	rjmp	.-542    	; 0x4d88 <GistLogin+0x156>
			pass_counter++;//increase the password counter that count the characters of the pass
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
		}

		/*compare passwords*/
		if (ui8ComparePass(pass,Gestpass,PASS_SIZE)==TRUE)//in case of right password
    4fa6:	8f ea       	ldi	r24, 0xAF	; 175
    4fa8:	92 e0       	ldi	r25, 0x02	; 2
    4faa:	2d e8       	ldi	r18, 0x8D	; 141
    4fac:	32 e0       	ldi	r19, 0x02	; 2
    4fae:	b9 01       	movw	r22, r18
    4fb0:	44 e0       	ldi	r20, 0x04	; 4
    4fb2:	0e 94 17 29 	call	0x522e	; 0x522e <ui8ComparePass>
    4fb6:	81 30       	cpi	r24, 0x01	; 1
    4fb8:	09 f0       	breq	.+2      	; 0x4fbc <GistLogin+0x38a>
    4fba:	8e c0       	rjmp	.+284    	; 0x50d8 <GistLogin+0x4a6>
		{
			login_mode = GUEST;
    4fbc:	82 e0       	ldi	r24, 0x02	; 2
    4fbe:	80 93 a7 02 	sts	0x02A7, r24
			pass_tries_count=0;//clear the counter of wrong tries
    4fc2:	10 92 a9 02 	sts	0x02A9, r1
			LCD_clearscreen();
    4fc6:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
			LCD_vSend_string("Right pass");
    4fca:	83 ee       	ldi	r24, 0xE3	; 227
    4fcc:	91 e0       	ldi	r25, 0x01	; 1
    4fce:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
			LCD_movecursor(2,1);
    4fd2:	82 e0       	ldi	r24, 0x02	; 2
    4fd4:	61 e0       	ldi	r22, 0x01	; 1
    4fd6:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_movecursor>
			LCD_vSend_string("Guest mode");
    4fda:	85 e0       	ldi	r24, 0x05	; 5
    4fdc:	92 e0       	ldi	r25, 0x02	; 2
    4fde:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    4fe2:	80 e0       	ldi	r24, 0x00	; 0
    4fe4:	90 e0       	ldi	r25, 0x00	; 0
    4fe6:	aa ef       	ldi	r26, 0xFA	; 250
    4fe8:	b3 e4       	ldi	r27, 0x43	; 67
    4fea:	89 8f       	std	Y+25, r24	; 0x19
    4fec:	9a 8f       	std	Y+26, r25	; 0x1a
    4fee:	ab 8f       	std	Y+27, r26	; 0x1b
    4ff0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ff2:	69 8d       	ldd	r22, Y+25	; 0x19
    4ff4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ff6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ff8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ffa:	20 e0       	ldi	r18, 0x00	; 0
    4ffc:	30 e0       	ldi	r19, 0x00	; 0
    4ffe:	4a ef       	ldi	r20, 0xFA	; 250
    5000:	54 e4       	ldi	r21, 0x44	; 68
    5002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5006:	dc 01       	movw	r26, r24
    5008:	cb 01       	movw	r24, r22
    500a:	8d 8b       	std	Y+21, r24	; 0x15
    500c:	9e 8b       	std	Y+22, r25	; 0x16
    500e:	af 8b       	std	Y+23, r26	; 0x17
    5010:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5012:	6d 89       	ldd	r22, Y+21	; 0x15
    5014:	7e 89       	ldd	r23, Y+22	; 0x16
    5016:	8f 89       	ldd	r24, Y+23	; 0x17
    5018:	98 8d       	ldd	r25, Y+24	; 0x18
    501a:	20 e0       	ldi	r18, 0x00	; 0
    501c:	30 e0       	ldi	r19, 0x00	; 0
    501e:	40 e8       	ldi	r20, 0x80	; 128
    5020:	5f e3       	ldi	r21, 0x3F	; 63
    5022:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5026:	88 23       	and	r24, r24
    5028:	2c f4       	brge	.+10     	; 0x5034 <GistLogin+0x402>
		__ticks = 1;
    502a:	81 e0       	ldi	r24, 0x01	; 1
    502c:	90 e0       	ldi	r25, 0x00	; 0
    502e:	9c 8b       	std	Y+20, r25	; 0x14
    5030:	8b 8b       	std	Y+19, r24	; 0x13
    5032:	3f c0       	rjmp	.+126    	; 0x50b2 <GistLogin+0x480>
	else if (__tmp > 65535)
    5034:	6d 89       	ldd	r22, Y+21	; 0x15
    5036:	7e 89       	ldd	r23, Y+22	; 0x16
    5038:	8f 89       	ldd	r24, Y+23	; 0x17
    503a:	98 8d       	ldd	r25, Y+24	; 0x18
    503c:	20 e0       	ldi	r18, 0x00	; 0
    503e:	3f ef       	ldi	r19, 0xFF	; 255
    5040:	4f e7       	ldi	r20, 0x7F	; 127
    5042:	57 e4       	ldi	r21, 0x47	; 71
    5044:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5048:	18 16       	cp	r1, r24
    504a:	4c f5       	brge	.+82     	; 0x509e <GistLogin+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    504c:	69 8d       	ldd	r22, Y+25	; 0x19
    504e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5050:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5052:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5054:	20 e0       	ldi	r18, 0x00	; 0
    5056:	30 e0       	ldi	r19, 0x00	; 0
    5058:	40 e2       	ldi	r20, 0x20	; 32
    505a:	51 e4       	ldi	r21, 0x41	; 65
    505c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5060:	dc 01       	movw	r26, r24
    5062:	cb 01       	movw	r24, r22
    5064:	bc 01       	movw	r22, r24
    5066:	cd 01       	movw	r24, r26
    5068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    506c:	dc 01       	movw	r26, r24
    506e:	cb 01       	movw	r24, r22
    5070:	9c 8b       	std	Y+20, r25	; 0x14
    5072:	8b 8b       	std	Y+19, r24	; 0x13
    5074:	0f c0       	rjmp	.+30     	; 0x5094 <GistLogin+0x462>
    5076:	88 ec       	ldi	r24, 0xC8	; 200
    5078:	90 e0       	ldi	r25, 0x00	; 0
    507a:	9a 8b       	std	Y+18, r25	; 0x12
    507c:	89 8b       	std	Y+17, r24	; 0x11
    507e:	89 89       	ldd	r24, Y+17	; 0x11
    5080:	9a 89       	ldd	r25, Y+18	; 0x12
    5082:	01 97       	sbiw	r24, 0x01	; 1
    5084:	f1 f7       	brne	.-4      	; 0x5082 <GistLogin+0x450>
    5086:	9a 8b       	std	Y+18, r25	; 0x12
    5088:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    508a:	8b 89       	ldd	r24, Y+19	; 0x13
    508c:	9c 89       	ldd	r25, Y+20	; 0x14
    508e:	01 97       	sbiw	r24, 0x01	; 1
    5090:	9c 8b       	std	Y+20, r25	; 0x14
    5092:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5094:	8b 89       	ldd	r24, Y+19	; 0x13
    5096:	9c 89       	ldd	r25, Y+20	; 0x14
    5098:	00 97       	sbiw	r24, 0x00	; 0
    509a:	69 f7       	brne	.-38     	; 0x5076 <GistLogin+0x444>
    509c:	14 c0       	rjmp	.+40     	; 0x50c6 <GistLogin+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    509e:	6d 89       	ldd	r22, Y+21	; 0x15
    50a0:	7e 89       	ldd	r23, Y+22	; 0x16
    50a2:	8f 89       	ldd	r24, Y+23	; 0x17
    50a4:	98 8d       	ldd	r25, Y+24	; 0x18
    50a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50aa:	dc 01       	movw	r26, r24
    50ac:	cb 01       	movw	r24, r22
    50ae:	9c 8b       	std	Y+20, r25	; 0x14
    50b0:	8b 8b       	std	Y+19, r24	; 0x13
    50b2:	8b 89       	ldd	r24, Y+19	; 0x13
    50b4:	9c 89       	ldd	r25, Y+20	; 0x14
    50b6:	98 8b       	std	Y+16, r25	; 0x10
    50b8:	8f 87       	std	Y+15, r24	; 0x0f
    50ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    50bc:	98 89       	ldd	r25, Y+16	; 0x10
    50be:	01 97       	sbiw	r24, 0x01	; 1
    50c0:	f1 f7       	brne	.-4      	; 0x50be <GistLogin+0x48c>
    50c2:	98 8b       	std	Y+16, r25	; 0x10
    50c4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			LED_vTurnOn(GUEST_LED_PORT,GUEST_LED_PIN);//turn the led of gust mode that is connected to the master micro controller on
    50c6:	83 e4       	ldi	r24, 0x43	; 67
    50c8:	61 e0       	ldi	r22, 0x01	; 1
    50ca:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <LED_vTurnOn>
			timer0_initializeCTC();//start the counter of the session
    50ce:	0e 94 a5 2b 	call	0x574a	; 0x574a <timer0_initializeCTC>
			LCD_clearscreen();
    50d2:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
    50d6:	9a c0       	rjmp	.+308    	; 0x520c <GistLogin+0x5da>
		}
		else//in case of wrong password
		{
			pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
    50d8:	80 91 a9 02 	lds	r24, 0x02A9
    50dc:	8f 5f       	subi	r24, 0xFF	; 255
    50de:	80 93 a9 02 	sts	0x02A9, r24
			login_mode = NO_MODE;//set the mode as not logged in
    50e2:	10 92 a7 02 	sts	0x02A7, r1
			LCD_clearscreen();
    50e6:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
			LCD_vSend_string("Wrong pass");
    50ea:	8c e1       	ldi	r24, 0x1C	; 28
    50ec:	92 e0       	ldi	r25, 0x02	; 2
    50ee:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
			LCD_movecursor(2,1);
    50f2:	82 e0       	ldi	r24, 0x02	; 2
    50f4:	61 e0       	ldi	r22, 0x01	; 1
    50f6:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_movecursor>
			LCD_vSend_string("Tries left:");
    50fa:	89 ef       	ldi	r24, 0xF9	; 249
    50fc:	91 e0       	ldi	r25, 0x01	; 1
    50fe:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
			LCD_vSend_char(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
    5102:	90 91 a9 02 	lds	r25, 0x02A9
    5106:	83 e3       	ldi	r24, 0x33	; 51
    5108:	89 1b       	sub	r24, r25
    510a:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_vSend_char>
    510e:	80 e0       	ldi	r24, 0x00	; 0
    5110:	90 e0       	ldi	r25, 0x00	; 0
    5112:	aa e7       	ldi	r26, 0x7A	; 122
    5114:	b4 e4       	ldi	r27, 0x44	; 68
    5116:	8b 87       	std	Y+11, r24	; 0x0b
    5118:	9c 87       	std	Y+12, r25	; 0x0c
    511a:	ad 87       	std	Y+13, r26	; 0x0d
    511c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    511e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5120:	7c 85       	ldd	r23, Y+12	; 0x0c
    5122:	8d 85       	ldd	r24, Y+13	; 0x0d
    5124:	9e 85       	ldd	r25, Y+14	; 0x0e
    5126:	20 e0       	ldi	r18, 0x00	; 0
    5128:	30 e0       	ldi	r19, 0x00	; 0
    512a:	4a ef       	ldi	r20, 0xFA	; 250
    512c:	54 e4       	ldi	r21, 0x44	; 68
    512e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5132:	dc 01       	movw	r26, r24
    5134:	cb 01       	movw	r24, r22
    5136:	8f 83       	std	Y+7, r24	; 0x07
    5138:	98 87       	std	Y+8, r25	; 0x08
    513a:	a9 87       	std	Y+9, r26	; 0x09
    513c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    513e:	6f 81       	ldd	r22, Y+7	; 0x07
    5140:	78 85       	ldd	r23, Y+8	; 0x08
    5142:	89 85       	ldd	r24, Y+9	; 0x09
    5144:	9a 85       	ldd	r25, Y+10	; 0x0a
    5146:	20 e0       	ldi	r18, 0x00	; 0
    5148:	30 e0       	ldi	r19, 0x00	; 0
    514a:	40 e8       	ldi	r20, 0x80	; 128
    514c:	5f e3       	ldi	r21, 0x3F	; 63
    514e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5152:	88 23       	and	r24, r24
    5154:	2c f4       	brge	.+10     	; 0x5160 <GistLogin+0x52e>
		__ticks = 1;
    5156:	81 e0       	ldi	r24, 0x01	; 1
    5158:	90 e0       	ldi	r25, 0x00	; 0
    515a:	9e 83       	std	Y+6, r25	; 0x06
    515c:	8d 83       	std	Y+5, r24	; 0x05
    515e:	3f c0       	rjmp	.+126    	; 0x51de <GistLogin+0x5ac>
	else if (__tmp > 65535)
    5160:	6f 81       	ldd	r22, Y+7	; 0x07
    5162:	78 85       	ldd	r23, Y+8	; 0x08
    5164:	89 85       	ldd	r24, Y+9	; 0x09
    5166:	9a 85       	ldd	r25, Y+10	; 0x0a
    5168:	20 e0       	ldi	r18, 0x00	; 0
    516a:	3f ef       	ldi	r19, 0xFF	; 255
    516c:	4f e7       	ldi	r20, 0x7F	; 127
    516e:	57 e4       	ldi	r21, 0x47	; 71
    5170:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5174:	18 16       	cp	r1, r24
    5176:	4c f5       	brge	.+82     	; 0x51ca <GistLogin+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5178:	6b 85       	ldd	r22, Y+11	; 0x0b
    517a:	7c 85       	ldd	r23, Y+12	; 0x0c
    517c:	8d 85       	ldd	r24, Y+13	; 0x0d
    517e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5180:	20 e0       	ldi	r18, 0x00	; 0
    5182:	30 e0       	ldi	r19, 0x00	; 0
    5184:	40 e2       	ldi	r20, 0x20	; 32
    5186:	51 e4       	ldi	r21, 0x41	; 65
    5188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    518c:	dc 01       	movw	r26, r24
    518e:	cb 01       	movw	r24, r22
    5190:	bc 01       	movw	r22, r24
    5192:	cd 01       	movw	r24, r26
    5194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5198:	dc 01       	movw	r26, r24
    519a:	cb 01       	movw	r24, r22
    519c:	9e 83       	std	Y+6, r25	; 0x06
    519e:	8d 83       	std	Y+5, r24	; 0x05
    51a0:	0f c0       	rjmp	.+30     	; 0x51c0 <GistLogin+0x58e>
    51a2:	88 ec       	ldi	r24, 0xC8	; 200
    51a4:	90 e0       	ldi	r25, 0x00	; 0
    51a6:	9c 83       	std	Y+4, r25	; 0x04
    51a8:	8b 83       	std	Y+3, r24	; 0x03
    51aa:	8b 81       	ldd	r24, Y+3	; 0x03
    51ac:	9c 81       	ldd	r25, Y+4	; 0x04
    51ae:	01 97       	sbiw	r24, 0x01	; 1
    51b0:	f1 f7       	brne	.-4      	; 0x51ae <GistLogin+0x57c>
    51b2:	9c 83       	std	Y+4, r25	; 0x04
    51b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51b6:	8d 81       	ldd	r24, Y+5	; 0x05
    51b8:	9e 81       	ldd	r25, Y+6	; 0x06
    51ba:	01 97       	sbiw	r24, 0x01	; 1
    51bc:	9e 83       	std	Y+6, r25	; 0x06
    51be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51c0:	8d 81       	ldd	r24, Y+5	; 0x05
    51c2:	9e 81       	ldd	r25, Y+6	; 0x06
    51c4:	00 97       	sbiw	r24, 0x00	; 0
    51c6:	69 f7       	brne	.-38     	; 0x51a2 <GistLogin+0x570>
    51c8:	14 c0       	rjmp	.+40     	; 0x51f2 <GistLogin+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51ca:	6f 81       	ldd	r22, Y+7	; 0x07
    51cc:	78 85       	ldd	r23, Y+8	; 0x08
    51ce:	89 85       	ldd	r24, Y+9	; 0x09
    51d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    51d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51d6:	dc 01       	movw	r26, r24
    51d8:	cb 01       	movw	r24, r22
    51da:	9e 83       	std	Y+6, r25	; 0x06
    51dc:	8d 83       	std	Y+5, r24	; 0x05
    51de:	8d 81       	ldd	r24, Y+5	; 0x05
    51e0:	9e 81       	ldd	r25, Y+6	; 0x06
    51e2:	9a 83       	std	Y+2, r25	; 0x02
    51e4:	89 83       	std	Y+1, r24	; 0x01
    51e6:	89 81       	ldd	r24, Y+1	; 0x01
    51e8:	9a 81       	ldd	r25, Y+2	; 0x02
    51ea:	01 97       	sbiw	r24, 0x01	; 1
    51ec:	f1 f7       	brne	.-4      	; 0x51ea <GistLogin+0x5b8>
    51ee:	9a 83       	std	Y+2, r25	; 0x02
    51f0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			LCD_clearscreen();
    51f2:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
			if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
    51f6:	80 91 a9 02 	lds	r24, 0x02A9
    51fa:	83 30       	cpi	r24, 0x03	; 3
    51fc:	38 f0       	brcs	.+14     	; 0x520c <GistLogin+0x5da>
			{
				LOGIN_BLOCKED=TRUE;//write  TRUE to the the block mode
    51fe:	81 e0       	ldi	r24, 0x01	; 1
    5200:	80 93 a5 02 	sts	0x02A5, r24
				block_mode_flag = TRUE;//turn on block mode
    5204:	81 e0       	ldi	r24, 0x01	; 1
    5206:	80 93 a8 02 	sts	0x02A8, r24
    520a:	05 c0       	rjmp	.+10     	; 0x5216 <GistLogin+0x5e4>
		}
	}
}
void GistLogin(void)
{
	while(login_mode != GUEST)
    520c:	80 91 a7 02 	lds	r24, 0x02A7
    5210:	82 30       	cpi	r24, 0x02	; 2
    5212:	09 f0       	breq	.+2      	; 0x5216 <GistLogin+0x5e4>
    5214:	1c cd       	rjmp	.-1480   	; 0x4c4e <GistLogin+0x1c>
				break;//breaks the loop of insert guest password #while(login_mode != GUEST)
			}//The End of if that check if the number of tries exceeds the maximum tries allowed
		}//The End of the case of wrong password
	}//The End of loop of guest login

}
    5216:	ca 5b       	subi	r28, 0xBA	; 186
    5218:	df 4f       	sbci	r29, 0xFF	; 255
    521a:	0f b6       	in	r0, 0x3f	; 63
    521c:	f8 94       	cli
    521e:	de bf       	out	0x3e, r29	; 62
    5220:	0f be       	out	0x3f, r0	; 63
    5222:	cd bf       	out	0x3d, r28	; 61
    5224:	cf 91       	pop	r28
    5226:	df 91       	pop	r29
    5228:	1f 91       	pop	r17
    522a:	0f 91       	pop	r16
    522c:	08 95       	ret

0000522e <ui8ComparePass>:

extern volatile uint16 session_counter;
extern uint8 timeout_flag;

uint8 ui8ComparePass(const uint8* pass1,const uint8* pass2,const uint8 size)
{
    522e:	df 93       	push	r29
    5230:	cf 93       	push	r28
    5232:	cd b7       	in	r28, 0x3d	; 61
    5234:	de b7       	in	r29, 0x3e	; 62
    5236:	27 97       	sbiw	r28, 0x07	; 7
    5238:	0f b6       	in	r0, 0x3f	; 63
    523a:	f8 94       	cli
    523c:	de bf       	out	0x3e, r29	; 62
    523e:	0f be       	out	0x3f, r0	; 63
    5240:	cd bf       	out	0x3d, r28	; 61
    5242:	9c 83       	std	Y+4, r25	; 0x04
    5244:	8b 83       	std	Y+3, r24	; 0x03
    5246:	7e 83       	std	Y+6, r23	; 0x06
    5248:	6d 83       	std	Y+5, r22	; 0x05
    524a:	4f 83       	std	Y+7, r20	; 0x07
	uint8 pin_counter=0;
    524c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 ret_value = TRUE;
    524e:	81 e0       	ldi	r24, 0x01	; 1
    5250:	89 83       	std	Y+1, r24	; 0x01
    5252:	19 c0       	rjmp	.+50     	; 0x5286 <ui8ComparePass+0x58>
	while (pin_counter<size)
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))
    5254:	8a 81       	ldd	r24, Y+2	; 0x02
    5256:	28 2f       	mov	r18, r24
    5258:	30 e0       	ldi	r19, 0x00	; 0
    525a:	8b 81       	ldd	r24, Y+3	; 0x03
    525c:	9c 81       	ldd	r25, Y+4	; 0x04
    525e:	fc 01       	movw	r30, r24
    5260:	e2 0f       	add	r30, r18
    5262:	f3 1f       	adc	r31, r19
    5264:	40 81       	ld	r20, Z
    5266:	8a 81       	ldd	r24, Y+2	; 0x02
    5268:	28 2f       	mov	r18, r24
    526a:	30 e0       	ldi	r19, 0x00	; 0
    526c:	8d 81       	ldd	r24, Y+5	; 0x05
    526e:	9e 81       	ldd	r25, Y+6	; 0x06
    5270:	fc 01       	movw	r30, r24
    5272:	e2 0f       	add	r30, r18
    5274:	f3 1f       	adc	r31, r19
    5276:	80 81       	ld	r24, Z
    5278:	48 17       	cp	r20, r24
    527a:	11 f0       	breq	.+4      	; 0x5280 <ui8ComparePass+0x52>
		{
			ret_value= FALSE;
    527c:	19 82       	std	Y+1, r1	; 0x01
    527e:	07 c0       	rjmp	.+14     	; 0x528e <ui8ComparePass+0x60>
			break;
		}
		pin_counter++;
    5280:	8a 81       	ldd	r24, Y+2	; 0x02
    5282:	8f 5f       	subi	r24, 0xFF	; 255
    5284:	8a 83       	std	Y+2, r24	; 0x02

uint8 ui8ComparePass(const uint8* pass1,const uint8* pass2,const uint8 size)
{
	uint8 pin_counter=0;
	uint8 ret_value = TRUE;
	while (pin_counter<size)
    5286:	9a 81       	ldd	r25, Y+2	; 0x02
    5288:	8f 81       	ldd	r24, Y+7	; 0x07
    528a:	98 17       	cp	r25, r24
    528c:	18 f3       	brcs	.-58     	; 0x5254 <ui8ComparePass+0x26>
			ret_value= FALSE;
			break;
		}
		pin_counter++;
	}
	return ret_value;
    528e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5290:	27 96       	adiw	r28, 0x07	; 7
    5292:	0f b6       	in	r0, 0x3f	; 63
    5294:	f8 94       	cli
    5296:	de bf       	out	0x3e, r29	; 62
    5298:	0f be       	out	0x3f, r0	; 63
    529a:	cd bf       	out	0x3d, r28	; 61
    529c:	cf 91       	pop	r28
    529e:	df 91       	pop	r29
    52a0:	08 95       	ret

000052a2 <vMenuOption>:

void vMenuOption(const uint8 u8SelectedRoom,const uint8 u8LoginMode)
{
    52a2:	df 93       	push	r29
    52a4:	cf 93       	push	r28
    52a6:	cd b7       	in	r28, 0x3d	; 61
    52a8:	de b7       	in	r29, 0x3e	; 62
    52aa:	e3 97       	sbiw	r28, 0x33	; 51
    52ac:	0f b6       	in	r0, 0x3f	; 63
    52ae:	f8 94       	cli
    52b0:	de bf       	out	0x3e, r29	; 62
    52b2:	0f be       	out	0x3f, r0	; 63
    52b4:	cd bf       	out	0x3d, r28	; 61
    52b6:	88 ab       	std	Y+48, r24	; 0x30
    52b8:	69 ab       	std	Y+49, r22	; 0x31
	uint8 u8StatusCode  = 0;
    52ba:	1f a6       	std	Y+47, r1	; 0x2f
	uint8 u8TurnOnCode  = 0;
    52bc:	1e a6       	std	Y+46, r1	; 0x2e
	uint8 u8TurnOffCode = 0;
    52be:	1d a6       	std	Y+45, r1	; 0x2d
	uint8 response      = DEFAULT_ACK;
    52c0:	8f ef       	ldi	r24, 0xFF	; 255
    52c2:	8c a7       	std	Y+44, r24	; 0x2c
	uint8 key_pressed   = NOT_PRESSED;
    52c4:	8f ef       	ldi	r24, 0xFF	; 255
    52c6:	8b a7       	std	Y+43, r24	; 0x2b
	
	do
	{
		LCD_clearscreen();
    52c8:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
		switch(u8SelectedRoom)
    52cc:	88 a9       	ldd	r24, Y+48	; 0x30
    52ce:	28 2f       	mov	r18, r24
    52d0:	30 e0       	ldi	r19, 0x00	; 0
    52d2:	3b ab       	std	Y+51, r19	; 0x33
    52d4:	2a ab       	std	Y+50, r18	; 0x32
    52d6:	8a a9       	ldd	r24, Y+50	; 0x32
    52d8:	9b a9       	ldd	r25, Y+51	; 0x33
    52da:	85 30       	cpi	r24, 0x05	; 5
    52dc:	91 05       	cpc	r25, r1
    52de:	b1 f1       	breq	.+108    	; 0x534c <vMenuOption+0xaa>
    52e0:	2a a9       	ldd	r18, Y+50	; 0x32
    52e2:	3b a9       	ldd	r19, Y+51	; 0x33
    52e4:	26 30       	cpi	r18, 0x06	; 6
    52e6:	31 05       	cpc	r19, r1
    52e8:	5c f4       	brge	.+22     	; 0x5300 <vMenuOption+0x5e>
    52ea:	8a a9       	ldd	r24, Y+50	; 0x32
    52ec:	9b a9       	ldd	r25, Y+51	; 0x33
    52ee:	83 30       	cpi	r24, 0x03	; 3
    52f0:	91 05       	cpc	r25, r1
    52f2:	b1 f0       	breq	.+44     	; 0x5320 <vMenuOption+0x7e>
    52f4:	2a a9       	ldd	r18, Y+50	; 0x32
    52f6:	3b a9       	ldd	r19, Y+51	; 0x33
    52f8:	24 30       	cpi	r18, 0x04	; 4
    52fa:	31 05       	cpc	r19, r1
    52fc:	e1 f0       	breq	.+56     	; 0x5336 <vMenuOption+0x94>
    52fe:	51 c0       	rjmp	.+162    	; 0x53a2 <vMenuOption+0x100>
    5300:	8a a9       	ldd	r24, Y+50	; 0x32
    5302:	9b a9       	ldd	r25, Y+51	; 0x33
    5304:	87 30       	cpi	r24, 0x07	; 7
    5306:	91 05       	cpc	r25, r1
    5308:	b9 f1       	breq	.+110    	; 0x5378 <vMenuOption+0xd6>
    530a:	2a a9       	ldd	r18, Y+50	; 0x32
    530c:	3b a9       	ldd	r19, Y+51	; 0x33
    530e:	27 30       	cpi	r18, 0x07	; 7
    5310:	31 05       	cpc	r19, r1
    5312:	3c f1       	brlt	.+78     	; 0x5362 <vMenuOption+0xc0>
    5314:	8a a9       	ldd	r24, Y+50	; 0x32
    5316:	9b a9       	ldd	r25, Y+51	; 0x33
    5318:	89 30       	cpi	r24, 0x09	; 9
    531a:	91 05       	cpc	r25, r1
    531c:	c1 f1       	breq	.+112    	; 0x538e <vMenuOption+0xec>
    531e:	41 c0       	rjmp	.+130    	; 0x53a2 <vMenuOption+0x100>
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
    5320:	81 e1       	ldi	r24, 0x11	; 17
    5322:	8f a7       	std	Y+47, r24	; 0x2f
			u8TurnOnCode = ROOM1_TURN_ON;
    5324:	81 e2       	ldi	r24, 0x21	; 33
    5326:	8e a7       	std	Y+46, r24	; 0x2e
			u8TurnOffCode = ROOM1_TURN_OFF;
    5328:	81 e3       	ldi	r24, 0x31	; 49
    532a:	8d a7       	std	Y+45, r24	; 0x2d
			LCD_vSend_string("Room1 S:");
    532c:	87 e2       	ldi	r24, 0x27	; 39
    532e:	92 e0       	ldi	r25, 0x02	; 2
    5330:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    5334:	36 c0       	rjmp	.+108    	; 0x53a2 <vMenuOption+0x100>
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
    5336:	82 e1       	ldi	r24, 0x12	; 18
    5338:	8f a7       	std	Y+47, r24	; 0x2f
			u8TurnOnCode = ROOM2_TURN_ON;
    533a:	82 e2       	ldi	r24, 0x22	; 34
    533c:	8e a7       	std	Y+46, r24	; 0x2e
			u8TurnOffCode = ROOM2_TURN_OFF;
    533e:	82 e3       	ldi	r24, 0x32	; 50
    5340:	8d a7       	std	Y+45, r24	; 0x2d
			LCD_vSend_string("Room2 S:");
    5342:	80 e3       	ldi	r24, 0x30	; 48
    5344:	92 e0       	ldi	r25, 0x02	; 2
    5346:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    534a:	2b c0       	rjmp	.+86     	; 0x53a2 <vMenuOption+0x100>
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
    534c:	83 e1       	ldi	r24, 0x13	; 19
    534e:	8f a7       	std	Y+47, r24	; 0x2f
			u8TurnOnCode = ROOM3_TURN_ON;
    5350:	83 e2       	ldi	r24, 0x23	; 35
    5352:	8e a7       	std	Y+46, r24	; 0x2e
			u8TurnOffCode = ROOM3_TURN_OFF;
    5354:	83 e3       	ldi	r24, 0x33	; 51
    5356:	8d a7       	std	Y+45, r24	; 0x2d
			LCD_vSend_string("Room3 S:");
    5358:	89 e3       	ldi	r24, 0x39	; 57
    535a:	92 e0       	ldi	r25, 0x02	; 2
    535c:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    5360:	20 c0       	rjmp	.+64     	; 0x53a2 <vMenuOption+0x100>
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
    5362:	84 e1       	ldi	r24, 0x14	; 20
    5364:	8f a7       	std	Y+47, r24	; 0x2f
			u8TurnOnCode = ROOM4_TURN_ON;
    5366:	84 e2       	ldi	r24, 0x24	; 36
    5368:	8e a7       	std	Y+46, r24	; 0x2e
			u8TurnOffCode = ROOM4_TURN_OFF;
    536a:	84 e3       	ldi	r24, 0x34	; 52
    536c:	8d a7       	std	Y+45, r24	; 0x2d
			LCD_vSend_string("Room4 S:");
    536e:	82 e4       	ldi	r24, 0x42	; 66
    5370:	92 e0       	ldi	r25, 0x02	; 2
    5372:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    5376:	15 c0       	rjmp	.+42     	; 0x53a2 <vMenuOption+0x100>
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
    5378:	85 e1       	ldi	r24, 0x15	; 21
    537a:	8f a7       	std	Y+47, r24	; 0x2f
			u8TurnOnCode = TV_TURN_ON;
    537c:	85 e2       	ldi	r24, 0x25	; 37
    537e:	8e a7       	std	Y+46, r24	; 0x2e
			u8TurnOffCode = TV_TURN_OFF;
    5380:	85 e3       	ldi	r24, 0x35	; 53
    5382:	8d a7       	std	Y+45, r24	; 0x2d
			LCD_vSend_string("TV S:");
    5384:	8b e4       	ldi	r24, 0x4B	; 75
    5386:	92 e0       	ldi	r25, 0x02	; 2
    5388:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    538c:	0a c0       	rjmp	.+20     	; 0x53a2 <vMenuOption+0x100>
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
    538e:	86 e1       	ldi	r24, 0x16	; 22
    5390:	8f a7       	std	Y+47, r24	; 0x2f
			u8TurnOnCode = AIR_COND_TURN_ON;
    5392:	86 e2       	ldi	r24, 0x26	; 38
    5394:	8e a7       	std	Y+46, r24	; 0x2e
			u8TurnOffCode = AIR_COND_TURN_OFF;
    5396:	86 e3       	ldi	r24, 0x36	; 54
    5398:	8d a7       	std	Y+45, r24	; 0x2d
			LCD_vSend_string("Air Cond. S:");
    539a:	81 e5       	ldi	r24, 0x51	; 81
    539c:	92 e0       	ldi	r25, 0x02	; 2
    539e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
			break;
		}
		/****************************************************************************************************/
		
		SPI_ui8TransmitRecive(u8StatusCode);
    53a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    53a4:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <SPI_ui8TransmitRecive>
    53a8:	80 e0       	ldi	r24, 0x00	; 0
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	a8 ec       	ldi	r26, 0xC8	; 200
    53ae:	b2 e4       	ldi	r27, 0x42	; 66
    53b0:	8f a3       	std	Y+39, r24	; 0x27
    53b2:	98 a7       	std	Y+40, r25	; 0x28
    53b4:	a9 a7       	std	Y+41, r26	; 0x29
    53b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53b8:	6f a1       	ldd	r22, Y+39	; 0x27
    53ba:	78 a5       	ldd	r23, Y+40	; 0x28
    53bc:	89 a5       	ldd	r24, Y+41	; 0x29
    53be:	9a a5       	ldd	r25, Y+42	; 0x2a
    53c0:	20 e0       	ldi	r18, 0x00	; 0
    53c2:	30 e0       	ldi	r19, 0x00	; 0
    53c4:	4a ef       	ldi	r20, 0xFA	; 250
    53c6:	54 e4       	ldi	r21, 0x44	; 68
    53c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53cc:	dc 01       	movw	r26, r24
    53ce:	cb 01       	movw	r24, r22
    53d0:	8b a3       	std	Y+35, r24	; 0x23
    53d2:	9c a3       	std	Y+36, r25	; 0x24
    53d4:	ad a3       	std	Y+37, r26	; 0x25
    53d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    53d8:	6b a1       	ldd	r22, Y+35	; 0x23
    53da:	7c a1       	ldd	r23, Y+36	; 0x24
    53dc:	8d a1       	ldd	r24, Y+37	; 0x25
    53de:	9e a1       	ldd	r25, Y+38	; 0x26
    53e0:	20 e0       	ldi	r18, 0x00	; 0
    53e2:	30 e0       	ldi	r19, 0x00	; 0
    53e4:	40 e8       	ldi	r20, 0x80	; 128
    53e6:	5f e3       	ldi	r21, 0x3F	; 63
    53e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53ec:	88 23       	and	r24, r24
    53ee:	2c f4       	brge	.+10     	; 0x53fa <vMenuOption+0x158>
		__ticks = 1;
    53f0:	81 e0       	ldi	r24, 0x01	; 1
    53f2:	90 e0       	ldi	r25, 0x00	; 0
    53f4:	9a a3       	std	Y+34, r25	; 0x22
    53f6:	89 a3       	std	Y+33, r24	; 0x21
    53f8:	3f c0       	rjmp	.+126    	; 0x5478 <vMenuOption+0x1d6>
	else if (__tmp > 65535)
    53fa:	6b a1       	ldd	r22, Y+35	; 0x23
    53fc:	7c a1       	ldd	r23, Y+36	; 0x24
    53fe:	8d a1       	ldd	r24, Y+37	; 0x25
    5400:	9e a1       	ldd	r25, Y+38	; 0x26
    5402:	20 e0       	ldi	r18, 0x00	; 0
    5404:	3f ef       	ldi	r19, 0xFF	; 255
    5406:	4f e7       	ldi	r20, 0x7F	; 127
    5408:	57 e4       	ldi	r21, 0x47	; 71
    540a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    540e:	18 16       	cp	r1, r24
    5410:	4c f5       	brge	.+82     	; 0x5464 <vMenuOption+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5412:	6f a1       	ldd	r22, Y+39	; 0x27
    5414:	78 a5       	ldd	r23, Y+40	; 0x28
    5416:	89 a5       	ldd	r24, Y+41	; 0x29
    5418:	9a a5       	ldd	r25, Y+42	; 0x2a
    541a:	20 e0       	ldi	r18, 0x00	; 0
    541c:	30 e0       	ldi	r19, 0x00	; 0
    541e:	40 e2       	ldi	r20, 0x20	; 32
    5420:	51 e4       	ldi	r21, 0x41	; 65
    5422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5426:	dc 01       	movw	r26, r24
    5428:	cb 01       	movw	r24, r22
    542a:	bc 01       	movw	r22, r24
    542c:	cd 01       	movw	r24, r26
    542e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5432:	dc 01       	movw	r26, r24
    5434:	cb 01       	movw	r24, r22
    5436:	9a a3       	std	Y+34, r25	; 0x22
    5438:	89 a3       	std	Y+33, r24	; 0x21
    543a:	0f c0       	rjmp	.+30     	; 0x545a <vMenuOption+0x1b8>
    543c:	88 ec       	ldi	r24, 0xC8	; 200
    543e:	90 e0       	ldi	r25, 0x00	; 0
    5440:	98 a3       	std	Y+32, r25	; 0x20
    5442:	8f 8f       	std	Y+31, r24	; 0x1f
    5444:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5446:	98 a1       	ldd	r25, Y+32	; 0x20
    5448:	01 97       	sbiw	r24, 0x01	; 1
    544a:	f1 f7       	brne	.-4      	; 0x5448 <vMenuOption+0x1a6>
    544c:	98 a3       	std	Y+32, r25	; 0x20
    544e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5450:	89 a1       	ldd	r24, Y+33	; 0x21
    5452:	9a a1       	ldd	r25, Y+34	; 0x22
    5454:	01 97       	sbiw	r24, 0x01	; 1
    5456:	9a a3       	std	Y+34, r25	; 0x22
    5458:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    545a:	89 a1       	ldd	r24, Y+33	; 0x21
    545c:	9a a1       	ldd	r25, Y+34	; 0x22
    545e:	00 97       	sbiw	r24, 0x00	; 0
    5460:	69 f7       	brne	.-38     	; 0x543c <vMenuOption+0x19a>
    5462:	14 c0       	rjmp	.+40     	; 0x548c <vMenuOption+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5464:	6b a1       	ldd	r22, Y+35	; 0x23
    5466:	7c a1       	ldd	r23, Y+36	; 0x24
    5468:	8d a1       	ldd	r24, Y+37	; 0x25
    546a:	9e a1       	ldd	r25, Y+38	; 0x26
    546c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5470:	dc 01       	movw	r26, r24
    5472:	cb 01       	movw	r24, r22
    5474:	9a a3       	std	Y+34, r25	; 0x22
    5476:	89 a3       	std	Y+33, r24	; 0x21
    5478:	89 a1       	ldd	r24, Y+33	; 0x21
    547a:	9a a1       	ldd	r25, Y+34	; 0x22
    547c:	9e 8f       	std	Y+30, r25	; 0x1e
    547e:	8d 8f       	std	Y+29, r24	; 0x1d
    5480:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5482:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5484:	01 97       	sbiw	r24, 0x01	; 1
    5486:	f1 f7       	brne	.-4      	; 0x5484 <vMenuOption+0x1e2>
    5488:	9e 8f       	std	Y+30, r25	; 0x1e
    548a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		response = SPI_ui8TransmitRecive(DEMAND_RESPONSE);
    548c:	8f ef       	ldi	r24, 0xFF	; 255
    548e:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <SPI_ui8TransmitRecive>
    5492:	8c a7       	std	Y+44, r24	; 0x2c
		if(response == ON_STATUS)
    5494:	8c a5       	ldd	r24, Y+44	; 0x2c
    5496:	81 30       	cpi	r24, 0x01	; 1
    5498:	29 f4       	brne	.+10     	; 0x54a4 <vMenuOption+0x202>
		{
			LCD_vSend_string("ON");
    549a:	8e e5       	ldi	r24, 0x5E	; 94
    549c:	92 e0       	ldi	r25, 0x02	; 2
    549e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    54a2:	04 c0       	rjmp	.+8      	; 0x54ac <vMenuOption+0x20a>
		}
		else
		{
			LCD_vSend_string("OFF");
    54a4:	81 e6       	ldi	r24, 0x61	; 97
    54a6:	92 e0       	ldi	r25, 0x02	; 2
    54a8:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
		}

		LCD_movecursor(2,1);
    54ac:	82 e0       	ldi	r24, 0x02	; 2
    54ae:	61 e0       	ldi	r22, 0x01	; 1
    54b0:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <LCD_movecursor>
		LCD_vSend_string("1-On 2-Off 0-RET");
    54b4:	85 e6       	ldi	r24, 0x65	; 101
    54b6:	92 e0       	ldi	r25, 0x02	; 2
    54b8:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
		
		/*******************************************************************************/
		
		key_pressed = u8GetKeyPressed(u8LoginMode);
    54bc:	89 a9       	ldd	r24, Y+49	; 0x31
    54be:	0e 94 76 2b 	call	0x56ec	; 0x56ec <u8GetKeyPressed>
    54c2:	8b a7       	std	Y+43, r24	; 0x2b
    54c4:	80 e0       	ldi	r24, 0x00	; 0
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	a8 ec       	ldi	r26, 0xC8	; 200
    54ca:	b2 e4       	ldi	r27, 0x42	; 66
    54cc:	89 8f       	std	Y+25, r24	; 0x19
    54ce:	9a 8f       	std	Y+26, r25	; 0x1a
    54d0:	ab 8f       	std	Y+27, r26	; 0x1b
    54d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54d4:	69 8d       	ldd	r22, Y+25	; 0x19
    54d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    54d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    54da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    54dc:	20 e0       	ldi	r18, 0x00	; 0
    54de:	30 e0       	ldi	r19, 0x00	; 0
    54e0:	4a ef       	ldi	r20, 0xFA	; 250
    54e2:	54 e4       	ldi	r21, 0x44	; 68
    54e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54e8:	dc 01       	movw	r26, r24
    54ea:	cb 01       	movw	r24, r22
    54ec:	8d 8b       	std	Y+21, r24	; 0x15
    54ee:	9e 8b       	std	Y+22, r25	; 0x16
    54f0:	af 8b       	std	Y+23, r26	; 0x17
    54f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    54f4:	6d 89       	ldd	r22, Y+21	; 0x15
    54f6:	7e 89       	ldd	r23, Y+22	; 0x16
    54f8:	8f 89       	ldd	r24, Y+23	; 0x17
    54fa:	98 8d       	ldd	r25, Y+24	; 0x18
    54fc:	20 e0       	ldi	r18, 0x00	; 0
    54fe:	30 e0       	ldi	r19, 0x00	; 0
    5500:	40 e8       	ldi	r20, 0x80	; 128
    5502:	5f e3       	ldi	r21, 0x3F	; 63
    5504:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5508:	88 23       	and	r24, r24
    550a:	2c f4       	brge	.+10     	; 0x5516 <vMenuOption+0x274>
		__ticks = 1;
    550c:	81 e0       	ldi	r24, 0x01	; 1
    550e:	90 e0       	ldi	r25, 0x00	; 0
    5510:	9c 8b       	std	Y+20, r25	; 0x14
    5512:	8b 8b       	std	Y+19, r24	; 0x13
    5514:	3f c0       	rjmp	.+126    	; 0x5594 <vMenuOption+0x2f2>
	else if (__tmp > 65535)
    5516:	6d 89       	ldd	r22, Y+21	; 0x15
    5518:	7e 89       	ldd	r23, Y+22	; 0x16
    551a:	8f 89       	ldd	r24, Y+23	; 0x17
    551c:	98 8d       	ldd	r25, Y+24	; 0x18
    551e:	20 e0       	ldi	r18, 0x00	; 0
    5520:	3f ef       	ldi	r19, 0xFF	; 255
    5522:	4f e7       	ldi	r20, 0x7F	; 127
    5524:	57 e4       	ldi	r21, 0x47	; 71
    5526:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    552a:	18 16       	cp	r1, r24
    552c:	4c f5       	brge	.+82     	; 0x5580 <vMenuOption+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    552e:	69 8d       	ldd	r22, Y+25	; 0x19
    5530:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5532:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5534:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5536:	20 e0       	ldi	r18, 0x00	; 0
    5538:	30 e0       	ldi	r19, 0x00	; 0
    553a:	40 e2       	ldi	r20, 0x20	; 32
    553c:	51 e4       	ldi	r21, 0x41	; 65
    553e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5542:	dc 01       	movw	r26, r24
    5544:	cb 01       	movw	r24, r22
    5546:	bc 01       	movw	r22, r24
    5548:	cd 01       	movw	r24, r26
    554a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    554e:	dc 01       	movw	r26, r24
    5550:	cb 01       	movw	r24, r22
    5552:	9c 8b       	std	Y+20, r25	; 0x14
    5554:	8b 8b       	std	Y+19, r24	; 0x13
    5556:	0f c0       	rjmp	.+30     	; 0x5576 <vMenuOption+0x2d4>
    5558:	88 ec       	ldi	r24, 0xC8	; 200
    555a:	90 e0       	ldi	r25, 0x00	; 0
    555c:	9a 8b       	std	Y+18, r25	; 0x12
    555e:	89 8b       	std	Y+17, r24	; 0x11
    5560:	89 89       	ldd	r24, Y+17	; 0x11
    5562:	9a 89       	ldd	r25, Y+18	; 0x12
    5564:	01 97       	sbiw	r24, 0x01	; 1
    5566:	f1 f7       	brne	.-4      	; 0x5564 <vMenuOption+0x2c2>
    5568:	9a 8b       	std	Y+18, r25	; 0x12
    556a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    556c:	8b 89       	ldd	r24, Y+19	; 0x13
    556e:	9c 89       	ldd	r25, Y+20	; 0x14
    5570:	01 97       	sbiw	r24, 0x01	; 1
    5572:	9c 8b       	std	Y+20, r25	; 0x14
    5574:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5576:	8b 89       	ldd	r24, Y+19	; 0x13
    5578:	9c 89       	ldd	r25, Y+20	; 0x14
    557a:	00 97       	sbiw	r24, 0x00	; 0
    557c:	69 f7       	brne	.-38     	; 0x5558 <vMenuOption+0x2b6>
    557e:	14 c0       	rjmp	.+40     	; 0x55a8 <vMenuOption+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5580:	6d 89       	ldd	r22, Y+21	; 0x15
    5582:	7e 89       	ldd	r23, Y+22	; 0x16
    5584:	8f 89       	ldd	r24, Y+23	; 0x17
    5586:	98 8d       	ldd	r25, Y+24	; 0x18
    5588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    558c:	dc 01       	movw	r26, r24
    558e:	cb 01       	movw	r24, r22
    5590:	9c 8b       	std	Y+20, r25	; 0x14
    5592:	8b 8b       	std	Y+19, r24	; 0x13
    5594:	8b 89       	ldd	r24, Y+19	; 0x13
    5596:	9c 89       	ldd	r25, Y+20	; 0x14
    5598:	98 8b       	std	Y+16, r25	; 0x10
    559a:	8f 87       	std	Y+15, r24	; 0x0f
    559c:	8f 85       	ldd	r24, Y+15	; 0x0f
    559e:	98 89       	ldd	r25, Y+16	; 0x10
    55a0:	01 97       	sbiw	r24, 0x01	; 1
    55a2:	f1 f7       	brne	.-4      	; 0x55a0 <vMenuOption+0x2fe>
    55a4:	98 8b       	std	Y+16, r25	; 0x10
    55a6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);

		
		
		if (key_pressed == '1')
    55a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    55aa:	81 33       	cpi	r24, 0x31	; 49
    55ac:	21 f4       	brne	.+8      	; 0x55b6 <vMenuOption+0x314>
		{
			SPI_ui8TransmitRecive(u8TurnOnCode);
    55ae:	8e a5       	ldd	r24, Y+46	; 0x2e
    55b0:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <SPI_ui8TransmitRecive>
    55b4:	87 c0       	rjmp	.+270    	; 0x56c4 <vMenuOption+0x422>
		}
		else if (key_pressed == '2')
    55b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    55b8:	82 33       	cpi	r24, 0x32	; 50
    55ba:	21 f4       	brne	.+8      	; 0x55c4 <vMenuOption+0x322>
		{
			SPI_ui8TransmitRecive(u8TurnOffCode);
    55bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    55be:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <SPI_ui8TransmitRecive>
    55c2:	80 c0       	rjmp	.+256    	; 0x56c4 <vMenuOption+0x422>
		}
		else if( (key_pressed != NOT_PRESSED) && (key_pressed != '0') )
    55c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    55c6:	8f 3f       	cpi	r24, 0xFF	; 255
    55c8:	09 f4       	brne	.+2      	; 0x55cc <vMenuOption+0x32a>
    55ca:	7c c0       	rjmp	.+248    	; 0x56c4 <vMenuOption+0x422>
    55cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    55ce:	80 33       	cpi	r24, 0x30	; 48
    55d0:	09 f4       	brne	.+2      	; 0x55d4 <vMenuOption+0x332>
    55d2:	78 c0       	rjmp	.+240    	; 0x56c4 <vMenuOption+0x422>
		{
			LCD_clearscreen();
    55d4:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <LCD_clearscreen>
			LCD_vSend_string("Wrong input");
    55d8:	86 e7       	ldi	r24, 0x76	; 118
    55da:	92 e0       	ldi	r25, 0x02	; 2
    55dc:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <LCD_vSend_string>
    55e0:	80 e0       	ldi	r24, 0x00	; 0
    55e2:	90 e0       	ldi	r25, 0x00	; 0
    55e4:	aa ef       	ldi	r26, 0xFA	; 250
    55e6:	b3 e4       	ldi	r27, 0x43	; 67
    55e8:	8b 87       	std	Y+11, r24	; 0x0b
    55ea:	9c 87       	std	Y+12, r25	; 0x0c
    55ec:	ad 87       	std	Y+13, r26	; 0x0d
    55ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    55f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    55f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    55f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    55f8:	20 e0       	ldi	r18, 0x00	; 0
    55fa:	30 e0       	ldi	r19, 0x00	; 0
    55fc:	4a ef       	ldi	r20, 0xFA	; 250
    55fe:	54 e4       	ldi	r21, 0x44	; 68
    5600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5604:	dc 01       	movw	r26, r24
    5606:	cb 01       	movw	r24, r22
    5608:	8f 83       	std	Y+7, r24	; 0x07
    560a:	98 87       	std	Y+8, r25	; 0x08
    560c:	a9 87       	std	Y+9, r26	; 0x09
    560e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5610:	6f 81       	ldd	r22, Y+7	; 0x07
    5612:	78 85       	ldd	r23, Y+8	; 0x08
    5614:	89 85       	ldd	r24, Y+9	; 0x09
    5616:	9a 85       	ldd	r25, Y+10	; 0x0a
    5618:	20 e0       	ldi	r18, 0x00	; 0
    561a:	30 e0       	ldi	r19, 0x00	; 0
    561c:	40 e8       	ldi	r20, 0x80	; 128
    561e:	5f e3       	ldi	r21, 0x3F	; 63
    5620:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5624:	88 23       	and	r24, r24
    5626:	2c f4       	brge	.+10     	; 0x5632 <vMenuOption+0x390>
		__ticks = 1;
    5628:	81 e0       	ldi	r24, 0x01	; 1
    562a:	90 e0       	ldi	r25, 0x00	; 0
    562c:	9e 83       	std	Y+6, r25	; 0x06
    562e:	8d 83       	std	Y+5, r24	; 0x05
    5630:	3f c0       	rjmp	.+126    	; 0x56b0 <vMenuOption+0x40e>
	else if (__tmp > 65535)
    5632:	6f 81       	ldd	r22, Y+7	; 0x07
    5634:	78 85       	ldd	r23, Y+8	; 0x08
    5636:	89 85       	ldd	r24, Y+9	; 0x09
    5638:	9a 85       	ldd	r25, Y+10	; 0x0a
    563a:	20 e0       	ldi	r18, 0x00	; 0
    563c:	3f ef       	ldi	r19, 0xFF	; 255
    563e:	4f e7       	ldi	r20, 0x7F	; 127
    5640:	57 e4       	ldi	r21, 0x47	; 71
    5642:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5646:	18 16       	cp	r1, r24
    5648:	4c f5       	brge	.+82     	; 0x569c <vMenuOption+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    564a:	6b 85       	ldd	r22, Y+11	; 0x0b
    564c:	7c 85       	ldd	r23, Y+12	; 0x0c
    564e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5650:	9e 85       	ldd	r25, Y+14	; 0x0e
    5652:	20 e0       	ldi	r18, 0x00	; 0
    5654:	30 e0       	ldi	r19, 0x00	; 0
    5656:	40 e2       	ldi	r20, 0x20	; 32
    5658:	51 e4       	ldi	r21, 0x41	; 65
    565a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    565e:	dc 01       	movw	r26, r24
    5660:	cb 01       	movw	r24, r22
    5662:	bc 01       	movw	r22, r24
    5664:	cd 01       	movw	r24, r26
    5666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    566a:	dc 01       	movw	r26, r24
    566c:	cb 01       	movw	r24, r22
    566e:	9e 83       	std	Y+6, r25	; 0x06
    5670:	8d 83       	std	Y+5, r24	; 0x05
    5672:	0f c0       	rjmp	.+30     	; 0x5692 <vMenuOption+0x3f0>
    5674:	88 ec       	ldi	r24, 0xC8	; 200
    5676:	90 e0       	ldi	r25, 0x00	; 0
    5678:	9c 83       	std	Y+4, r25	; 0x04
    567a:	8b 83       	std	Y+3, r24	; 0x03
    567c:	8b 81       	ldd	r24, Y+3	; 0x03
    567e:	9c 81       	ldd	r25, Y+4	; 0x04
    5680:	01 97       	sbiw	r24, 0x01	; 1
    5682:	f1 f7       	brne	.-4      	; 0x5680 <vMenuOption+0x3de>
    5684:	9c 83       	std	Y+4, r25	; 0x04
    5686:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5688:	8d 81       	ldd	r24, Y+5	; 0x05
    568a:	9e 81       	ldd	r25, Y+6	; 0x06
    568c:	01 97       	sbiw	r24, 0x01	; 1
    568e:	9e 83       	std	Y+6, r25	; 0x06
    5690:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5692:	8d 81       	ldd	r24, Y+5	; 0x05
    5694:	9e 81       	ldd	r25, Y+6	; 0x06
    5696:	00 97       	sbiw	r24, 0x00	; 0
    5698:	69 f7       	brne	.-38     	; 0x5674 <vMenuOption+0x3d2>
    569a:	14 c0       	rjmp	.+40     	; 0x56c4 <vMenuOption+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    569c:	6f 81       	ldd	r22, Y+7	; 0x07
    569e:	78 85       	ldd	r23, Y+8	; 0x08
    56a0:	89 85       	ldd	r24, Y+9	; 0x09
    56a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    56a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56a8:	dc 01       	movw	r26, r24
    56aa:	cb 01       	movw	r24, r22
    56ac:	9e 83       	std	Y+6, r25	; 0x06
    56ae:	8d 83       	std	Y+5, r24	; 0x05
    56b0:	8d 81       	ldd	r24, Y+5	; 0x05
    56b2:	9e 81       	ldd	r25, Y+6	; 0x06
    56b4:	9a 83       	std	Y+2, r25	; 0x02
    56b6:	89 83       	std	Y+1, r24	; 0x01
    56b8:	89 81       	ldd	r24, Y+1	; 0x01
    56ba:	9a 81       	ldd	r25, Y+2	; 0x02
    56bc:	01 97       	sbiw	r24, 0x01	; 1
    56be:	f1 f7       	brne	.-4      	; 0x56bc <vMenuOption+0x41a>
    56c0:	9a 83       	std	Y+2, r25	; 0x02
    56c2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
		}
	} while ( ( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));
    56c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    56c6:	80 33       	cpi	r24, 0x30	; 48
    56c8:	18 f0       	brcs	.+6      	; 0x56d0 <vMenuOption+0x42e>
    56ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    56cc:	83 33       	cpi	r24, 0x33	; 51
    56ce:	28 f0       	brcs	.+10     	; 0x56da <vMenuOption+0x438>
    56d0:	80 91 a4 02 	lds	r24, 0x02A4
    56d4:	88 23       	and	r24, r24
    56d6:	09 f4       	brne	.+2      	; 0x56da <vMenuOption+0x438>
    56d8:	f7 cd       	rjmp	.-1042   	; 0x52c8 <vMenuOption+0x26>
}
    56da:	e3 96       	adiw	r28, 0x33	; 51
    56dc:	0f b6       	in	r0, 0x3f	; 63
    56de:	f8 94       	cli
    56e0:	de bf       	out	0x3e, r29	; 62
    56e2:	0f be       	out	0x3f, r0	; 63
    56e4:	cd bf       	out	0x3d, r28	; 61
    56e6:	cf 91       	pop	r28
    56e8:	df 91       	pop	r29
    56ea:	08 95       	ret

000056ec <u8GetKeyPressed>:

uint8 u8GetKeyPressed(const uint8 u8LoginMode)
{
    56ec:	df 93       	push	r29
    56ee:	cf 93       	push	r28
    56f0:	00 d0       	rcall	.+0      	; 0x56f2 <u8GetKeyPressed+0x6>
    56f2:	cd b7       	in	r28, 0x3d	; 61
    56f4:	de b7       	in	r29, 0x3e	; 62
    56f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 key_pressed = NOT_PRESSED;
    56f8:	8f ef       	ldi	r24, 0xFF	; 255
    56fa:	89 83       	std	Y+1, r24	; 0x01
    56fc:	1d c0       	rjmp	.+58     	; 0x5738 <u8GetKeyPressed+0x4c>
	while (key_pressed == NOT_PRESSED)
	{
		if ( (session_counter >= ADMIN_TIMEOUT && u8LoginMode == ADMIN) || ( session_counter >= GUEST_TIMEOUT && u8LoginMode == GUEST ))//check for timeout
    56fe:	80 91 a2 02 	lds	r24, 0x02A2
    5702:	90 91 a3 02 	lds	r25, 0x02A3
    5706:	2b e0       	ldi	r18, 0x0B	; 11
    5708:	88 3b       	cpi	r24, 0xB8	; 184
    570a:	92 07       	cpc	r25, r18
    570c:	18 f0       	brcs	.+6      	; 0x5714 <u8GetKeyPressed+0x28>
    570e:	8a 81       	ldd	r24, Y+2	; 0x02
    5710:	81 30       	cpi	r24, 0x01	; 1
    5712:	59 f0       	breq	.+22     	; 0x572a <u8GetKeyPressed+0x3e>
    5714:	80 91 a2 02 	lds	r24, 0x02A2
    5718:	90 91 a3 02 	lds	r25, 0x02A3
    571c:	27 e0       	ldi	r18, 0x07	; 7
    571e:	80 3d       	cpi	r24, 0xD0	; 208
    5720:	92 07       	cpc	r25, r18
    5722:	38 f0       	brcs	.+14     	; 0x5732 <u8GetKeyPressed+0x46>
    5724:	8a 81       	ldd	r24, Y+2	; 0x02
    5726:	82 30       	cpi	r24, 0x02	; 2
    5728:	21 f4       	brne	.+8      	; 0x5732 <u8GetKeyPressed+0x46>
		{
			timeout_flag = TRUE;
    572a:	81 e0       	ldi	r24, 0x01	; 1
    572c:	80 93 a4 02 	sts	0x02A4, r24
    5730:	06 c0       	rjmp	.+12     	; 0x573e <u8GetKeyPressed+0x52>
			break;
		}
		
		key_pressed = keypad_u8check_press();
    5732:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <keypad_u8check_press>
    5736:	89 83       	std	Y+1, r24	; 0x01
}

uint8 u8GetKeyPressed(const uint8 u8LoginMode)
{
	uint8 key_pressed = NOT_PRESSED;
	while (key_pressed == NOT_PRESSED)
    5738:	89 81       	ldd	r24, Y+1	; 0x01
    573a:	8f 3f       	cpi	r24, 0xFF	; 255
    573c:	01 f3       	breq	.-64     	; 0x56fe <u8GetKeyPressed+0x12>
			break;
		}
		
		key_pressed = keypad_u8check_press();
	}
	return key_pressed;
    573e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5740:	0f 90       	pop	r0
    5742:	0f 90       	pop	r0
    5744:	cf 91       	pop	r28
    5746:	df 91       	pop	r29
    5748:	08 95       	ret

0000574a <timer0_initializeCTC>:
/*Version: 1.0V                                         */
/********************************************************/
#include "timer_driver.h"

void timer0_initializeCTC(void)
{
    574a:	df 93       	push	r29
    574c:	cf 93       	push	r28
    574e:	cd b7       	in	r28, 0x3d	; 61
    5750:	de b7       	in	r29, 0x3e	; 62
	
	OCR0 = 78;
    5752:	ec e5       	ldi	r30, 0x5C	; 92
    5754:	f0 e0       	ldi	r31, 0x00	; 0
    5756:	8e e4       	ldi	r24, 0x4E	; 78
    5758:	80 83       	st	Z, r24


	SET_BIT(TCCR0, WGM01);
    575a:	a3 e5       	ldi	r26, 0x53	; 83
    575c:	b0 e0       	ldi	r27, 0x00	; 0
    575e:	e3 e5       	ldi	r30, 0x53	; 83
    5760:	f0 e0       	ldi	r31, 0x00	; 0
    5762:	80 81       	ld	r24, Z
    5764:	88 60       	ori	r24, 0x08	; 8
    5766:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM00);
    5768:	a3 e5       	ldi	r26, 0x53	; 83
    576a:	b0 e0       	ldi	r27, 0x00	; 0
    576c:	e3 e5       	ldi	r30, 0x53	; 83
    576e:	f0 e0       	ldi	r31, 0x00	; 0
    5770:	80 81       	ld	r24, Z
    5772:	8f 7b       	andi	r24, 0xBF	; 191
    5774:	8c 93       	st	X, r24
	

	SET_BIT(TCCR0, CS00);
    5776:	a3 e5       	ldi	r26, 0x53	; 83
    5778:	b0 e0       	ldi	r27, 0x00	; 0
    577a:	e3 e5       	ldi	r30, 0x53	; 83
    577c:	f0 e0       	ldi	r31, 0x00	; 0
    577e:	80 81       	ld	r24, Z
    5780:	81 60       	ori	r24, 0x01	; 1
    5782:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    5784:	a3 e5       	ldi	r26, 0x53	; 83
    5786:	b0 e0       	ldi	r27, 0x00	; 0
    5788:	e3 e5       	ldi	r30, 0x53	; 83
    578a:	f0 e0       	ldi	r31, 0x00	; 0
    578c:	80 81       	ld	r24, Z
    578e:	8d 7f       	andi	r24, 0xFD	; 253
    5790:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS02);
    5792:	a3 e5       	ldi	r26, 0x53	; 83
    5794:	b0 e0       	ldi	r27, 0x00	; 0
    5796:	e3 e5       	ldi	r30, 0x53	; 83
    5798:	f0 e0       	ldi	r31, 0x00	; 0
    579a:	80 81       	ld	r24, Z
    579c:	84 60       	ori	r24, 0x04	; 4
    579e:	8c 93       	st	X, r24
	

	sei();
    57a0:	78 94       	sei
	

	SET_BIT(TIMSK, OCIE0);
    57a2:	a9 e5       	ldi	r26, 0x59	; 89
    57a4:	b0 e0       	ldi	r27, 0x00	; 0
    57a6:	e9 e5       	ldi	r30, 0x59	; 89
    57a8:	f0 e0       	ldi	r31, 0x00	; 0
    57aa:	80 81       	ld	r24, Z
    57ac:	82 60       	ori	r24, 0x02	; 2
    57ae:	8c 93       	st	X, r24
}
    57b0:	cf 91       	pop	r28
    57b2:	df 91       	pop	r29
    57b4:	08 95       	ret

000057b6 <timer0_stop>:

void timer0_stop(void)
{
    57b6:	df 93       	push	r29
    57b8:	cf 93       	push	r28
    57ba:	cd b7       	in	r28, 0x3d	; 61
    57bc:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(TCCR0, CS00);
    57be:	a3 e5       	ldi	r26, 0x53	; 83
    57c0:	b0 e0       	ldi	r27, 0x00	; 0
    57c2:	e3 e5       	ldi	r30, 0x53	; 83
    57c4:	f0 e0       	ldi	r31, 0x00	; 0
    57c6:	80 81       	ld	r24, Z
    57c8:	8e 7f       	andi	r24, 0xFE	; 254
    57ca:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    57cc:	a3 e5       	ldi	r26, 0x53	; 83
    57ce:	b0 e0       	ldi	r27, 0x00	; 0
    57d0:	e3 e5       	ldi	r30, 0x53	; 83
    57d2:	f0 e0       	ldi	r31, 0x00	; 0
    57d4:	80 81       	ld	r24, Z
    57d6:	8d 7f       	andi	r24, 0xFD	; 253
    57d8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    57da:	a3 e5       	ldi	r26, 0x53	; 83
    57dc:	b0 e0       	ldi	r27, 0x00	; 0
    57de:	e3 e5       	ldi	r30, 0x53	; 83
    57e0:	f0 e0       	ldi	r31, 0x00	; 0
    57e2:	80 81       	ld	r24, Z
    57e4:	8b 7f       	andi	r24, 0xFB	; 251
    57e6:	8c 93       	st	X, r24
}
    57e8:	cf 91       	pop	r28
    57ea:	df 91       	pop	r29
    57ec:	08 95       	ret

000057ee <timer_initializefastpwm>:
void timer_initializefastpwm(void)
{
    57ee:	df 93       	push	r29
    57f0:	cf 93       	push	r28
    57f2:	cd b7       	in	r28, 0x3d	; 61
    57f4:	de b7       	in	r29, 0x3e	; 62

	OCR0 = 128;
    57f6:	ec e5       	ldi	r30, 0x5C	; 92
    57f8:	f0 e0       	ldi	r31, 0x00	; 0
    57fa:	80 e8       	ldi	r24, 0x80	; 128
    57fc:	80 83       	st	Z, r24
	

	SET_BIT(TCCR0, WGM00); 
    57fe:	a3 e5       	ldi	r26, 0x53	; 83
    5800:	b0 e0       	ldi	r27, 0x00	; 0
    5802:	e3 e5       	ldi	r30, 0x53	; 83
    5804:	f0 e0       	ldi	r31, 0x00	; 0
    5806:	80 81       	ld	r24, Z
    5808:	80 64       	ori	r24, 0x40	; 64
    580a:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    580c:	a3 e5       	ldi	r26, 0x53	; 83
    580e:	b0 e0       	ldi	r27, 0x00	; 0
    5810:	e3 e5       	ldi	r30, 0x53	; 83
    5812:	f0 e0       	ldi	r31, 0x00	; 0
    5814:	80 81       	ld	r24, Z
    5816:	88 60       	ori	r24, 0x08	; 8
    5818:	8c 93       	st	X, r24
	

	sei();
    581a:	78 94       	sei
	
	SET_BIT(TCCR0, COM01);
    581c:	a3 e5       	ldi	r26, 0x53	; 83
    581e:	b0 e0       	ldi	r27, 0x00	; 0
    5820:	e3 e5       	ldi	r30, 0x53	; 83
    5822:	f0 e0       	ldi	r31, 0x00	; 0
    5824:	80 81       	ld	r24, Z
    5826:	80 62       	ori	r24, 0x20	; 32
    5828:	8c 93       	st	X, r24

	
	SET_BIT(TIMSK,TOIE0);
    582a:	a9 e5       	ldi	r26, 0x59	; 89
    582c:	b0 e0       	ldi	r27, 0x00	; 0
    582e:	e9 e5       	ldi	r30, 0x59	; 89
    5830:	f0 e0       	ldi	r31, 0x00	; 0
    5832:	80 81       	ld	r24, Z
    5834:	81 60       	ori	r24, 0x01	; 1
    5836:	8c 93       	st	X, r24
	

	SET_BIT(TCCR0, CS00);
    5838:	a3 e5       	ldi	r26, 0x53	; 83
    583a:	b0 e0       	ldi	r27, 0x00	; 0
    583c:	e3 e5       	ldi	r30, 0x53	; 83
    583e:	f0 e0       	ldi	r31, 0x00	; 0
    5840:	80 81       	ld	r24, Z
    5842:	81 60       	ori	r24, 0x01	; 1
    5844:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    5846:	a3 e5       	ldi	r26, 0x53	; 83
    5848:	b0 e0       	ldi	r27, 0x00	; 0
    584a:	e3 e5       	ldi	r30, 0x53	; 83
    584c:	f0 e0       	ldi	r31, 0x00	; 0
    584e:	80 81       	ld	r24, Z
    5850:	8d 7f       	andi	r24, 0xFD	; 253
    5852:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS02);
    5854:	a3 e5       	ldi	r26, 0x53	; 83
    5856:	b0 e0       	ldi	r27, 0x00	; 0
    5858:	e3 e5       	ldi	r30, 0x53	; 83
    585a:	f0 e0       	ldi	r31, 0x00	; 0
    585c:	80 81       	ld	r24, Z
    585e:	84 60       	ori	r24, 0x04	; 4
    5860:	8c 93       	st	X, r24
}
    5862:	cf 91       	pop	r28
    5864:	df 91       	pop	r29
    5866:	08 95       	ret

00005868 <change_dutycycle>:
void change_dutycycle(float64 duty)
{
    5868:	0f 93       	push	r16
    586a:	1f 93       	push	r17
    586c:	df 93       	push	r29
    586e:	cf 93       	push	r28
    5870:	00 d0       	rcall	.+0      	; 0x5872 <change_dutycycle+0xa>
    5872:	00 d0       	rcall	.+0      	; 0x5874 <change_dutycycle+0xc>
    5874:	cd b7       	in	r28, 0x3d	; 61
    5876:	de b7       	in	r29, 0x3e	; 62
    5878:	69 83       	std	Y+1, r22	; 0x01
    587a:	7a 83       	std	Y+2, r23	; 0x02
    587c:	8b 83       	std	Y+3, r24	; 0x03
    587e:	9c 83       	std	Y+4, r25	; 0x04
	OCR0 = (duty / 100) * 256;
    5880:	0c e5       	ldi	r16, 0x5C	; 92
    5882:	10 e0       	ldi	r17, 0x00	; 0
    5884:	69 81       	ldd	r22, Y+1	; 0x01
    5886:	7a 81       	ldd	r23, Y+2	; 0x02
    5888:	8b 81       	ldd	r24, Y+3	; 0x03
    588a:	9c 81       	ldd	r25, Y+4	; 0x04
    588c:	20 e0       	ldi	r18, 0x00	; 0
    588e:	30 e0       	ldi	r19, 0x00	; 0
    5890:	48 ec       	ldi	r20, 0xC8	; 200
    5892:	52 e4       	ldi	r21, 0x42	; 66
    5894:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5898:	dc 01       	movw	r26, r24
    589a:	cb 01       	movw	r24, r22
    589c:	bc 01       	movw	r22, r24
    589e:	cd 01       	movw	r24, r26
    58a0:	20 e0       	ldi	r18, 0x00	; 0
    58a2:	30 e0       	ldi	r19, 0x00	; 0
    58a4:	40 e8       	ldi	r20, 0x80	; 128
    58a6:	53 e4       	ldi	r21, 0x43	; 67
    58a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58ac:	dc 01       	movw	r26, r24
    58ae:	cb 01       	movw	r24, r22
    58b0:	bc 01       	movw	r22, r24
    58b2:	cd 01       	movw	r24, r26
    58b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58b8:	dc 01       	movw	r26, r24
    58ba:	cb 01       	movw	r24, r22
    58bc:	f8 01       	movw	r30, r16
    58be:	80 83       	st	Z, r24
}
    58c0:	0f 90       	pop	r0
    58c2:	0f 90       	pop	r0
    58c4:	0f 90       	pop	r0
    58c6:	0f 90       	pop	r0
    58c8:	cf 91       	pop	r28
    58ca:	df 91       	pop	r29
    58cc:	1f 91       	pop	r17
    58ce:	0f 91       	pop	r16
    58d0:	08 95       	ret

000058d2 <__prologue_saves__>:
    58d2:	2f 92       	push	r2
    58d4:	3f 92       	push	r3
    58d6:	4f 92       	push	r4
    58d8:	5f 92       	push	r5
    58da:	6f 92       	push	r6
    58dc:	7f 92       	push	r7
    58de:	8f 92       	push	r8
    58e0:	9f 92       	push	r9
    58e2:	af 92       	push	r10
    58e4:	bf 92       	push	r11
    58e6:	cf 92       	push	r12
    58e8:	df 92       	push	r13
    58ea:	ef 92       	push	r14
    58ec:	ff 92       	push	r15
    58ee:	0f 93       	push	r16
    58f0:	1f 93       	push	r17
    58f2:	cf 93       	push	r28
    58f4:	df 93       	push	r29
    58f6:	cd b7       	in	r28, 0x3d	; 61
    58f8:	de b7       	in	r29, 0x3e	; 62
    58fa:	ca 1b       	sub	r28, r26
    58fc:	db 0b       	sbc	r29, r27
    58fe:	0f b6       	in	r0, 0x3f	; 63
    5900:	f8 94       	cli
    5902:	de bf       	out	0x3e, r29	; 62
    5904:	0f be       	out	0x3f, r0	; 63
    5906:	cd bf       	out	0x3d, r28	; 61
    5908:	09 94       	ijmp

0000590a <__epilogue_restores__>:
    590a:	2a 88       	ldd	r2, Y+18	; 0x12
    590c:	39 88       	ldd	r3, Y+17	; 0x11
    590e:	48 88       	ldd	r4, Y+16	; 0x10
    5910:	5f 84       	ldd	r5, Y+15	; 0x0f
    5912:	6e 84       	ldd	r6, Y+14	; 0x0e
    5914:	7d 84       	ldd	r7, Y+13	; 0x0d
    5916:	8c 84       	ldd	r8, Y+12	; 0x0c
    5918:	9b 84       	ldd	r9, Y+11	; 0x0b
    591a:	aa 84       	ldd	r10, Y+10	; 0x0a
    591c:	b9 84       	ldd	r11, Y+9	; 0x09
    591e:	c8 84       	ldd	r12, Y+8	; 0x08
    5920:	df 80       	ldd	r13, Y+7	; 0x07
    5922:	ee 80       	ldd	r14, Y+6	; 0x06
    5924:	fd 80       	ldd	r15, Y+5	; 0x05
    5926:	0c 81       	ldd	r16, Y+4	; 0x04
    5928:	1b 81       	ldd	r17, Y+3	; 0x03
    592a:	aa 81       	ldd	r26, Y+2	; 0x02
    592c:	b9 81       	ldd	r27, Y+1	; 0x01
    592e:	ce 0f       	add	r28, r30
    5930:	d1 1d       	adc	r29, r1
    5932:	0f b6       	in	r0, 0x3f	; 63
    5934:	f8 94       	cli
    5936:	de bf       	out	0x3e, r29	; 62
    5938:	0f be       	out	0x3f, r0	; 63
    593a:	cd bf       	out	0x3d, r28	; 61
    593c:	ed 01       	movw	r28, r26
    593e:	08 95       	ret

00005940 <_exit>:
    5940:	f8 94       	cli

00005942 <__stop_program>:
    5942:	ff cf       	rjmp	.-2      	; 0x5942 <__stop_program>
